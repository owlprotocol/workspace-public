/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeployBeaconProxyRequestDeployParams
    /// </summary>
    [DataContract(Name = "deploy_BeaconProxy_request_deployParams")]
    public partial class DeployBeaconProxyRequestDeployParams : IEquatable<DeployBeaconProxyRequestDeployParams>, IValidatableObject
    {
        /// <summary>
        /// Defines DeploymentMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeploymentMethodEnum
        {
            /// <summary>
            /// Enum DETERMINISTIC for value: DETERMINISTIC
            /// </summary>
            [EnumMember(Value = "DETERMINISTIC")]
            DETERMINISTIC = 1,

            /// <summary>
            /// Enum ERC1167 for value: ERC1167
            /// </summary>
            [EnumMember(Value = "ERC1167")]
            ERC1167 = 2,

            /// <summary>
            /// Enum BEACONOWL for value: BEACON_OWL
            /// </summary>
            [EnumMember(Value = "BEACON_OWL")]
            BEACONOWL = 3,

            /// <summary>
            /// Enum BEACONEXISTING for value: BEACON_EXISTING
            /// </summary>
            [EnumMember(Value = "BEACON_EXISTING")]
            BEACONEXISTING = 4,

            /// <summary>
            /// Enum BEACONNEW for value: BEACON_NEW
            /// </summary>
            [EnumMember(Value = "BEACON_NEW")]
            BEACONNEW = 5

        }


        /// <summary>
        /// Gets or Sets DeploymentMethod
        /// </summary>
        [DataMember(Name = "deploymentMethod", IsRequired = true, EmitDefaultValue = true)]
        public DeploymentMethodEnum DeploymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeployBeaconProxyRequestDeployParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeployBeaconProxyRequestDeployParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeployBeaconProxyRequestDeployParams" /> class.
        /// </summary>
        /// <param name="msgSender">An ethereum address.</param>
        /// <param name="salt">Salt parameter string to deploy different contracts with identical parameteres (default: 1) (default to &quot;0x1&quot;).</param>
        /// <param name="deploymentMethod">deploymentMethod (required).</param>
        /// <param name="beaconAddress">The address of the beacon, if used in the deployment method.</param>
        /// <param name="beaonAdmin">The admin address of the beacon, if a new beacon is deployed.</param>
        public DeployBeaconProxyRequestDeployParams(string msgSender = default(string), string salt = @"0x1", DeploymentMethodEnum deploymentMethod = default(DeploymentMethodEnum), string beaconAddress = default(string), string beaonAdmin = default(string))
        {
            this.DeploymentMethod = deploymentMethod;
            this.MsgSender = msgSender;
            // use default value if no "salt" provided
            this.Salt = salt ?? @"0x1";
            this.BeaconAddress = beaconAddress;
            this.BeaonAdmin = beaonAdmin;
        }

        /// <summary>
        /// An ethereum address
        /// </summary>
        /// <value>An ethereum address</value>
        [DataMember(Name = "msgSender", EmitDefaultValue = false)]
        public string MsgSender { get; set; }

        /// <summary>
        /// Salt parameter string to deploy different contracts with identical parameteres (default: 1)
        /// </summary>
        /// <value>Salt parameter string to deploy different contracts with identical parameteres (default: 1)</value>
        [DataMember(Name = "salt", EmitDefaultValue = false)]
        public string Salt { get; set; }

        /// <summary>
        /// The address of the beacon, if used in the deployment method
        /// </summary>
        /// <value>The address of the beacon, if used in the deployment method</value>
        [DataMember(Name = "beaconAddress", EmitDefaultValue = false)]
        public string BeaconAddress { get; set; }

        /// <summary>
        /// The admin address of the beacon, if a new beacon is deployed
        /// </summary>
        /// <value>The admin address of the beacon, if a new beacon is deployed</value>
        [DataMember(Name = "beaonAdmin", EmitDefaultValue = false)]
        public string BeaonAdmin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeployBeaconProxyRequestDeployParams {\n");
            sb.Append("  MsgSender: ").Append(MsgSender).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  DeploymentMethod: ").Append(DeploymentMethod).Append("\n");
            sb.Append("  BeaconAddress: ").Append(BeaconAddress).Append("\n");
            sb.Append("  BeaonAdmin: ").Append(BeaonAdmin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input as DeployBeaconProxyRequestDeployParams).AreEqual;
        }

        /// <summary>
        /// Returns true if DeployBeaconProxyRequestDeployParams instances are equal
        /// </summary>
        /// <param name="input">Instance of DeployBeaconProxyRequestDeployParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeployBeaconProxyRequestDeployParams input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MsgSender != null)
                {
                    hashCode = (hashCode * 59) + this.MsgSender.GetHashCode();
                }
                if (this.Salt != null)
                {
                    hashCode = (hashCode * 59) + this.Salt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeploymentMethod.GetHashCode();
                if (this.BeaconAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BeaconAddress.GetHashCode();
                }
                if (this.BeaonAdmin != null)
                {
                    hashCode = (hashCode * 59) + this.BeaonAdmin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MsgSender (string) pattern
            Regex regexMsgSender = new Regex(@"0x([a-fA-F0-9]){40}", RegexOptions.CultureInvariant);
            if (false == regexMsgSender.Match(this.MsgSender).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MsgSender, must match a pattern of " + regexMsgSender, new [] { "MsgSender" });
            }

            // BeaconAddress (string) pattern
            Regex regexBeaconAddress = new Regex(@"0x([a-fA-F0-9]){40}", RegexOptions.CultureInvariant);
            if (false == regexBeaconAddress.Match(this.BeaconAddress).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeaconAddress, must match a pattern of " + regexBeaconAddress, new [] { "BeaconAddress" });
            }

            // BeaonAdmin (string) pattern
            Regex regexBeaonAdmin = new Regex(@"0x([a-fA-F0-9]){40}", RegexOptions.CultureInvariant);
            if (false == regexBeaonAdmin.Match(this.BeaonAdmin).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeaonAdmin, must match a pattern of " + regexBeaonAdmin, new [] { "BeaonAdmin" });
            }

            yield break;
        }
    }

}
