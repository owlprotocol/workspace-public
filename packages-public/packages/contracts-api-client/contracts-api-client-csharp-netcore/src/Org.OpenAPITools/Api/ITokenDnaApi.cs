/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IITokenDnaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ITokenDna.getDna
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaGetDna200Response</returns>
        InterfacesITokenDnaGetDna200Response InterfacesITokenDnaGetDna(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0);

        /// <summary>
        /// ITokenDna.getDna
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaGetDna200Response</returns>
        ApiResponse<InterfacesITokenDnaGetDna200Response> InterfacesITokenDnaGetDnaWithHttpInfo(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0);
        /// <summary>
        /// ITokenDna.getDnaBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaGetDnaBatch200Response</returns>
        InterfacesITokenDnaGetDnaBatch200Response InterfacesITokenDnaGetDnaBatch(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0);

        /// <summary>
        /// ITokenDna.getDnaBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaGetDnaBatch200Response</returns>
        ApiResponse<InterfacesITokenDnaGetDnaBatch200Response> InterfacesITokenDnaGetDnaBatchWithHttpInfo(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0);
        /// <summary>
        /// ITokenDna.setDna
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaSetDna200Response</returns>
        InterfacesITokenDnaSetDna200Response InterfacesITokenDnaSetDna(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0);

        /// <summary>
        /// ITokenDna.setDna
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaSetDna200Response</returns>
        ApiResponse<InterfacesITokenDnaSetDna200Response> InterfacesITokenDnaSetDnaWithHttpInfo(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0);
        /// <summary>
        /// ITokenDna.setDnaBatch
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaSetDnaBatch200Response</returns>
        InterfacesITokenDnaSetDnaBatch200Response InterfacesITokenDnaSetDnaBatch(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0);

        /// <summary>
        /// ITokenDna.setDnaBatch
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaSetDnaBatch200Response</returns>
        ApiResponse<InterfacesITokenDnaSetDnaBatch200Response> InterfacesITokenDnaSetDnaBatchWithHttpInfo(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IITokenDnaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ITokenDna.getDna
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaGetDna200Response</returns>
        System.Threading.Tasks.Task<InterfacesITokenDnaGetDna200Response> InterfacesITokenDnaGetDnaAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ITokenDna.getDna
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaGetDna200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesITokenDnaGetDna200Response>> InterfacesITokenDnaGetDnaWithHttpInfoAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ITokenDna.getDnaBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaGetDnaBatch200Response</returns>
        System.Threading.Tasks.Task<InterfacesITokenDnaGetDnaBatch200Response> InterfacesITokenDnaGetDnaBatchAsync(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ITokenDna.getDnaBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaGetDnaBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesITokenDnaGetDnaBatch200Response>> InterfacesITokenDnaGetDnaBatchWithHttpInfoAsync(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ITokenDna.setDna
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaSetDna200Response</returns>
        System.Threading.Tasks.Task<InterfacesITokenDnaSetDna200Response> InterfacesITokenDnaSetDnaAsync(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ITokenDna.setDna
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaSetDna200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesITokenDnaSetDna200Response>> InterfacesITokenDnaSetDnaWithHttpInfoAsync(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ITokenDna.setDnaBatch
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaSetDnaBatch200Response</returns>
        System.Threading.Tasks.Task<InterfacesITokenDnaSetDnaBatch200Response> InterfacesITokenDnaSetDnaBatchAsync(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ITokenDna.setDnaBatch
        /// </summary>
        /// <remarks>
        /// Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaSetDnaBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesITokenDnaSetDnaBatch200Response>> InterfacesITokenDnaSetDnaBatchWithHttpInfoAsync(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IITokenDnaApi : IITokenDnaApiSync, IITokenDnaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ITokenDnaApi : IITokenDnaApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ITokenDnaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ITokenDnaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ITokenDnaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ITokenDnaApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ITokenDnaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ITokenDnaApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ITokenDnaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ITokenDnaApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ITokenDna.getDna Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaGetDna200Response</returns>
        public InterfacesITokenDnaGetDna200Response InterfacesITokenDnaGetDna(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDna200Response> localVarResponse = InterfacesITokenDnaGetDnaWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.getDna Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaGetDna200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDna200Response> InterfacesITokenDnaGetDnaWithHttpInfo(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaGetDna");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaGetDna");
            }

            // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
            if (interfacesIERC721GetApprovedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721GetApprovedRequest' when calling ITokenDnaApi->InterfacesITokenDnaGetDna");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721GetApprovedRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaGetDna";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesITokenDnaGetDna200Response>("/{networkId}/interface/ITokenDna/read/{address}/getDna", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaGetDna", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.getDna Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaGetDna200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesITokenDnaGetDna200Response> InterfacesITokenDnaGetDnaAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDna200Response> localVarResponse = await InterfacesITokenDnaGetDnaWithHttpInfoAsync(networkId, address, interfacesIERC721GetApprovedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.getDna Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaGetDna200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDna200Response>> InterfacesITokenDnaGetDnaWithHttpInfoAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaGetDna");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaGetDna");
            }

            // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
            if (interfacesIERC721GetApprovedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721GetApprovedRequest' when calling ITokenDnaApi->InterfacesITokenDnaGetDna");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721GetApprovedRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaGetDna";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesITokenDnaGetDna200Response>("/{networkId}/interface/ITokenDna/read/{address}/getDna", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaGetDna", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.getDnaBatch Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaGetDnaBatch200Response</returns>
        public InterfacesITokenDnaGetDnaBatch200Response InterfacesITokenDnaGetDnaBatch(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDnaBatch200Response> localVarResponse = InterfacesITokenDnaGetDnaBatchWithHttpInfo(networkId, address, interfacesITokenDnaGetDnaBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.getDnaBatch Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaGetDnaBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDnaBatch200Response> InterfacesITokenDnaGetDnaBatchWithHttpInfo(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaGetDnaBatch");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaGetDnaBatch");
            }

            // verify the required parameter 'interfacesITokenDnaGetDnaBatchRequest' is set
            if (interfacesITokenDnaGetDnaBatchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesITokenDnaGetDnaBatchRequest' when calling ITokenDnaApi->InterfacesITokenDnaGetDnaBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesITokenDnaGetDnaBatchRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaGetDnaBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesITokenDnaGetDnaBatch200Response>("/{networkId}/interface/ITokenDna/read/{address}/getDnaBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaGetDnaBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.getDnaBatch Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaGetDnaBatch200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesITokenDnaGetDnaBatch200Response> InterfacesITokenDnaGetDnaBatchAsync(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDnaBatch200Response> localVarResponse = await InterfacesITokenDnaGetDnaBatchWithHttpInfoAsync(networkId, address, interfacesITokenDnaGetDnaBatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.getDnaBatch Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaGetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaGetDnaBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaGetDnaBatch200Response>> InterfacesITokenDnaGetDnaBatchWithHttpInfoAsync(string networkId, string address, InterfacesITokenDnaGetDnaBatchRequest interfacesITokenDnaGetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaGetDnaBatch");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaGetDnaBatch");
            }

            // verify the required parameter 'interfacesITokenDnaGetDnaBatchRequest' is set
            if (interfacesITokenDnaGetDnaBatchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesITokenDnaGetDnaBatchRequest' when calling ITokenDnaApi->InterfacesITokenDnaGetDnaBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesITokenDnaGetDnaBatchRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaGetDnaBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesITokenDnaGetDnaBatch200Response>("/{networkId}/interface/ITokenDna/read/{address}/getDnaBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaGetDnaBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.setDna Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaSetDna200Response</returns>
        public InterfacesITokenDnaSetDna200Response InterfacesITokenDnaSetDna(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDna200Response> localVarResponse = InterfacesITokenDnaSetDnaWithHttpInfo(networkId, address, interfacesITokenDnaSetDnaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.setDna Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaSetDna200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDna200Response> InterfacesITokenDnaSetDnaWithHttpInfo(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaSetDna");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaSetDna");
            }

            // verify the required parameter 'interfacesITokenDnaSetDnaRequest' is set
            if (interfacesITokenDnaSetDnaRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesITokenDnaSetDnaRequest' when calling ITokenDnaApi->InterfacesITokenDnaSetDna");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesITokenDnaSetDnaRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaSetDna";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesITokenDnaSetDna200Response>("/{networkId}/interface/ITokenDna/write/{address}/setDna", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaSetDna", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.setDna Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaSetDna200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesITokenDnaSetDna200Response> InterfacesITokenDnaSetDnaAsync(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDna200Response> localVarResponse = await InterfacesITokenDnaSetDnaWithHttpInfoAsync(networkId, address, interfacesITokenDnaSetDnaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.setDna Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaSetDna200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDna200Response>> InterfacesITokenDnaSetDnaWithHttpInfoAsync(string networkId, string address, InterfacesITokenDnaSetDnaRequest interfacesITokenDnaSetDnaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaSetDna");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaSetDna");
            }

            // verify the required parameter 'interfacesITokenDnaSetDnaRequest' is set
            if (interfacesITokenDnaSetDnaRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesITokenDnaSetDnaRequest' when calling ITokenDnaApi->InterfacesITokenDnaSetDna");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesITokenDnaSetDnaRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaSetDna";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesITokenDnaSetDna200Response>("/{networkId}/interface/ITokenDna/write/{address}/setDna", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaSetDna", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.setDnaBatch Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesITokenDnaSetDnaBatch200Response</returns>
        public InterfacesITokenDnaSetDnaBatch200Response InterfacesITokenDnaSetDnaBatch(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDnaBatch200Response> localVarResponse = InterfacesITokenDnaSetDnaBatchWithHttpInfo(networkId, address, interfacesITokenDnaSetDnaBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.setDnaBatch Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesITokenDnaSetDnaBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDnaBatch200Response> InterfacesITokenDnaSetDnaBatchWithHttpInfo(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaSetDnaBatch");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaSetDnaBatch");
            }

            // verify the required parameter 'interfacesITokenDnaSetDnaBatchRequest' is set
            if (interfacesITokenDnaSetDnaBatchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesITokenDnaSetDnaBatchRequest' when calling ITokenDnaApi->InterfacesITokenDnaSetDnaBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesITokenDnaSetDnaBatchRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaSetDnaBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesITokenDnaSetDnaBatch200Response>("/{networkId}/interface/ITokenDna/write/{address}/setDnaBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaSetDnaBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ITokenDna.setDnaBatch Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesITokenDnaSetDnaBatch200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesITokenDnaSetDnaBatch200Response> InterfacesITokenDnaSetDnaBatchAsync(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDnaBatch200Response> localVarResponse = await InterfacesITokenDnaSetDnaBatchWithHttpInfoAsync(networkId, address, interfacesITokenDnaSetDnaBatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ITokenDna.setDnaBatch Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesITokenDnaSetDnaBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesITokenDnaSetDnaBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesITokenDnaSetDnaBatch200Response>> InterfacesITokenDnaSetDnaBatchWithHttpInfoAsync(string networkId, string address, InterfacesITokenDnaSetDnaBatchRequest interfacesITokenDnaSetDnaBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling ITokenDnaApi->InterfacesITokenDnaSetDnaBatch");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling ITokenDnaApi->InterfacesITokenDnaSetDnaBatch");
            }

            // verify the required parameter 'interfacesITokenDnaSetDnaBatchRequest' is set
            if (interfacesITokenDnaSetDnaBatchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesITokenDnaSetDnaBatchRequest' when calling ITokenDnaApi->InterfacesITokenDnaSetDnaBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesITokenDnaSetDnaBatchRequest;

            localVarRequestOptions.Operation = "ITokenDnaApi.InterfacesITokenDnaSetDnaBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesITokenDnaSetDnaBatch200Response>("/{networkId}/interface/ITokenDna/write/{address}/setDnaBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesITokenDnaSetDnaBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
