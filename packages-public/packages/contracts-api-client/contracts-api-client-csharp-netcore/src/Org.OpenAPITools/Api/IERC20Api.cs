/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC20ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// IERC20.allowance
        /// </summary>
        /// <remarks>
        /// Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Allowance200Response</returns>
        InterfacesIERC20Allowance200Response InterfacesIERC20Allowance(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0);

        /// <summary>
        /// IERC20.allowance
        /// </summary>
        /// <remarks>
        /// Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Allowance200Response</returns>
        ApiResponse<InterfacesIERC20Allowance200Response> InterfacesIERC20AllowanceWithHttpInfo(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0);
        /// <summary>
        /// IERC20.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Approve200Response</returns>
        InterfacesIERC20Approve200Response InterfacesIERC20Approve(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0);

        /// <summary>
        /// IERC20.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Approve200Response</returns>
        ApiResponse<InterfacesIERC20Approve200Response> InterfacesIERC20ApproveWithHttpInfo(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0);
        /// <summary>
        /// IERC20.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20BalanceOf200Response</returns>
        InterfacesIERC20BalanceOf200Response InterfacesIERC20BalanceOf(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0);

        /// <summary>
        /// IERC20.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20BalanceOf200Response</returns>
        ApiResponse<InterfacesIERC20BalanceOf200Response> InterfacesIERC20BalanceOfWithHttpInfo(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0);
        /// <summary>
        /// IERC20.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20TotalSupply200Response</returns>
        InterfacesIERC20TotalSupply200Response InterfacesIERC20TotalSupply(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);

        /// <summary>
        /// IERC20.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20TotalSupply200Response</returns>
        ApiResponse<InterfacesIERC20TotalSupply200Response> InterfacesIERC20TotalSupplyWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);
        /// <summary>
        /// IERC20.transfer
        /// </summary>
        /// <remarks>
        /// Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Transfer200Response</returns>
        InterfacesIERC20Transfer200Response InterfacesIERC20Transfer(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0);

        /// <summary>
        /// IERC20.transfer
        /// </summary>
        /// <remarks>
        /// Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Transfer200Response</returns>
        ApiResponse<InterfacesIERC20Transfer200Response> InterfacesIERC20TransferWithHttpInfo(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0);
        /// <summary>
        /// IERC20.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20TransferFrom200Response</returns>
        InterfacesIERC20TransferFrom200Response InterfacesIERC20TransferFrom(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0);

        /// <summary>
        /// IERC20.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20TransferFrom200Response</returns>
        ApiResponse<InterfacesIERC20TransferFrom200Response> InterfacesIERC20TransferFromWithHttpInfo(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC20ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// IERC20.allowance
        /// </summary>
        /// <remarks>
        /// Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Allowance200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20Allowance200Response> InterfacesIERC20AllowanceAsync(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC20.allowance
        /// </summary>
        /// <remarks>
        /// Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Allowance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20Allowance200Response>> InterfacesIERC20AllowanceWithHttpInfoAsync(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC20.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Approve200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20Approve200Response> InterfacesIERC20ApproveAsync(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC20.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Approve200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20Approve200Response>> InterfacesIERC20ApproveWithHttpInfoAsync(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC20.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20BalanceOf200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20BalanceOf200Response> InterfacesIERC20BalanceOfAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC20.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20BalanceOf200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20BalanceOf200Response>> InterfacesIERC20BalanceOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC20.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20TotalSupply200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20TotalSupply200Response> InterfacesIERC20TotalSupplyAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC20.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20TotalSupply200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20TotalSupply200Response>> InterfacesIERC20TotalSupplyWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC20.transfer
        /// </summary>
        /// <remarks>
        /// Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Transfer200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20Transfer200Response> InterfacesIERC20TransferAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC20.transfer
        /// </summary>
        /// <remarks>
        /// Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Transfer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20Transfer200Response>> InterfacesIERC20TransferWithHttpInfoAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC20.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20TransferFrom200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20TransferFrom200Response> InterfacesIERC20TransferFromAsync(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC20.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20TransferFrom200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20TransferFrom200Response>> InterfacesIERC20TransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC20Api : IIERC20ApiSync, IIERC20ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IERC20Api : IIERC20Api
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC20Api"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC20Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC20Api"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC20Api(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC20Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IERC20Api(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC20Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IERC20Api(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// IERC20.allowance Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Allowance200Response</returns>
        public InterfacesIERC20Allowance200Response InterfacesIERC20Allowance(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Allowance200Response> localVarResponse = InterfacesIERC20AllowanceWithHttpInfo(networkId, address, interfacesIERC20AllowanceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.allowance Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Allowance200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Allowance200Response> InterfacesIERC20AllowanceWithHttpInfo(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20Allowance");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20Allowance");
            }

            // verify the required parameter 'interfacesIERC20AllowanceRequest' is set
            if (interfacesIERC20AllowanceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20AllowanceRequest' when calling IERC20Api->InterfacesIERC20Allowance");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20AllowanceRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20Allowance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20Allowance200Response>("/{networkId}/interface/IERC20/read/{address}/allowance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20Allowance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.allowance Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Allowance200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20Allowance200Response> InterfacesIERC20AllowanceAsync(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Allowance200Response> localVarResponse = await InterfacesIERC20AllowanceWithHttpInfoAsync(networkId, address, interfacesIERC20AllowanceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.allowance Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20AllowanceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Allowance200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Allowance200Response>> InterfacesIERC20AllowanceWithHttpInfoAsync(string networkId, string address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20Allowance");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20Allowance");
            }

            // verify the required parameter 'interfacesIERC20AllowanceRequest' is set
            if (interfacesIERC20AllowanceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20AllowanceRequest' when calling IERC20Api->InterfacesIERC20Allowance");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20AllowanceRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20Allowance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20Allowance200Response>("/{networkId}/interface/IERC20/read/{address}/allowance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20Allowance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.approve Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Approve200Response</returns>
        public InterfacesIERC20Approve200Response InterfacesIERC20Approve(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Approve200Response> localVarResponse = InterfacesIERC20ApproveWithHttpInfo(networkId, address, interfacesIERC20ApproveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.approve Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Approve200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Approve200Response> InterfacesIERC20ApproveWithHttpInfo(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20Approve");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20Approve");
            }

            // verify the required parameter 'interfacesIERC20ApproveRequest' is set
            if (interfacesIERC20ApproveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20ApproveRequest' when calling IERC20Api->InterfacesIERC20Approve");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20ApproveRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20Approve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20Approve200Response>("/{networkId}/interface/IERC20/write/{address}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20Approve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.approve Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Approve200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20Approve200Response> InterfacesIERC20ApproveAsync(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Approve200Response> localVarResponse = await InterfacesIERC20ApproveWithHttpInfoAsync(networkId, address, interfacesIERC20ApproveRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.approve Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Approve200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Approve200Response>> InterfacesIERC20ApproveWithHttpInfoAsync(string networkId, string address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20Approve");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20Approve");
            }

            // verify the required parameter 'interfacesIERC20ApproveRequest' is set
            if (interfacesIERC20ApproveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20ApproveRequest' when calling IERC20Api->InterfacesIERC20Approve");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20ApproveRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20Approve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20Approve200Response>("/{networkId}/interface/IERC20/write/{address}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20Approve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.balanceOf Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20BalanceOf200Response</returns>
        public InterfacesIERC20BalanceOf200Response InterfacesIERC20BalanceOf(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20BalanceOf200Response> localVarResponse = InterfacesIERC20BalanceOfWithHttpInfo(networkId, address, interfacesIERC1820GetManagerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.balanceOf Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20BalanceOf200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20BalanceOf200Response> InterfacesIERC20BalanceOfWithHttpInfo(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20BalanceOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20BalanceOf");
            }

            // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
            if (interfacesIERC1820GetManagerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820GetManagerRequest' when calling IERC20Api->InterfacesIERC20BalanceOf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820GetManagerRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20BalanceOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20BalanceOf200Response>("/{networkId}/interface/IERC20/read/{address}/balanceOf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20BalanceOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.balanceOf Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20BalanceOf200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20BalanceOf200Response> InterfacesIERC20BalanceOfAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20BalanceOf200Response> localVarResponse = await InterfacesIERC20BalanceOfWithHttpInfoAsync(networkId, address, interfacesIERC1820GetManagerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.balanceOf Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20BalanceOf200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20BalanceOf200Response>> InterfacesIERC20BalanceOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20BalanceOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20BalanceOf");
            }

            // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
            if (interfacesIERC1820GetManagerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820GetManagerRequest' when calling IERC20Api->InterfacesIERC20BalanceOf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820GetManagerRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20BalanceOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20BalanceOf200Response>("/{networkId}/interface/IERC20/read/{address}/balanceOf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20BalanceOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20TotalSupply200Response</returns>
        public InterfacesIERC20TotalSupply200Response InterfacesIERC20TotalSupply(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response> localVarResponse = InterfacesIERC20TotalSupplyWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20TotalSupply200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response> InterfacesIERC20TotalSupplyWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20TotalSupply");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20TotalSupply");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IERC20Api->InterfacesIERC20TotalSupply");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20TotalSupply";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20TotalSupply200Response>("/{networkId}/interface/IERC20/read/{address}/totalSupply", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20TotalSupply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20TotalSupply200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20TotalSupply200Response> InterfacesIERC20TotalSupplyAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response> localVarResponse = await InterfacesIERC20TotalSupplyWithHttpInfoAsync(networkId, address, interfacesIBeaconImplementationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20TotalSupply200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response>> InterfacesIERC20TotalSupplyWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20TotalSupply");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20TotalSupply");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IERC20Api->InterfacesIERC20TotalSupply");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20TotalSupply";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20TotalSupply200Response>("/{networkId}/interface/IERC20/read/{address}/totalSupply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20TotalSupply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.transfer Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Transfer200Response</returns>
        public InterfacesIERC20Transfer200Response InterfacesIERC20Transfer(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response> localVarResponse = InterfacesIERC20TransferWithHttpInfo(networkId, address, interfacesIERC20TransferRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.transfer Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Transfer200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response> InterfacesIERC20TransferWithHttpInfo(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20Transfer");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20Transfer");
            }

            // verify the required parameter 'interfacesIERC20TransferRequest' is set
            if (interfacesIERC20TransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20TransferRequest' when calling IERC20Api->InterfacesIERC20Transfer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20TransferRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20Transfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20Transfer200Response>("/{networkId}/interface/IERC20/write/{address}/transfer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20Transfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.transfer Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Transfer200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20Transfer200Response> InterfacesIERC20TransferAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response> localVarResponse = await InterfacesIERC20TransferWithHttpInfoAsync(networkId, address, interfacesIERC20TransferRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.transfer Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Transfer200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response>> InterfacesIERC20TransferWithHttpInfoAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20Transfer");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20Transfer");
            }

            // verify the required parameter 'interfacesIERC20TransferRequest' is set
            if (interfacesIERC20TransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20TransferRequest' when calling IERC20Api->InterfacesIERC20Transfer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20TransferRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20Transfer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20Transfer200Response>("/{networkId}/interface/IERC20/write/{address}/transfer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20Transfer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.transferFrom Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20TransferFrom200Response</returns>
        public InterfacesIERC20TransferFrom200Response InterfacesIERC20TransferFrom(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TransferFrom200Response> localVarResponse = InterfacesIERC20TransferFromWithHttpInfo(networkId, address, interfacesIERC20TransferFromRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.transferFrom Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20TransferFrom200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TransferFrom200Response> InterfacesIERC20TransferFromWithHttpInfo(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20TransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20TransferFrom");
            }

            // verify the required parameter 'interfacesIERC20TransferFromRequest' is set
            if (interfacesIERC20TransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20TransferFromRequest' when calling IERC20Api->InterfacesIERC20TransferFrom");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20TransferFromRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20TransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20TransferFrom200Response>("/{networkId}/interface/IERC20/write/{address}/transferFrom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20TransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC20.transferFrom Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20TransferFrom200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20TransferFrom200Response> InterfacesIERC20TransferFromAsync(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TransferFrom200Response> localVarResponse = await InterfacesIERC20TransferFromWithHttpInfoAsync(networkId, address, interfacesIERC20TransferFromRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC20.transferFrom Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20TransferFrom200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TransferFrom200Response>> InterfacesIERC20TransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC20Api->InterfacesIERC20TransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC20Api->InterfacesIERC20TransferFrom");
            }

            // verify the required parameter 'interfacesIERC20TransferFromRequest' is set
            if (interfacesIERC20TransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20TransferFromRequest' when calling IERC20Api->InterfacesIERC20TransferFrom");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20TransferFromRequest;

            localVarRequestOptions.Operation = "IERC20Api.InterfacesIERC20TransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20TransferFrom200Response>("/{networkId}/interface/IERC20/write/{address}/transferFrom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC20TransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
