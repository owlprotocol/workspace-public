/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC1820ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// IERC1820.getInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820GetInterfaceImplementer200Response</returns>
        InterfacesIERC1820GetInterfaceImplementer200Response InterfacesIERC1820GetInterfaceImplementer(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.getInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820GetInterfaceImplementer200Response</returns>
        ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response> InterfacesIERC1820GetInterfaceImplementerWithHttpInfo(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.getManager
        /// </summary>
        /// <remarks>
        /// Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820GetManager200Response</returns>
        InterfacesIERC1820GetManager200Response InterfacesIERC1820GetManager(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.getManager
        /// </summary>
        /// <remarks>
        /// Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820GetManager200Response</returns>
        ApiResponse<InterfacesIERC1820GetManager200Response> InterfacesIERC1820GetManagerWithHttpInfo(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.implementsERC165Interface
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        InterfacesIERC1820ImplementsERC165Interface200Response InterfacesIERC1820ImplementsERC165Interface(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.implementsERC165Interface
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        InterfacesIERC1820ImplementsERC165Interface200Response InterfacesIERC1820ImplementsERC165InterfaceNoCache(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.interfaceHash
        /// </summary>
        /// <remarks>
        /// Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820InterfaceHash200Response</returns>
        InterfacesIERC1820InterfaceHash200Response InterfacesIERC1820InterfaceHash(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.interfaceHash
        /// </summary>
        /// <remarks>
        /// Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820InterfaceHash200Response</returns>
        ApiResponse<InterfacesIERC1820InterfaceHash200Response> InterfacesIERC1820InterfaceHashWithHttpInfo(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.setInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820SetInterfaceImplementer200Response</returns>
        InterfacesIERC1820SetInterfaceImplementer200Response InterfacesIERC1820SetInterfaceImplementer(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.setInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820SetInterfaceImplementer200Response</returns>
        ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response> InterfacesIERC1820SetInterfaceImplementerWithHttpInfo(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.setManager
        /// </summary>
        /// <remarks>
        /// Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820SetManager200Response</returns>
        InterfacesIERC1820SetManager200Response InterfacesIERC1820SetManager(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.setManager
        /// </summary>
        /// <remarks>
        /// Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820SetManager200Response</returns>
        ApiResponse<InterfacesIERC1820SetManager200Response> InterfacesIERC1820SetManagerWithHttpInfo(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1820.updateERC165Cache
        /// </summary>
        /// <remarks>
        /// Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820UpdateERC165Cache200Response</returns>
        InterfacesIERC1820UpdateERC165Cache200Response InterfacesIERC1820UpdateERC165Cache(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1820.updateERC165Cache
        /// </summary>
        /// <remarks>
        /// Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820UpdateERC165Cache200Response</returns>
        ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response> InterfacesIERC1820UpdateERC165CacheWithHttpInfo(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC1820ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// IERC1820.getInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820GetInterfaceImplementer200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820GetInterfaceImplementer200Response> InterfacesIERC1820GetInterfaceImplementerAsync(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.getInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820GetInterfaceImplementer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response>> InterfacesIERC1820GetInterfaceImplementerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.getManager
        /// </summary>
        /// <remarks>
        /// Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820GetManager200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820GetManager200Response> InterfacesIERC1820GetManagerAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.getManager
        /// </summary>
        /// <remarks>
        /// Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820GetManager200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820GetManager200Response>> InterfacesIERC1820GetManagerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.implementsERC165Interface
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.implementsERC165Interface
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820ImplementsERC165Interface200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response>> InterfacesIERC1820ImplementsERC165InterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceNoCacheAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache
        /// </summary>
        /// <remarks>
        /// Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820ImplementsERC165Interface200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response>> InterfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.interfaceHash
        /// </summary>
        /// <remarks>
        /// Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820InterfaceHash200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820InterfaceHash200Response> InterfacesIERC1820InterfaceHashAsync(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.interfaceHash
        /// </summary>
        /// <remarks>
        /// Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820InterfaceHash200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820InterfaceHash200Response>> InterfacesIERC1820InterfaceHashWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.setInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820SetInterfaceImplementer200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820SetInterfaceImplementer200Response> InterfacesIERC1820SetInterfaceImplementerAsync(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.setInterfaceImplementer
        /// </summary>
        /// <remarks>
        /// Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820SetInterfaceImplementer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response>> InterfacesIERC1820SetInterfaceImplementerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.setManager
        /// </summary>
        /// <remarks>
        /// Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820SetManager200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820SetManager200Response> InterfacesIERC1820SetManagerAsync(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.setManager
        /// </summary>
        /// <remarks>
        /// Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820SetManager200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820SetManager200Response>> InterfacesIERC1820SetManagerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1820.updateERC165Cache
        /// </summary>
        /// <remarks>
        /// Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820UpdateERC165Cache200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1820UpdateERC165Cache200Response> InterfacesIERC1820UpdateERC165CacheAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1820.updateERC165Cache
        /// </summary>
        /// <remarks>
        /// Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820UpdateERC165Cache200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response>> InterfacesIERC1820UpdateERC165CacheWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC1820Api : IIERC1820ApiSync, IIERC1820ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IERC1820Api : IIERC1820Api
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1820Api"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC1820Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1820Api"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC1820Api(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1820Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IERC1820Api(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1820Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IERC1820Api(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// IERC1820.getInterfaceImplementer Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820GetInterfaceImplementer200Response</returns>
        public InterfacesIERC1820GetInterfaceImplementer200Response InterfacesIERC1820GetInterfaceImplementer(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response> localVarResponse = InterfacesIERC1820GetInterfaceImplementerWithHttpInfo(networkId, address, interfacesIERC1820GetInterfaceImplementerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.getInterfaceImplementer Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820GetInterfaceImplementer200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response> InterfacesIERC1820GetInterfaceImplementerWithHttpInfo(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820GetInterfaceImplementer");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820GetInterfaceImplementer");
            }

            // verify the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' is set
            if (interfacesIERC1820GetInterfaceImplementerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling IERC1820Api->InterfacesIERC1820GetInterfaceImplementer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820GetInterfaceImplementerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820GetInterfaceImplementer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820GetInterfaceImplementer200Response>("/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820GetInterfaceImplementer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.getInterfaceImplementer Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820GetInterfaceImplementer200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820GetInterfaceImplementer200Response> InterfacesIERC1820GetInterfaceImplementerAsync(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response> localVarResponse = await InterfacesIERC1820GetInterfaceImplementerWithHttpInfoAsync(networkId, address, interfacesIERC1820GetInterfaceImplementerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.getInterfaceImplementer Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820GetInterfaceImplementer200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response>> InterfacesIERC1820GetInterfaceImplementerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820GetInterfaceImplementer");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820GetInterfaceImplementer");
            }

            // verify the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' is set
            if (interfacesIERC1820GetInterfaceImplementerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling IERC1820Api->InterfacesIERC1820GetInterfaceImplementer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820GetInterfaceImplementerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820GetInterfaceImplementer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820GetInterfaceImplementer200Response>("/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820GetInterfaceImplementer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.getManager Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820GetManager200Response</returns>
        public InterfacesIERC1820GetManager200Response InterfacesIERC1820GetManager(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetManager200Response> localVarResponse = InterfacesIERC1820GetManagerWithHttpInfo(networkId, address, interfacesIERC1820GetManagerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.getManager Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820GetManager200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetManager200Response> InterfacesIERC1820GetManagerWithHttpInfo(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820GetManager");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820GetManager");
            }

            // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
            if (interfacesIERC1820GetManagerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820GetManagerRequest' when calling IERC1820Api->InterfacesIERC1820GetManager");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820GetManagerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820GetManager";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820GetManager200Response>("/{networkId}/interface/IERC1820/read/{address}/getManager", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820GetManager", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.getManager Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820GetManager200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820GetManager200Response> InterfacesIERC1820GetManagerAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetManager200Response> localVarResponse = await InterfacesIERC1820GetManagerWithHttpInfoAsync(networkId, address, interfacesIERC1820GetManagerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.getManager Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820GetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820GetManager200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820GetManager200Response>> InterfacesIERC1820GetManagerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820GetManager");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820GetManager");
            }

            // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
            if (interfacesIERC1820GetManagerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820GetManagerRequest' when calling IERC1820Api->InterfacesIERC1820GetManager");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820GetManagerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820GetManager";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820GetManager200Response>("/{networkId}/interface/IERC1820/read/{address}/getManager", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820GetManager", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.implementsERC165Interface Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        public InterfacesIERC1820ImplementsERC165Interface200Response InterfacesIERC1820ImplementsERC165Interface(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> localVarResponse = InterfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.implementsERC165Interface Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165Interface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165Interface");
            }

            // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
            if (interfacesIERC1820ImplementsERC165InterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165Interface");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820ImplementsERC165InterfaceRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820ImplementsERC165Interface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820ImplementsERC165Interface200Response>("/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820ImplementsERC165Interface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.implementsERC165Interface Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> localVarResponse = await InterfacesIERC1820ImplementsERC165InterfaceWithHttpInfoAsync(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.implementsERC165Interface Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820ImplementsERC165Interface200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response>> InterfacesIERC1820ImplementsERC165InterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165Interface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165Interface");
            }

            // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
            if (interfacesIERC1820ImplementsERC165InterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165Interface");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820ImplementsERC165InterfaceRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820ImplementsERC165Interface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820ImplementsERC165Interface200Response>("/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820ImplementsERC165Interface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        public InterfacesIERC1820ImplementsERC165Interface200Response InterfacesIERC1820ImplementsERC165InterfaceNoCache(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> localVarResponse = InterfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165InterfaceNoCache");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165InterfaceNoCache");
            }

            // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
            if (interfacesIERC1820ImplementsERC165InterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165InterfaceNoCache");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820ImplementsERC165InterfaceRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820ImplementsERC165InterfaceNoCache";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820ImplementsERC165Interface200Response>("/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820ImplementsERC165InterfaceNoCache", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820ImplementsERC165Interface200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820ImplementsERC165Interface200Response> InterfacesIERC1820ImplementsERC165InterfaceNoCacheAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> localVarResponse = await InterfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfoAsync(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.implementsERC165InterfaceNoCache Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820ImplementsERC165Interface200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response>> InterfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165InterfaceNoCache");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165InterfaceNoCache");
            }

            // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
            if (interfacesIERC1820ImplementsERC165InterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling IERC1820Api->InterfacesIERC1820ImplementsERC165InterfaceNoCache");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820ImplementsERC165InterfaceRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820ImplementsERC165InterfaceNoCache";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820ImplementsERC165Interface200Response>("/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820ImplementsERC165InterfaceNoCache", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.interfaceHash Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820InterfaceHash200Response</returns>
        public InterfacesIERC1820InterfaceHash200Response InterfacesIERC1820InterfaceHash(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820InterfaceHash200Response> localVarResponse = InterfacesIERC1820InterfaceHashWithHttpInfo(networkId, address, interfacesIERC1820InterfaceHashRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.interfaceHash Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820InterfaceHash200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820InterfaceHash200Response> InterfacesIERC1820InterfaceHashWithHttpInfo(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820InterfaceHash");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820InterfaceHash");
            }

            // verify the required parameter 'interfacesIERC1820InterfaceHashRequest' is set
            if (interfacesIERC1820InterfaceHashRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820InterfaceHashRequest' when calling IERC1820Api->InterfacesIERC1820InterfaceHash");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820InterfaceHashRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820InterfaceHash";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820InterfaceHash200Response>("/{networkId}/interface/IERC1820/read/{address}/interfaceHash", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820InterfaceHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.interfaceHash Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820InterfaceHash200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820InterfaceHash200Response> InterfacesIERC1820InterfaceHashAsync(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820InterfaceHash200Response> localVarResponse = await InterfacesIERC1820InterfaceHashWithHttpInfoAsync(networkId, address, interfacesIERC1820InterfaceHashRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.interfaceHash Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820InterfaceHashRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820InterfaceHash200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820InterfaceHash200Response>> InterfacesIERC1820InterfaceHashWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820InterfaceHash");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820InterfaceHash");
            }

            // verify the required parameter 'interfacesIERC1820InterfaceHashRequest' is set
            if (interfacesIERC1820InterfaceHashRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820InterfaceHashRequest' when calling IERC1820Api->InterfacesIERC1820InterfaceHash");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820InterfaceHashRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820InterfaceHash";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820InterfaceHash200Response>("/{networkId}/interface/IERC1820/read/{address}/interfaceHash", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820InterfaceHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.setInterfaceImplementer Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820SetInterfaceImplementer200Response</returns>
        public InterfacesIERC1820SetInterfaceImplementer200Response InterfacesIERC1820SetInterfaceImplementer(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response> localVarResponse = InterfacesIERC1820SetInterfaceImplementerWithHttpInfo(networkId, address, interfacesIERC1820SetInterfaceImplementerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.setInterfaceImplementer Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820SetInterfaceImplementer200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response> InterfacesIERC1820SetInterfaceImplementerWithHttpInfo(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820SetInterfaceImplementer");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820SetInterfaceImplementer");
            }

            // verify the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' is set
            if (interfacesIERC1820SetInterfaceImplementerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling IERC1820Api->InterfacesIERC1820SetInterfaceImplementer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820SetInterfaceImplementerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820SetInterfaceImplementer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820SetInterfaceImplementer200Response>("/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820SetInterfaceImplementer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.setInterfaceImplementer Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820SetInterfaceImplementer200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820SetInterfaceImplementer200Response> InterfacesIERC1820SetInterfaceImplementerAsync(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response> localVarResponse = await InterfacesIERC1820SetInterfaceImplementerWithHttpInfoAsync(networkId, address, interfacesIERC1820SetInterfaceImplementerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.setInterfaceImplementer Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetInterfaceImplementerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820SetInterfaceImplementer200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response>> InterfacesIERC1820SetInterfaceImplementerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820SetInterfaceImplementer");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820SetInterfaceImplementer");
            }

            // verify the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' is set
            if (interfacesIERC1820SetInterfaceImplementerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling IERC1820Api->InterfacesIERC1820SetInterfaceImplementer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820SetInterfaceImplementerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820SetInterfaceImplementer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820SetInterfaceImplementer200Response>("/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820SetInterfaceImplementer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.setManager Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820SetManager200Response</returns>
        public InterfacesIERC1820SetManager200Response InterfacesIERC1820SetManager(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetManager200Response> localVarResponse = InterfacesIERC1820SetManagerWithHttpInfo(networkId, address, interfacesIERC1820SetManagerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.setManager Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820SetManager200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetManager200Response> InterfacesIERC1820SetManagerWithHttpInfo(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820SetManager");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820SetManager");
            }

            // verify the required parameter 'interfacesIERC1820SetManagerRequest' is set
            if (interfacesIERC1820SetManagerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820SetManagerRequest' when calling IERC1820Api->InterfacesIERC1820SetManager");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820SetManagerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820SetManager";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820SetManager200Response>("/{networkId}/interface/IERC1820/write/{address}/setManager", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820SetManager", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.setManager Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820SetManager200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820SetManager200Response> InterfacesIERC1820SetManagerAsync(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetManager200Response> localVarResponse = await InterfacesIERC1820SetManagerWithHttpInfoAsync(networkId, address, interfacesIERC1820SetManagerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.setManager Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820SetManagerRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820SetManager200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820SetManager200Response>> InterfacesIERC1820SetManagerWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820SetManager");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820SetManager");
            }

            // verify the required parameter 'interfacesIERC1820SetManagerRequest' is set
            if (interfacesIERC1820SetManagerRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820SetManagerRequest' when calling IERC1820Api->InterfacesIERC1820SetManager");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820SetManagerRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820SetManager";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820SetManager200Response>("/{networkId}/interface/IERC1820/write/{address}/setManager", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820SetManager", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.updateERC165Cache Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1820UpdateERC165Cache200Response</returns>
        public InterfacesIERC1820UpdateERC165Cache200Response InterfacesIERC1820UpdateERC165Cache(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response> localVarResponse = InterfacesIERC1820UpdateERC165CacheWithHttpInfo(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.updateERC165Cache Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1820UpdateERC165Cache200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response> InterfacesIERC1820UpdateERC165CacheWithHttpInfo(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820UpdateERC165Cache");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820UpdateERC165Cache");
            }

            // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
            if (interfacesIERC1820ImplementsERC165InterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling IERC1820Api->InterfacesIERC1820UpdateERC165Cache");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820ImplementsERC165InterfaceRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820UpdateERC165Cache";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1820UpdateERC165Cache200Response>("/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820UpdateERC165Cache", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1820.updateERC165Cache Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1820UpdateERC165Cache200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1820UpdateERC165Cache200Response> InterfacesIERC1820UpdateERC165CacheAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response> localVarResponse = await InterfacesIERC1820UpdateERC165CacheWithHttpInfoAsync(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1820.updateERC165Cache Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1820ImplementsERC165InterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1820UpdateERC165Cache200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response>> InterfacesIERC1820UpdateERC165CacheWithHttpInfoAsync(string networkId, string address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1820Api->InterfacesIERC1820UpdateERC165Cache");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1820Api->InterfacesIERC1820UpdateERC165Cache");
            }

            // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
            if (interfacesIERC1820ImplementsERC165InterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling IERC1820Api->InterfacesIERC1820UpdateERC165Cache");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1820ImplementsERC165InterfaceRequest;

            localVarRequestOptions.Operation = "IERC1820Api.InterfacesIERC1820UpdateERC165Cache";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1820UpdateERC165Cache200Response>("/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1820UpdateERC165Cache", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
