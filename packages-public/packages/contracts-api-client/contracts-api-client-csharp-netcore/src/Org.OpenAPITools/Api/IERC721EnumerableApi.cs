/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC721EnumerableApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// IERC721Enumerable.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721Approve200Response</returns>
        InterfacesIERC721Approve200Response InterfacesIERC721EnumerableApprove(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721Approve200Response</returns>
        ApiResponse<InterfacesIERC721Approve200Response> InterfacesIERC721EnumerableApproveWithHttpInfo(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721BalanceOf200Response</returns>
        InterfacesIERC721BalanceOf200Response InterfacesIERC721EnumerableBalanceOf(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721BalanceOf200Response</returns>
        ApiResponse<InterfacesIERC721BalanceOf200Response> InterfacesIERC721EnumerableBalanceOfWithHttpInfo(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.getApproved
        /// </summary>
        /// <remarks>
        /// Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721GetApproved200Response</returns>
        InterfacesIERC721GetApproved200Response InterfacesIERC721EnumerableGetApproved(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.getApproved
        /// </summary>
        /// <remarks>
        /// Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721GetApproved200Response</returns>
        ApiResponse<InterfacesIERC721GetApproved200Response> InterfacesIERC721EnumerableGetApprovedWithHttpInfo(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721IsApprovedForAll200Response</returns>
        InterfacesIERC721IsApprovedForAll200Response InterfacesIERC721EnumerableIsApprovedForAll(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721IsApprovedForAll200Response</returns>
        ApiResponse<InterfacesIERC721IsApprovedForAll200Response> InterfacesIERC721EnumerableIsApprovedForAllWithHttpInfo(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.ownerOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721OwnerOf200Response</returns>
        InterfacesIERC721OwnerOf200Response InterfacesIERC721EnumerableOwnerOf(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.ownerOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721OwnerOf200Response</returns>
        ApiResponse<InterfacesIERC721OwnerOf200Response> InterfacesIERC721EnumerableOwnerOfWithHttpInfo(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721SafeTransferFrom200Response</returns>
        InterfacesIERC721SafeTransferFrom200Response InterfacesIERC721EnumerableSafeTransferFrom(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721SafeTransferFrom200Response</returns>
        ApiResponse<InterfacesIERC721SafeTransferFrom200Response> InterfacesIERC721EnumerableSafeTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721SetApprovalForAll200Response</returns>
        InterfacesIERC721SetApprovalForAll200Response InterfacesIERC721EnumerableSetApprovalForAll(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721SetApprovalForAll200Response</returns>
        ApiResponse<InterfacesIERC721SetApprovalForAll200Response> InterfacesIERC721EnumerableSetApprovalForAllWithHttpInfo(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC165SupportsInterface200Response</returns>
        InterfacesIERC165SupportsInterface200Response InterfacesIERC721EnumerableSupportsInterface(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC165SupportsInterface200Response</returns>
        ApiResponse<InterfacesIERC165SupportsInterface200Response> InterfacesIERC721EnumerableSupportsInterfaceWithHttpInfo(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.tokenByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721EnumerableTokenByIndex200Response</returns>
        InterfacesIERC721EnumerableTokenByIndex200Response InterfacesIERC721EnumerableTokenByIndex(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.tokenByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721EnumerableTokenByIndex200Response</returns>
        ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response> InterfacesIERC721EnumerableTokenByIndexWithHttpInfo(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response</returns>
        InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response InterfacesIERC721EnumerableTokenOfOwnerByIndex(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response</returns>
        ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> InterfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfo(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20TotalSupply200Response</returns>
        InterfacesIERC20TotalSupply200Response InterfacesIERC721EnumerableTotalSupply(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20TotalSupply200Response</returns>
        ApiResponse<InterfacesIERC20TotalSupply200Response> InterfacesIERC721EnumerableTotalSupplyWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);
        /// <summary>
        /// IERC721Enumerable.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721TransferFrom200Response</returns>
        InterfacesIERC721TransferFrom200Response InterfacesIERC721EnumerableTransferFrom(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0);

        /// <summary>
        /// IERC721Enumerable.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721TransferFrom200Response</returns>
        ApiResponse<InterfacesIERC721TransferFrom200Response> InterfacesIERC721EnumerableTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC721EnumerableApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// IERC721Enumerable.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721Approve200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721Approve200Response> InterfacesIERC721EnumerableApproveAsync(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.approve
        /// </summary>
        /// <remarks>
        /// Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721Approve200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721Approve200Response>> InterfacesIERC721EnumerableApproveWithHttpInfoAsync(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721BalanceOf200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721BalanceOf200Response> InterfacesIERC721EnumerableBalanceOfAsync(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721BalanceOf200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721BalanceOf200Response>> InterfacesIERC721EnumerableBalanceOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.getApproved
        /// </summary>
        /// <remarks>
        /// Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721GetApproved200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721GetApproved200Response> InterfacesIERC721EnumerableGetApprovedAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.getApproved
        /// </summary>
        /// <remarks>
        /// Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721GetApproved200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721GetApproved200Response>> InterfacesIERC721EnumerableGetApprovedWithHttpInfoAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721IsApprovedForAll200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721IsApprovedForAll200Response> InterfacesIERC721EnumerableIsApprovedForAllAsync(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721IsApprovedForAll200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721IsApprovedForAll200Response>> InterfacesIERC721EnumerableIsApprovedForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.ownerOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721OwnerOf200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721OwnerOf200Response> InterfacesIERC721EnumerableOwnerOfAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.ownerOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721OwnerOf200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721OwnerOf200Response>> InterfacesIERC721EnumerableOwnerOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721SafeTransferFrom200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721SafeTransferFrom200Response> InterfacesIERC721EnumerableSafeTransferFromAsync(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721SafeTransferFrom200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721SafeTransferFrom200Response>> InterfacesIERC721EnumerableSafeTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721SetApprovalForAll200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721SetApprovalForAll200Response> InterfacesIERC721EnumerableSetApprovalForAllAsync(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721SetApprovalForAll200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721SetApprovalForAll200Response>> InterfacesIERC721EnumerableSetApprovalForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC165SupportsInterface200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC165SupportsInterface200Response> InterfacesIERC721EnumerableSupportsInterfaceAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC165SupportsInterface200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC165SupportsInterface200Response>> InterfacesIERC721EnumerableSupportsInterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.tokenByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721EnumerableTokenByIndex200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721EnumerableTokenByIndex200Response> InterfacesIERC721EnumerableTokenByIndexAsync(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.tokenByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721EnumerableTokenByIndex200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response>> InterfacesIERC721EnumerableTokenByIndexWithHttpInfoAsync(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> InterfacesIERC721EnumerableTokenOfOwnerByIndexAsync(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex
        /// </summary>
        /// <remarks>
        /// Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>> InterfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfoAsync(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20TotalSupply200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20TotalSupply200Response> InterfacesIERC721EnumerableTotalSupplyAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.totalSupply
        /// </summary>
        /// <remarks>
        /// Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20TotalSupply200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20TotalSupply200Response>> InterfacesIERC721EnumerableTotalSupplyWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC721Enumerable.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721TransferFrom200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC721TransferFrom200Response> InterfacesIERC721EnumerableTransferFromAsync(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC721Enumerable.transferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721TransferFrom200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC721TransferFrom200Response>> InterfacesIERC721EnumerableTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC721EnumerableApi : IIERC721EnumerableApiSync, IIERC721EnumerableApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IERC721EnumerableApi : IIERC721EnumerableApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC721EnumerableApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC721EnumerableApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC721EnumerableApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC721EnumerableApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC721EnumerableApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IERC721EnumerableApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC721EnumerableApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IERC721EnumerableApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// IERC721Enumerable.approve Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721Approve200Response</returns>
        public InterfacesIERC721Approve200Response InterfacesIERC721EnumerableApprove(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721Approve200Response> localVarResponse = InterfacesIERC721EnumerableApproveWithHttpInfo(networkId, address, interfacesIERC721ApproveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.approve Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721Approve200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721Approve200Response> InterfacesIERC721EnumerableApproveWithHttpInfo(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableApprove");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableApprove");
            }

            // verify the required parameter 'interfacesIERC721ApproveRequest' is set
            if (interfacesIERC721ApproveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721ApproveRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableApprove");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721ApproveRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721Approve200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.approve Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721Approve200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721Approve200Response> InterfacesIERC721EnumerableApproveAsync(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721Approve200Response> localVarResponse = await InterfacesIERC721EnumerableApproveWithHttpInfoAsync(networkId, address, interfacesIERC721ApproveRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.approve Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721ApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721Approve200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721Approve200Response>> InterfacesIERC721EnumerableApproveWithHttpInfoAsync(string networkId, string address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableApprove");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableApprove");
            }

            // verify the required parameter 'interfacesIERC721ApproveRequest' is set
            if (interfacesIERC721ApproveRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721ApproveRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableApprove");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721ApproveRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721Approve200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.balanceOf Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721BalanceOf200Response</returns>
        public InterfacesIERC721BalanceOf200Response InterfacesIERC721EnumerableBalanceOf(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721BalanceOf200Response> localVarResponse = InterfacesIERC721EnumerableBalanceOfWithHttpInfo(networkId, address, interfacesIERC721BalanceOfRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.balanceOf Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721BalanceOf200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721BalanceOf200Response> InterfacesIERC721EnumerableBalanceOfWithHttpInfo(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableBalanceOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableBalanceOf");
            }

            // verify the required parameter 'interfacesIERC721BalanceOfRequest' is set
            if (interfacesIERC721BalanceOfRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721BalanceOfRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableBalanceOf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721BalanceOfRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableBalanceOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721BalanceOf200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/balanceOf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableBalanceOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.balanceOf Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721BalanceOf200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721BalanceOf200Response> InterfacesIERC721EnumerableBalanceOfAsync(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721BalanceOf200Response> localVarResponse = await InterfacesIERC721EnumerableBalanceOfWithHttpInfoAsync(networkId, address, interfacesIERC721BalanceOfRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.balanceOf Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721BalanceOf200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721BalanceOf200Response>> InterfacesIERC721EnumerableBalanceOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableBalanceOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableBalanceOf");
            }

            // verify the required parameter 'interfacesIERC721BalanceOfRequest' is set
            if (interfacesIERC721BalanceOfRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721BalanceOfRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableBalanceOf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721BalanceOfRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableBalanceOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721BalanceOf200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/balanceOf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableBalanceOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.getApproved Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721GetApproved200Response</returns>
        public InterfacesIERC721GetApproved200Response InterfacesIERC721EnumerableGetApproved(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721GetApproved200Response> localVarResponse = InterfacesIERC721EnumerableGetApprovedWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.getApproved Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721GetApproved200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721GetApproved200Response> InterfacesIERC721EnumerableGetApprovedWithHttpInfo(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableGetApproved");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableGetApproved");
            }

            // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
            if (interfacesIERC721GetApprovedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721GetApprovedRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableGetApproved");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721GetApprovedRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableGetApproved";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721GetApproved200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/getApproved", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableGetApproved", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.getApproved Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721GetApproved200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721GetApproved200Response> InterfacesIERC721EnumerableGetApprovedAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721GetApproved200Response> localVarResponse = await InterfacesIERC721EnumerableGetApprovedWithHttpInfoAsync(networkId, address, interfacesIERC721GetApprovedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.getApproved Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721GetApproved200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721GetApproved200Response>> InterfacesIERC721EnumerableGetApprovedWithHttpInfoAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableGetApproved");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableGetApproved");
            }

            // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
            if (interfacesIERC721GetApprovedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721GetApprovedRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableGetApproved");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721GetApprovedRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableGetApproved";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721GetApproved200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/getApproved", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableGetApproved", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.isApprovedForAll Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721IsApprovedForAll200Response</returns>
        public InterfacesIERC721IsApprovedForAll200Response InterfacesIERC721EnumerableIsApprovedForAll(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721IsApprovedForAll200Response> localVarResponse = InterfacesIERC721EnumerableIsApprovedForAllWithHttpInfo(networkId, address, interfacesIERC721IsApprovedForAllRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.isApprovedForAll Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721IsApprovedForAll200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721IsApprovedForAll200Response> InterfacesIERC721EnumerableIsApprovedForAllWithHttpInfo(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableIsApprovedForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableIsApprovedForAll");
            }

            // verify the required parameter 'interfacesIERC721IsApprovedForAllRequest' is set
            if (interfacesIERC721IsApprovedForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableIsApprovedForAll");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721IsApprovedForAllRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableIsApprovedForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721IsApprovedForAll200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/isApprovedForAll", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableIsApprovedForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.isApprovedForAll Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721IsApprovedForAll200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721IsApprovedForAll200Response> InterfacesIERC721EnumerableIsApprovedForAllAsync(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721IsApprovedForAll200Response> localVarResponse = await InterfacesIERC721EnumerableIsApprovedForAllWithHttpInfoAsync(networkId, address, interfacesIERC721IsApprovedForAllRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.isApprovedForAll Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721IsApprovedForAll200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721IsApprovedForAll200Response>> InterfacesIERC721EnumerableIsApprovedForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableIsApprovedForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableIsApprovedForAll");
            }

            // verify the required parameter 'interfacesIERC721IsApprovedForAllRequest' is set
            if (interfacesIERC721IsApprovedForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableIsApprovedForAll");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721IsApprovedForAllRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableIsApprovedForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721IsApprovedForAll200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/isApprovedForAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableIsApprovedForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.ownerOf Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721OwnerOf200Response</returns>
        public InterfacesIERC721OwnerOf200Response InterfacesIERC721EnumerableOwnerOf(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721OwnerOf200Response> localVarResponse = InterfacesIERC721EnumerableOwnerOfWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.ownerOf Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721OwnerOf200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721OwnerOf200Response> InterfacesIERC721EnumerableOwnerOfWithHttpInfo(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableOwnerOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableOwnerOf");
            }

            // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
            if (interfacesIERC721GetApprovedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721GetApprovedRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableOwnerOf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721GetApprovedRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableOwnerOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721OwnerOf200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/ownerOf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableOwnerOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.ownerOf Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721OwnerOf200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721OwnerOf200Response> InterfacesIERC721EnumerableOwnerOfAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721OwnerOf200Response> localVarResponse = await InterfacesIERC721EnumerableOwnerOfWithHttpInfoAsync(networkId, address, interfacesIERC721GetApprovedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.ownerOf Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721GetApprovedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721OwnerOf200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721OwnerOf200Response>> InterfacesIERC721EnumerableOwnerOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableOwnerOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableOwnerOf");
            }

            // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
            if (interfacesIERC721GetApprovedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721GetApprovedRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableOwnerOf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721GetApprovedRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableOwnerOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721OwnerOf200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/ownerOf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableOwnerOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.safeTransferFrom Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721SafeTransferFrom200Response</returns>
        public InterfacesIERC721SafeTransferFrom200Response InterfacesIERC721EnumerableSafeTransferFrom(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SafeTransferFrom200Response> localVarResponse = InterfacesIERC721EnumerableSafeTransferFromWithHttpInfo(networkId, address, interfacesIERC721SafeTransferFromRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.safeTransferFrom Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721SafeTransferFrom200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SafeTransferFrom200Response> InterfacesIERC721EnumerableSafeTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSafeTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSafeTransferFrom");
            }

            // verify the required parameter 'interfacesIERC721SafeTransferFromRequest' is set
            if (interfacesIERC721SafeTransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721SafeTransferFromRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSafeTransferFrom");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721SafeTransferFromRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableSafeTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721SafeTransferFrom200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/safeTransferFrom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableSafeTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.safeTransferFrom Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721SafeTransferFrom200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721SafeTransferFrom200Response> InterfacesIERC721EnumerableSafeTransferFromAsync(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SafeTransferFrom200Response> localVarResponse = await InterfacesIERC721EnumerableSafeTransferFromWithHttpInfoAsync(networkId, address, interfacesIERC721SafeTransferFromRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.safeTransferFrom Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721SafeTransferFrom200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SafeTransferFrom200Response>> InterfacesIERC721EnumerableSafeTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSafeTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSafeTransferFrom");
            }

            // verify the required parameter 'interfacesIERC721SafeTransferFromRequest' is set
            if (interfacesIERC721SafeTransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721SafeTransferFromRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSafeTransferFrom");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721SafeTransferFromRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableSafeTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721SafeTransferFrom200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/safeTransferFrom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableSafeTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.setApprovalForAll Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721SetApprovalForAll200Response</returns>
        public InterfacesIERC721SetApprovalForAll200Response InterfacesIERC721EnumerableSetApprovalForAll(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SetApprovalForAll200Response> localVarResponse = InterfacesIERC721EnumerableSetApprovalForAllWithHttpInfo(networkId, address, interfacesIERC721SetApprovalForAllRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.setApprovalForAll Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721SetApprovalForAll200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SetApprovalForAll200Response> InterfacesIERC721EnumerableSetApprovalForAllWithHttpInfo(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSetApprovalForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSetApprovalForAll");
            }

            // verify the required parameter 'interfacesIERC721SetApprovalForAllRequest' is set
            if (interfacesIERC721SetApprovalForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSetApprovalForAll");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721SetApprovalForAllRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableSetApprovalForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721SetApprovalForAll200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/setApprovalForAll", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableSetApprovalForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.setApprovalForAll Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721SetApprovalForAll200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721SetApprovalForAll200Response> InterfacesIERC721EnumerableSetApprovalForAllAsync(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SetApprovalForAll200Response> localVarResponse = await InterfacesIERC721EnumerableSetApprovalForAllWithHttpInfoAsync(networkId, address, interfacesIERC721SetApprovalForAllRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.setApprovalForAll Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721SetApprovalForAll200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721SetApprovalForAll200Response>> InterfacesIERC721EnumerableSetApprovalForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSetApprovalForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSetApprovalForAll");
            }

            // verify the required parameter 'interfacesIERC721SetApprovalForAllRequest' is set
            if (interfacesIERC721SetApprovalForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSetApprovalForAll");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721SetApprovalForAllRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableSetApprovalForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721SetApprovalForAll200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/setApprovalForAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableSetApprovalForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC165SupportsInterface200Response</returns>
        public InterfacesIERC165SupportsInterface200Response InterfacesIERC721EnumerableSupportsInterface(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResponse = InterfacesIERC721EnumerableSupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC165SupportsInterface200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> InterfacesIERC721EnumerableSupportsInterfaceWithHttpInfo(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSupportsInterface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSupportsInterface");
            }

            // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
            if (interfacesIERC165SupportsInterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSupportsInterface");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC165SupportsInterfaceRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableSupportsInterface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC165SupportsInterface200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/supportsInterface", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableSupportsInterface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC165SupportsInterface200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC165SupportsInterface200Response> InterfacesIERC721EnumerableSupportsInterfaceAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResponse = await InterfacesIERC721EnumerableSupportsInterfaceWithHttpInfoAsync(networkId, address, interfacesIERC165SupportsInterfaceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC165SupportsInterface200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response>> InterfacesIERC721EnumerableSupportsInterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSupportsInterface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSupportsInterface");
            }

            // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
            if (interfacesIERC165SupportsInterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableSupportsInterface");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC165SupportsInterfaceRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableSupportsInterface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC165SupportsInterface200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/supportsInterface", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableSupportsInterface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.tokenByIndex Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721EnumerableTokenByIndex200Response</returns>
        public InterfacesIERC721EnumerableTokenByIndex200Response InterfacesIERC721EnumerableTokenByIndex(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response> localVarResponse = InterfacesIERC721EnumerableTokenByIndexWithHttpInfo(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.tokenByIndex Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721EnumerableTokenByIndex200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response> InterfacesIERC721EnumerableTokenByIndexWithHttpInfo(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenByIndex");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenByIndex");
            }

            // verify the required parameter 'interfacesIERC721EnumerableTokenByIndexRequest' is set
            if (interfacesIERC721EnumerableTokenByIndexRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721EnumerableTokenByIndexRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenByIndex");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721EnumerableTokenByIndexRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTokenByIndex";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721EnumerableTokenByIndex200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/tokenByIndex", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTokenByIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.tokenByIndex Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721EnumerableTokenByIndex200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721EnumerableTokenByIndex200Response> InterfacesIERC721EnumerableTokenByIndexAsync(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response> localVarResponse = await InterfacesIERC721EnumerableTokenByIndexWithHttpInfoAsync(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.tokenByIndex Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721EnumerableTokenByIndex200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response>> InterfacesIERC721EnumerableTokenByIndexWithHttpInfoAsync(string networkId, string address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenByIndex");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenByIndex");
            }

            // verify the required parameter 'interfacesIERC721EnumerableTokenByIndexRequest' is set
            if (interfacesIERC721EnumerableTokenByIndexRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721EnumerableTokenByIndexRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenByIndex");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721EnumerableTokenByIndexRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTokenByIndex";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721EnumerableTokenByIndex200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/tokenByIndex", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTokenByIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response</returns>
        public InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response InterfacesIERC721EnumerableTokenOfOwnerByIndex(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> localVarResponse = InterfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfo(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> InterfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfo(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenOfOwnerByIndex");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenOfOwnerByIndex");
            }

            // verify the required parameter 'interfacesIERC721EnumerableTokenOfOwnerByIndexRequest' is set
            if (interfacesIERC721EnumerableTokenOfOwnerByIndexRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721EnumerableTokenOfOwnerByIndexRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenOfOwnerByIndex");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721EnumerableTokenOfOwnerByIndexRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTokenOfOwnerByIndex";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/tokenOfOwnerByIndex", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTokenOfOwnerByIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> InterfacesIERC721EnumerableTokenOfOwnerByIndexAsync(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> localVarResponse = await InterfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfoAsync(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.tokenOfOwnerByIndex Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721EnumerableTokenOfOwnerByIndexRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>> InterfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfoAsync(string networkId, string address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenOfOwnerByIndex");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenOfOwnerByIndex");
            }

            // verify the required parameter 'interfacesIERC721EnumerableTokenOfOwnerByIndexRequest' is set
            if (interfacesIERC721EnumerableTokenOfOwnerByIndexRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721EnumerableTokenOfOwnerByIndexRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTokenOfOwnerByIndex");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721EnumerableTokenOfOwnerByIndexRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTokenOfOwnerByIndex";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/tokenOfOwnerByIndex", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTokenOfOwnerByIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20TotalSupply200Response</returns>
        public InterfacesIERC20TotalSupply200Response InterfacesIERC721EnumerableTotalSupply(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response> localVarResponse = InterfacesIERC721EnumerableTotalSupplyWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20TotalSupply200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response> InterfacesIERC721EnumerableTotalSupplyWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTotalSupply");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTotalSupply");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTotalSupply");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTotalSupply";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20TotalSupply200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/totalSupply", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTotalSupply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20TotalSupply200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20TotalSupply200Response> InterfacesIERC721EnumerableTotalSupplyAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response> localVarResponse = await InterfacesIERC721EnumerableTotalSupplyWithHttpInfoAsync(networkId, address, interfacesIBeaconImplementationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.totalSupply Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20TotalSupply200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20TotalSupply200Response>> InterfacesIERC721EnumerableTotalSupplyWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTotalSupply");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTotalSupply");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTotalSupply");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTotalSupply";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20TotalSupply200Response>("/{networkId}/interface/IERC721Enumerable/read/{address}/totalSupply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTotalSupply", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.transferFrom Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC721TransferFrom200Response</returns>
        public InterfacesIERC721TransferFrom200Response InterfacesIERC721EnumerableTransferFrom(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721TransferFrom200Response> localVarResponse = InterfacesIERC721EnumerableTransferFromWithHttpInfo(networkId, address, interfacesIERC721TransferFromRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.transferFrom Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC721TransferFrom200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721TransferFrom200Response> InterfacesIERC721EnumerableTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTransferFrom");
            }

            // verify the required parameter 'interfacesIERC721TransferFromRequest' is set
            if (interfacesIERC721TransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721TransferFromRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTransferFrom");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721TransferFromRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC721TransferFrom200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/transferFrom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC721Enumerable.transferFrom Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC721TransferFrom200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC721TransferFrom200Response> InterfacesIERC721EnumerableTransferFromAsync(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721TransferFrom200Response> localVarResponse = await InterfacesIERC721EnumerableTransferFromWithHttpInfoAsync(networkId, address, interfacesIERC721TransferFromRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC721Enumerable.transferFrom Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC721TransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC721TransferFrom200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC721TransferFrom200Response>> InterfacesIERC721EnumerableTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTransferFrom");
            }

            // verify the required parameter 'interfacesIERC721TransferFromRequest' is set
            if (interfacesIERC721TransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC721TransferFromRequest' when calling IERC721EnumerableApi->InterfacesIERC721EnumerableTransferFrom");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC721TransferFromRequest;

            localVarRequestOptions.Operation = "IERC721EnumerableApi.InterfacesIERC721EnumerableTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC721TransferFrom200Response>("/{networkId}/interface/IERC721Enumerable/write/{address}/transferFrom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC721EnumerableTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
