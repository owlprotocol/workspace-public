/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC1155MetadataURIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// IERC1155MetadataURI.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155BalanceOf200Response</returns>
        InterfacesIERC1155BalanceOf200Response InterfacesIERC1155MetadataURIBalanceOf(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155BalanceOf200Response</returns>
        ApiResponse<InterfacesIERC1155BalanceOf200Response> InterfacesIERC1155MetadataURIBalanceOfWithHttpInfo(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155BalanceOfBatch200Response</returns>
        InterfacesIERC1155BalanceOfBatch200Response InterfacesIERC1155MetadataURIBalanceOfBatch(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155BalanceOfBatch200Response</returns>
        ApiResponse<InterfacesIERC1155BalanceOfBatch200Response> InterfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfo(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155IsApprovedForAll200Response</returns>
        InterfacesIERC1155IsApprovedForAll200Response InterfacesIERC1155MetadataURIIsApprovedForAll(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155IsApprovedForAll200Response</returns>
        ApiResponse<InterfacesIERC1155IsApprovedForAll200Response> InterfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfo(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155SafeBatchTransferFrom200Response</returns>
        InterfacesIERC1155SafeBatchTransferFrom200Response InterfacesIERC1155MetadataURISafeBatchTransferFrom(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155SafeBatchTransferFrom200Response</returns>
        ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response> InterfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155SafeTransferFrom200Response</returns>
        InterfacesIERC1155SafeTransferFrom200Response InterfacesIERC1155MetadataURISafeTransferFrom(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155SafeTransferFrom200Response</returns>
        ApiResponse<InterfacesIERC1155SafeTransferFrom200Response> InterfacesIERC1155MetadataURISafeTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155SetApprovalForAll200Response</returns>
        InterfacesIERC1155SetApprovalForAll200Response InterfacesIERC1155MetadataURISetApprovalForAll(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155SetApprovalForAll200Response</returns>
        ApiResponse<InterfacesIERC1155SetApprovalForAll200Response> InterfacesIERC1155MetadataURISetApprovalForAllWithHttpInfo(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC165SupportsInterface200Response</returns>
        InterfacesIERC165SupportsInterface200Response InterfacesIERC1155MetadataURISupportsInterface(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC165SupportsInterface200Response</returns>
        ApiResponse<InterfacesIERC165SupportsInterface200Response> InterfacesIERC1155MetadataURISupportsInterfaceWithHttpInfo(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0);
        /// <summary>
        /// IERC1155MetadataURI.uri
        /// </summary>
        /// <remarks>
        /// Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155MetadataURIUri200Response</returns>
        InterfacesIERC1155MetadataURIUri200Response InterfacesIERC1155MetadataURIUri(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0);

        /// <summary>
        /// IERC1155MetadataURI.uri
        /// </summary>
        /// <remarks>
        /// Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155MetadataURIUri200Response</returns>
        ApiResponse<InterfacesIERC1155MetadataURIUri200Response> InterfacesIERC1155MetadataURIUriWithHttpInfo(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC1155MetadataURIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// IERC1155MetadataURI.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155BalanceOf200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155BalanceOf200Response> InterfacesIERC1155MetadataURIBalanceOfAsync(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.balanceOf
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155BalanceOf200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155BalanceOf200Response>> InterfacesIERC1155MetadataURIBalanceOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155BalanceOfBatch200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155BalanceOfBatch200Response> InterfacesIERC1155MetadataURIBalanceOfBatchAsync(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch
        /// </summary>
        /// <remarks>
        /// Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155BalanceOfBatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155BalanceOfBatch200Response>> InterfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155IsApprovedForAll200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155IsApprovedForAll200Response> InterfacesIERC1155MetadataURIIsApprovedForAllAsync(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll
        /// </summary>
        /// <remarks>
        /// Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155IsApprovedForAll200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155IsApprovedForAll200Response>> InterfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155SafeBatchTransferFrom200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155SafeBatchTransferFrom200Response> InterfacesIERC1155MetadataURISafeBatchTransferFromAsync(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155SafeBatchTransferFrom200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response>> InterfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155SafeTransferFrom200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155SafeTransferFrom200Response> InterfacesIERC1155MetadataURISafeTransferFromAsync(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom
        /// </summary>
        /// <remarks>
        /// Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155SafeTransferFrom200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155SafeTransferFrom200Response>> InterfacesIERC1155MetadataURISafeTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155SetApprovalForAll200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155SetApprovalForAll200Response> InterfacesIERC1155MetadataURISetApprovalForAllAsync(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll
        /// </summary>
        /// <remarks>
        /// Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155SetApprovalForAll200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155SetApprovalForAll200Response>> InterfacesIERC1155MetadataURISetApprovalForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC165SupportsInterface200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC165SupportsInterface200Response> InterfacesIERC1155MetadataURISupportsInterfaceAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC165SupportsInterface200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC165SupportsInterface200Response>> InterfacesIERC1155MetadataURISupportsInterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IERC1155MetadataURI.uri
        /// </summary>
        /// <remarks>
        /// Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155MetadataURIUri200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC1155MetadataURIUri200Response> InterfacesIERC1155MetadataURIUriAsync(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IERC1155MetadataURI.uri
        /// </summary>
        /// <remarks>
        /// Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155MetadataURIUri200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC1155MetadataURIUri200Response>> InterfacesIERC1155MetadataURIUriWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIERC1155MetadataURIApi : IIERC1155MetadataURIApiSync, IIERC1155MetadataURIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IERC1155MetadataURIApi : IIERC1155MetadataURIApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1155MetadataURIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC1155MetadataURIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1155MetadataURIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IERC1155MetadataURIApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1155MetadataURIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IERC1155MetadataURIApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IERC1155MetadataURIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IERC1155MetadataURIApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOf Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155BalanceOf200Response</returns>
        public InterfacesIERC1155BalanceOf200Response InterfacesIERC1155MetadataURIBalanceOf(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOf200Response> localVarResponse = InterfacesIERC1155MetadataURIBalanceOfWithHttpInfo(networkId, address, interfacesIERC1155BalanceOfRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOf Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155BalanceOf200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOf200Response> InterfacesIERC1155MetadataURIBalanceOfWithHttpInfo(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOf");
            }

            // verify the required parameter 'interfacesIERC1155BalanceOfRequest' is set
            if (interfacesIERC1155BalanceOfRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155BalanceOfRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOf");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155BalanceOfRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIBalanceOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155BalanceOf200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIBalanceOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOf Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155BalanceOf200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155BalanceOf200Response> InterfacesIERC1155MetadataURIBalanceOfAsync(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOf200Response> localVarResponse = await InterfacesIERC1155MetadataURIBalanceOfWithHttpInfoAsync(networkId, address, interfacesIERC1155BalanceOfRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOf Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155BalanceOf200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOf200Response>> InterfacesIERC1155MetadataURIBalanceOfWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOf");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOf");
            }

            // verify the required parameter 'interfacesIERC1155BalanceOfRequest' is set
            if (interfacesIERC1155BalanceOfRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155BalanceOfRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOf");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155BalanceOfRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIBalanceOf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155BalanceOf200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIBalanceOf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155BalanceOfBatch200Response</returns>
        public InterfacesIERC1155BalanceOfBatch200Response InterfacesIERC1155MetadataURIBalanceOfBatch(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOfBatch200Response> localVarResponse = InterfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfo(networkId, address, interfacesIERC1155BalanceOfBatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155BalanceOfBatch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOfBatch200Response> InterfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfo(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOfBatch");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOfBatch");
            }

            // verify the required parameter 'interfacesIERC1155BalanceOfBatchRequest' is set
            if (interfacesIERC1155BalanceOfBatchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOfBatch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155BalanceOfBatchRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIBalanceOfBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155BalanceOfBatch200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOfBatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIBalanceOfBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155BalanceOfBatch200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155BalanceOfBatch200Response> InterfacesIERC1155MetadataURIBalanceOfBatchAsync(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOfBatch200Response> localVarResponse = await InterfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfoAsync(networkId, address, interfacesIERC1155BalanceOfBatchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.balanceOfBatch Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155BalanceOfBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155BalanceOfBatch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155BalanceOfBatch200Response>> InterfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOfBatch");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOfBatch");
            }

            // verify the required parameter 'interfacesIERC1155BalanceOfBatchRequest' is set
            if (interfacesIERC1155BalanceOfBatchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIBalanceOfBatch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155BalanceOfBatchRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIBalanceOfBatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155BalanceOfBatch200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOfBatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIBalanceOfBatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155IsApprovedForAll200Response</returns>
        public InterfacesIERC1155IsApprovedForAll200Response InterfacesIERC1155MetadataURIIsApprovedForAll(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155IsApprovedForAll200Response> localVarResponse = InterfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfo(networkId, address, interfacesIERC1155IsApprovedForAllRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155IsApprovedForAll200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155IsApprovedForAll200Response> InterfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfo(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIIsApprovedForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIIsApprovedForAll");
            }

            // verify the required parameter 'interfacesIERC1155IsApprovedForAllRequest' is set
            if (interfacesIERC1155IsApprovedForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIIsApprovedForAll");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155IsApprovedForAllRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIIsApprovedForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155IsApprovedForAll200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/isApprovedForAll", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIIsApprovedForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155IsApprovedForAll200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155IsApprovedForAll200Response> InterfacesIERC1155MetadataURIIsApprovedForAllAsync(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155IsApprovedForAll200Response> localVarResponse = await InterfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfoAsync(networkId, address, interfacesIERC1155IsApprovedForAllRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.isApprovedForAll Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155IsApprovedForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155IsApprovedForAll200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155IsApprovedForAll200Response>> InterfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIIsApprovedForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIIsApprovedForAll");
            }

            // verify the required parameter 'interfacesIERC1155IsApprovedForAllRequest' is set
            if (interfacesIERC1155IsApprovedForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIIsApprovedForAll");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155IsApprovedForAllRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIIsApprovedForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155IsApprovedForAll200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/isApprovedForAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIIsApprovedForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155SafeBatchTransferFrom200Response</returns>
        public InterfacesIERC1155SafeBatchTransferFrom200Response InterfacesIERC1155MetadataURISafeBatchTransferFrom(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response> localVarResponse = InterfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfo(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155SafeBatchTransferFrom200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response> InterfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeBatchTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeBatchTransferFrom");
            }

            // verify the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' is set
            if (interfacesIERC1155SafeBatchTransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeBatchTransferFrom");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155SafeBatchTransferFromRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISafeBatchTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155SafeBatchTransferFrom200Response>("/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeBatchTransferFrom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISafeBatchTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155SafeBatchTransferFrom200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155SafeBatchTransferFrom200Response> InterfacesIERC1155MetadataURISafeBatchTransferFromAsync(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response> localVarResponse = await InterfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfoAsync(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeBatchTransferFrom Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeBatchTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155SafeBatchTransferFrom200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response>> InterfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeBatchTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeBatchTransferFrom");
            }

            // verify the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' is set
            if (interfacesIERC1155SafeBatchTransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeBatchTransferFrom");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155SafeBatchTransferFromRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISafeBatchTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155SafeBatchTransferFrom200Response>("/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeBatchTransferFrom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISafeBatchTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155SafeTransferFrom200Response</returns>
        public InterfacesIERC1155SafeTransferFrom200Response InterfacesIERC1155MetadataURISafeTransferFrom(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeTransferFrom200Response> localVarResponse = InterfacesIERC1155MetadataURISafeTransferFromWithHttpInfo(networkId, address, interfacesIERC1155SafeTransferFromRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155SafeTransferFrom200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeTransferFrom200Response> InterfacesIERC1155MetadataURISafeTransferFromWithHttpInfo(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeTransferFrom");
            }

            // verify the required parameter 'interfacesIERC1155SafeTransferFromRequest' is set
            if (interfacesIERC1155SafeTransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeTransferFrom");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155SafeTransferFromRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISafeTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155SafeTransferFrom200Response>("/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeTransferFrom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISafeTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155SafeTransferFrom200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155SafeTransferFrom200Response> InterfacesIERC1155MetadataURISafeTransferFromAsync(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeTransferFrom200Response> localVarResponse = await InterfacesIERC1155MetadataURISafeTransferFromWithHttpInfoAsync(networkId, address, interfacesIERC1155SafeTransferFromRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.safeTransferFrom Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SafeTransferFromRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155SafeTransferFrom200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SafeTransferFrom200Response>> InterfacesIERC1155MetadataURISafeTransferFromWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeTransferFrom");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeTransferFrom");
            }

            // verify the required parameter 'interfacesIERC1155SafeTransferFromRequest' is set
            if (interfacesIERC1155SafeTransferFromRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISafeTransferFrom");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155SafeTransferFromRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISafeTransferFrom";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155SafeTransferFrom200Response>("/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeTransferFrom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISafeTransferFrom", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155SetApprovalForAll200Response</returns>
        public InterfacesIERC1155SetApprovalForAll200Response InterfacesIERC1155MetadataURISetApprovalForAll(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SetApprovalForAll200Response> localVarResponse = InterfacesIERC1155MetadataURISetApprovalForAllWithHttpInfo(networkId, address, interfacesIERC1155SetApprovalForAllRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155SetApprovalForAll200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SetApprovalForAll200Response> InterfacesIERC1155MetadataURISetApprovalForAllWithHttpInfo(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISetApprovalForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISetApprovalForAll");
            }

            // verify the required parameter 'interfacesIERC1155SetApprovalForAllRequest' is set
            if (interfacesIERC1155SetApprovalForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISetApprovalForAll");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155SetApprovalForAllRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISetApprovalForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155SetApprovalForAll200Response>("/{networkId}/interface/IERC1155MetadataURI/write/{address}/setApprovalForAll", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISetApprovalForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155SetApprovalForAll200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155SetApprovalForAll200Response> InterfacesIERC1155MetadataURISetApprovalForAllAsync(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SetApprovalForAll200Response> localVarResponse = await InterfacesIERC1155MetadataURISetApprovalForAllWithHttpInfoAsync(networkId, address, interfacesIERC1155SetApprovalForAllRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.setApprovalForAll Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155SetApprovalForAllRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155SetApprovalForAll200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155SetApprovalForAll200Response>> InterfacesIERC1155MetadataURISetApprovalForAllWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISetApprovalForAll");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISetApprovalForAll");
            }

            // verify the required parameter 'interfacesIERC1155SetApprovalForAllRequest' is set
            if (interfacesIERC1155SetApprovalForAllRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISetApprovalForAll");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155SetApprovalForAllRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISetApprovalForAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155SetApprovalForAll200Response>("/{networkId}/interface/IERC1155MetadataURI/write/{address}/setApprovalForAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISetApprovalForAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC165SupportsInterface200Response</returns>
        public InterfacesIERC165SupportsInterface200Response InterfacesIERC1155MetadataURISupportsInterface(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResponse = InterfacesIERC1155MetadataURISupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC165SupportsInterface200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> InterfacesIERC1155MetadataURISupportsInterfaceWithHttpInfo(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISupportsInterface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISupportsInterface");
            }

            // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
            if (interfacesIERC165SupportsInterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISupportsInterface");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC165SupportsInterfaceRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISupportsInterface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC165SupportsInterface200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/supportsInterface", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISupportsInterface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC165SupportsInterface200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC165SupportsInterface200Response> InterfacesIERC1155MetadataURISupportsInterfaceAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResponse = await InterfacesIERC1155MetadataURISupportsInterfaceWithHttpInfoAsync(networkId, address, interfacesIERC165SupportsInterfaceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC165SupportsInterface200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response>> InterfacesIERC1155MetadataURISupportsInterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISupportsInterface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISupportsInterface");
            }

            // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
            if (interfacesIERC165SupportsInterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURISupportsInterface");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC165SupportsInterfaceRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURISupportsInterface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC165SupportsInterface200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/supportsInterface", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURISupportsInterface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.uri Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC1155MetadataURIUri200Response</returns>
        public InterfacesIERC1155MetadataURIUri200Response InterfacesIERC1155MetadataURIUri(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155MetadataURIUri200Response> localVarResponse = InterfacesIERC1155MetadataURIUriWithHttpInfo(networkId, address, interfacesIERC1155MetadataURIUriRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.uri Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC1155MetadataURIUri200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155MetadataURIUri200Response> InterfacesIERC1155MetadataURIUriWithHttpInfo(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIUri");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIUri");
            }

            // verify the required parameter 'interfacesIERC1155MetadataURIUriRequest' is set
            if (interfacesIERC1155MetadataURIUriRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155MetadataURIUriRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIUri");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155MetadataURIUriRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIUri";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC1155MetadataURIUri200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/uri", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIUri", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IERC1155MetadataURI.uri Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC1155MetadataURIUri200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC1155MetadataURIUri200Response> InterfacesIERC1155MetadataURIUriAsync(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155MetadataURIUri200Response> localVarResponse = await InterfacesIERC1155MetadataURIUriWithHttpInfoAsync(networkId, address, interfacesIERC1155MetadataURIUriRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IERC1155MetadataURI.uri Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC1155MetadataURIUriRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC1155MetadataURIUri200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC1155MetadataURIUri200Response>> InterfacesIERC1155MetadataURIUriWithHttpInfoAsync(string networkId, string address, InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIUri");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIUri");
            }

            // verify the required parameter 'interfacesIERC1155MetadataURIUriRequest' is set
            if (interfacesIERC1155MetadataURIUriRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC1155MetadataURIUriRequest' when calling IERC1155MetadataURIApi->InterfacesIERC1155MetadataURIUri");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC1155MetadataURIUriRequest;

            localVarRequestOptions.Operation = "IERC1155MetadataURIApi.InterfacesIERC1155MetadataURIUri";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC1155MetadataURIUri200Response>("/{networkId}/interface/IERC1155MetadataURI/read/{address}/uri", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIERC1155MetadataURIUri", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
