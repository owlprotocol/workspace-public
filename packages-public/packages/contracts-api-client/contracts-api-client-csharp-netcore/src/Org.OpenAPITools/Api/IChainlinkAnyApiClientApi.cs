/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIChainlinkAnyApiClientApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// IChainlinkAnyApiClient.contractURI
        /// </summary>
        /// <remarks>
        /// Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIContractURIContractURI200Response</returns>
        InterfacesIContractURIContractURI200Response InterfacesIChainlinkAnyApiClientContractURI(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.contractURI
        /// </summary>
        /// <remarks>
        /// Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIContractURIContractURI200Response</returns>
        ApiResponse<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientContractURIWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
        /// </summary>
        /// <remarks>
        /// Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response</returns>
        InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
        /// </summary>
        /// <remarks>
        /// Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response</returns>
        ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.fulfill
        /// </summary>
        /// <remarks>
        /// Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientFulfill200Response</returns>
        InterfacesIChainlinkAnyApiClientFulfill200Response InterfacesIChainlinkAnyApiClientFulfill(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.fulfill
        /// </summary>
        /// <remarks>
        /// Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientFulfill200Response</returns>
        ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response> InterfacesIChainlinkAnyApiClientFulfillWithHttpInfo(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin
        /// </summary>
        /// <remarks>
        /// Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGetRoleAdmin200Response</returns>
        InterfacesIAccessControlGetRoleAdmin200Response InterfacesIChainlinkAnyApiClientGetRoleAdmin(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin
        /// </summary>
        /// <remarks>
        /// Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGetRoleAdmin200Response</returns>
        ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response> InterfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.grantRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGrantRole200Response</returns>
        InterfacesIAccessControlGrantRole200Response InterfacesIChainlinkAnyApiClientGrantRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.grantRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGrantRole200Response</returns>
        ApiResponse<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.hasRole
        /// </summary>
        /// <remarks>
        /// Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlHasRole200Response</returns>
        InterfacesIAccessControlHasRole200Response InterfacesIChainlinkAnyApiClientHasRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.hasRole
        /// </summary>
        /// <remarks>
        /// Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlHasRole200Response</returns>
        ApiResponse<InterfacesIAccessControlHasRole200Response> InterfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGrantRole200Response</returns>
        InterfacesIAccessControlGrantRole200Response InterfacesIChainlinkAnyApiClientRenounceRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGrantRole200Response</returns>
        ApiResponse<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.request
        /// </summary>
        /// <remarks>
        /// Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientRequest200Response</returns>
        InterfacesIChainlinkAnyApiClientRequest200Response InterfacesIChainlinkAnyApiClientRequest(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.request
        /// </summary>
        /// <remarks>
        /// Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientRequest200Response</returns>
        ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response> InterfacesIChainlinkAnyApiClientRequestWithHttpInfo(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.requests
        /// </summary>
        /// <remarks>
        /// Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientRequests200Response</returns>
        InterfacesIChainlinkAnyApiClientRequests200Response InterfacesIChainlinkAnyApiClientRequests(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.requests
        /// </summary>
        /// <remarks>
        /// Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientRequests200Response</returns>
        ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response> InterfacesIChainlinkAnyApiClientRequestsWithHttpInfo(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGrantRole200Response</returns>
        InterfacesIAccessControlGrantRole200Response InterfacesIChainlinkAnyApiClientRevokeRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGrantRole200Response</returns>
        ApiResponse<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI
        /// </summary>
        /// <remarks>
        /// Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIContractURISetContractURI200Response</returns>
        InterfacesIContractURISetContractURI200Response InterfacesIChainlinkAnyApiClientSetContractURI(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI
        /// </summary>
        /// <remarks>
        /// Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIContractURISetContractURI200Response</returns>
        ApiResponse<InterfacesIContractURISetContractURI200Response> InterfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC165SupportsInterface200Response</returns>
        InterfacesIERC165SupportsInterface200Response InterfacesIChainlinkAnyApiClientSupportsInterface(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC165SupportsInterface200Response</returns>
        ApiResponse<InterfacesIERC165SupportsInterface200Response> InterfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.version
        /// </summary>
        /// <remarks>
        /// Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIContractURIContractURI200Response</returns>
        InterfacesIContractURIContractURI200Response InterfacesIChainlinkAnyApiClientVersion(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.version
        /// </summary>
        /// <remarks>
        /// Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIContractURIContractURI200Response</returns>
        ApiResponse<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientVersionWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0);
        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink
        /// </summary>
        /// <remarks>
        /// Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Transfer200Response</returns>
        InterfacesIERC20Transfer200Response InterfacesIChainlinkAnyApiClientWithdrawLink(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0);

        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink
        /// </summary>
        /// <remarks>
        /// Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Transfer200Response</returns>
        ApiResponse<InterfacesIERC20Transfer200Response> InterfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIChainlinkAnyApiClientApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// IChainlinkAnyApiClient.contractURI
        /// </summary>
        /// <remarks>
        /// Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIContractURIContractURI200Response</returns>
        System.Threading.Tasks.Task<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientContractURIAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.contractURI
        /// </summary>
        /// <remarks>
        /// Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIContractURIContractURI200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIContractURIContractURI200Response>> InterfacesIChainlinkAnyApiClientContractURIWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
        /// </summary>
        /// <remarks>
        /// Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response</returns>
        System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
        /// </summary>
        /// <remarks>
        /// Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>> InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.fulfill
        /// </summary>
        /// <remarks>
        /// Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientFulfill200Response</returns>
        System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientFulfill200Response> InterfacesIChainlinkAnyApiClientFulfillAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.fulfill
        /// </summary>
        /// <remarks>
        /// Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientFulfill200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response>> InterfacesIChainlinkAnyApiClientFulfillWithHttpInfoAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin
        /// </summary>
        /// <remarks>
        /// Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGetRoleAdmin200Response</returns>
        System.Threading.Tasks.Task<InterfacesIAccessControlGetRoleAdmin200Response> InterfacesIChainlinkAnyApiClientGetRoleAdminAsync(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin
        /// </summary>
        /// <remarks>
        /// Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGetRoleAdmin200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response>> InterfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.grantRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGrantRole200Response</returns>
        System.Threading.Tasks.Task<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientGrantRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.grantRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGrantRole200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIAccessControlGrantRole200Response>> InterfacesIChainlinkAnyApiClientGrantRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.hasRole
        /// </summary>
        /// <remarks>
        /// Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlHasRole200Response</returns>
        System.Threading.Tasks.Task<InterfacesIAccessControlHasRole200Response> InterfacesIChainlinkAnyApiClientHasRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.hasRole
        /// </summary>
        /// <remarks>
        /// Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlHasRole200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIAccessControlHasRole200Response>> InterfacesIChainlinkAnyApiClientHasRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGrantRole200Response</returns>
        System.Threading.Tasks.Task<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRenounceRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGrantRole200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIAccessControlGrantRole200Response>> InterfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.request
        /// </summary>
        /// <remarks>
        /// Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientRequest200Response</returns>
        System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientRequest200Response> InterfacesIChainlinkAnyApiClientRequestAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.request
        /// </summary>
        /// <remarks>
        /// Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientRequest200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response>> InterfacesIChainlinkAnyApiClientRequestWithHttpInfoAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.requests
        /// </summary>
        /// <remarks>
        /// Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientRequests200Response</returns>
        System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientRequests200Response> InterfacesIChainlinkAnyApiClientRequestsAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.requests
        /// </summary>
        /// <remarks>
        /// Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientRequests200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response>> InterfacesIChainlinkAnyApiClientRequestsWithHttpInfoAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGrantRole200Response</returns>
        System.Threading.Tasks.Task<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRevokeRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole
        /// </summary>
        /// <remarks>
        /// Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGrantRole200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIAccessControlGrantRole200Response>> InterfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI
        /// </summary>
        /// <remarks>
        /// Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIContractURISetContractURI200Response</returns>
        System.Threading.Tasks.Task<InterfacesIContractURISetContractURI200Response> InterfacesIChainlinkAnyApiClientSetContractURIAsync(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI
        /// </summary>
        /// <remarks>
        /// Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIContractURISetContractURI200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIContractURISetContractURI200Response>> InterfacesIChainlinkAnyApiClientSetContractURIWithHttpInfoAsync(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC165SupportsInterface200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC165SupportsInterface200Response> InterfacesIChainlinkAnyApiClientSupportsInterfaceAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface
        /// </summary>
        /// <remarks>
        /// Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC165SupportsInterface200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC165SupportsInterface200Response>> InterfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.version
        /// </summary>
        /// <remarks>
        /// Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIContractURIContractURI200Response</returns>
        System.Threading.Tasks.Task<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientVersionAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.version
        /// </summary>
        /// <remarks>
        /// Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIContractURIContractURI200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIContractURIContractURI200Response>> InterfacesIChainlinkAnyApiClientVersionWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink
        /// </summary>
        /// <remarks>
        /// Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Transfer200Response</returns>
        System.Threading.Tasks.Task<InterfacesIERC20Transfer200Response> InterfacesIChainlinkAnyApiClientWithdrawLinkAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink
        /// </summary>
        /// <remarks>
        /// Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Transfer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InterfacesIERC20Transfer200Response>> InterfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfoAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIChainlinkAnyApiClientApi : IIChainlinkAnyApiClientApiSync, IIChainlinkAnyApiClientApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IChainlinkAnyApiClientApi : IIChainlinkAnyApiClientApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IChainlinkAnyApiClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IChainlinkAnyApiClientApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IChainlinkAnyApiClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IChainlinkAnyApiClientApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IChainlinkAnyApiClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IChainlinkAnyApiClientApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IChainlinkAnyApiClientApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IChainlinkAnyApiClientApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// IChainlinkAnyApiClient.contractURI Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIContractURIContractURI200Response</returns>
        public InterfacesIContractURIContractURI200Response InterfacesIChainlinkAnyApiClientContractURI(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response> localVarResponse = InterfacesIChainlinkAnyApiClientContractURIWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.contractURI Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIContractURIContractURI200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientContractURIWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientContractURI");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientContractURI");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientContractURI");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientContractURI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIContractURIContractURI200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientContractURI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.contractURI Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIContractURIContractURI200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientContractURIAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientContractURIWithHttpInfoAsync(networkId, address, interfacesIBeaconImplementationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.contractURI Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIContractURIContractURI200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response>> InterfacesIChainlinkAnyApiClientContractURIWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientContractURI");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientContractURI");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientContractURI");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientContractURI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIContractURIContractURI200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientContractURI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response</returns>
        public InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> localVarResponse = InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfoAsync(networkId, address, interfacesIBeaconImplementationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>> InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.fulfill Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientFulfill200Response</returns>
        public InterfacesIChainlinkAnyApiClientFulfill200Response InterfacesIChainlinkAnyApiClientFulfill(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response> localVarResponse = InterfacesIChainlinkAnyApiClientFulfillWithHttpInfo(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.fulfill Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientFulfill200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response> InterfacesIChainlinkAnyApiClientFulfillWithHttpInfo(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientFulfill");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientFulfill");
            }

            // verify the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' is set
            if (interfacesIChainlinkAnyApiClientFulfillRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientFulfill");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIChainlinkAnyApiClientFulfillRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientFulfill";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIChainlinkAnyApiClientFulfill200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientFulfill", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.fulfill Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientFulfill200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientFulfill200Response> InterfacesIChainlinkAnyApiClientFulfillAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientFulfillWithHttpInfoAsync(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.fulfill Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientFulfillRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientFulfill200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response>> InterfacesIChainlinkAnyApiClientFulfillWithHttpInfoAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientFulfill");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientFulfill");
            }

            // verify the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' is set
            if (interfacesIChainlinkAnyApiClientFulfillRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientFulfill");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIChainlinkAnyApiClientFulfillRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientFulfill";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIChainlinkAnyApiClientFulfill200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientFulfill", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGetRoleAdmin200Response</returns>
        public InterfacesIAccessControlGetRoleAdmin200Response InterfacesIChainlinkAnyApiClientGetRoleAdmin(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response> localVarResponse = InterfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(networkId, address, interfacesIAccessControlGetRoleAdminRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGetRoleAdmin200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response> InterfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGetRoleAdmin");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGetRoleAdmin");
            }

            // verify the required parameter 'interfacesIAccessControlGetRoleAdminRequest' is set
            if (interfacesIAccessControlGetRoleAdminRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGetRoleAdmin");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGetRoleAdminRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientGetRoleAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIAccessControlGetRoleAdmin200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientGetRoleAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGetRoleAdmin200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIAccessControlGetRoleAdmin200Response> InterfacesIChainlinkAnyApiClientGetRoleAdminAsync(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfoAsync(networkId, address, interfacesIAccessControlGetRoleAdminRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.getRoleAdmin Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGetRoleAdminRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGetRoleAdmin200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response>> InterfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGetRoleAdmin");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGetRoleAdmin");
            }

            // verify the required parameter 'interfacesIAccessControlGetRoleAdminRequest' is set
            if (interfacesIAccessControlGetRoleAdminRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGetRoleAdmin");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGetRoleAdminRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientGetRoleAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIAccessControlGetRoleAdmin200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientGetRoleAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.grantRole Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGrantRole200Response</returns>
        public InterfacesIAccessControlGrantRole200Response InterfacesIChainlinkAnyApiClientGrantRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResponse = InterfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.grantRole Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGrantRole200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGrantRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGrantRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGrantRole");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientGrantRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIAccessControlGrantRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientGrantRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.grantRole Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGrantRole200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientGrantRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientGrantRoleWithHttpInfoAsync(networkId, address, interfacesIAccessControlGrantRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.grantRole Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGrantRole200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response>> InterfacesIChainlinkAnyApiClientGrantRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGrantRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGrantRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientGrantRole");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientGrantRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIAccessControlGrantRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientGrantRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.hasRole Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlHasRole200Response</returns>
        public InterfacesIAccessControlHasRole200Response InterfacesIChainlinkAnyApiClientHasRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlHasRole200Response> localVarResponse = InterfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.hasRole Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlHasRole200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlHasRole200Response> InterfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientHasRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientHasRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientHasRole");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientHasRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIAccessControlHasRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientHasRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.hasRole Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlHasRole200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIAccessControlHasRole200Response> InterfacesIChainlinkAnyApiClientHasRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlHasRole200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientHasRoleWithHttpInfoAsync(networkId, address, interfacesIAccessControlGrantRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.hasRole Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlHasRole200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlHasRole200Response>> InterfacesIChainlinkAnyApiClientHasRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientHasRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientHasRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientHasRole");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientHasRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIAccessControlHasRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientHasRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGrantRole200Response</returns>
        public InterfacesIAccessControlGrantRole200Response InterfacesIChainlinkAnyApiClientRenounceRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResponse = InterfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGrantRole200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRenounceRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRenounceRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRenounceRole");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRenounceRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIAccessControlGrantRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRenounceRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGrantRole200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRenounceRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfoAsync(networkId, address, interfacesIAccessControlGrantRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.renounceRole Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGrantRole200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response>> InterfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRenounceRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRenounceRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRenounceRole");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRenounceRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIAccessControlGrantRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRenounceRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.request Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientRequest200Response</returns>
        public InterfacesIChainlinkAnyApiClientRequest200Response InterfacesIChainlinkAnyApiClientRequest(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response> localVarResponse = InterfacesIChainlinkAnyApiClientRequestWithHttpInfo(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.request Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientRequest200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response> InterfacesIChainlinkAnyApiClientRequestWithHttpInfo(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequest");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequest");
            }

            // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' is set
            if (interfacesIChainlinkAnyApiClientRequestRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIChainlinkAnyApiClientRequestRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIChainlinkAnyApiClientRequest200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.request Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientRequest200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientRequest200Response> InterfacesIChainlinkAnyApiClientRequestAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientRequestWithHttpInfoAsync(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.request Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientRequest200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response>> InterfacesIChainlinkAnyApiClientRequestWithHttpInfoAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequest");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequest");
            }

            // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' is set
            if (interfacesIChainlinkAnyApiClientRequestRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIChainlinkAnyApiClientRequestRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIChainlinkAnyApiClientRequest200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.requests Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIChainlinkAnyApiClientRequests200Response</returns>
        public InterfacesIChainlinkAnyApiClientRequests200Response InterfacesIChainlinkAnyApiClientRequests(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response> localVarResponse = InterfacesIChainlinkAnyApiClientRequestsWithHttpInfo(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.requests Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIChainlinkAnyApiClientRequests200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response> InterfacesIChainlinkAnyApiClientRequestsWithHttpInfo(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequests");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequests");
            }

            // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' is set
            if (interfacesIChainlinkAnyApiClientRequestsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequests");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIChainlinkAnyApiClientRequestsRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIChainlinkAnyApiClientRequests200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.requests Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIChainlinkAnyApiClientRequests200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIChainlinkAnyApiClientRequests200Response> InterfacesIChainlinkAnyApiClientRequestsAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientRequestsWithHttpInfoAsync(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.requests Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIChainlinkAnyApiClientRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIChainlinkAnyApiClientRequests200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response>> InterfacesIChainlinkAnyApiClientRequestsWithHttpInfoAsync(string networkId, string address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequests");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequests");
            }

            // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' is set
            if (interfacesIChainlinkAnyApiClientRequestsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRequests");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIChainlinkAnyApiClientRequestsRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIChainlinkAnyApiClientRequests200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIAccessControlGrantRole200Response</returns>
        public InterfacesIAccessControlGrantRole200Response InterfacesIChainlinkAnyApiClientRevokeRole(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResponse = InterfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIAccessControlGrantRole200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRevokeRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRevokeRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRevokeRole");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRevokeRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIAccessControlGrantRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRevokeRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIAccessControlGrantRole200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIAccessControlGrantRole200Response> InterfacesIChainlinkAnyApiClientRevokeRoleAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfoAsync(networkId, address, interfacesIAccessControlGrantRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.revokeRole Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIAccessControlGrantRoleRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIAccessControlGrantRole200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIAccessControlGrantRole200Response>> InterfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfoAsync(string networkId, string address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRevokeRole");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRevokeRole");
            }

            // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
            if (interfacesIAccessControlGrantRoleRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIAccessControlGrantRoleRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientRevokeRole");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIAccessControlGrantRoleRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRevokeRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIAccessControlGrantRole200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientRevokeRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIContractURISetContractURI200Response</returns>
        public InterfacesIContractURISetContractURI200Response InterfacesIChainlinkAnyApiClientSetContractURI(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURISetContractURI200Response> localVarResponse = InterfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(networkId, address, interfacesIContractURISetContractURIRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIContractURISetContractURI200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURISetContractURI200Response> InterfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSetContractURI");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSetContractURI");
            }

            // verify the required parameter 'interfacesIContractURISetContractURIRequest' is set
            if (interfacesIContractURISetContractURIRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIContractURISetContractURIRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSetContractURI");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIContractURISetContractURIRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientSetContractURI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIContractURISetContractURI200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientSetContractURI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIContractURISetContractURI200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIContractURISetContractURI200Response> InterfacesIChainlinkAnyApiClientSetContractURIAsync(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURISetContractURI200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientSetContractURIWithHttpInfoAsync(networkId, address, interfacesIContractURISetContractURIRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.setContractURI Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIContractURISetContractURIRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIContractURISetContractURI200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURISetContractURI200Response>> InterfacesIChainlinkAnyApiClientSetContractURIWithHttpInfoAsync(string networkId, string address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSetContractURI");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSetContractURI");
            }

            // verify the required parameter 'interfacesIContractURISetContractURIRequest' is set
            if (interfacesIContractURISetContractURIRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIContractURISetContractURIRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSetContractURI");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIContractURISetContractURIRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientSetContractURI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIContractURISetContractURI200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientSetContractURI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC165SupportsInterface200Response</returns>
        public InterfacesIERC165SupportsInterface200Response InterfacesIChainlinkAnyApiClientSupportsInterface(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResponse = InterfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC165SupportsInterface200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> InterfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSupportsInterface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSupportsInterface");
            }

            // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
            if (interfacesIERC165SupportsInterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSupportsInterface");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC165SupportsInterfaceRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientSupportsInterface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC165SupportsInterface200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientSupportsInterface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC165SupportsInterface200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC165SupportsInterface200Response> InterfacesIChainlinkAnyApiClientSupportsInterfaceAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfoAsync(networkId, address, interfacesIERC165SupportsInterfaceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.supportsInterface Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC165SupportsInterfaceRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC165SupportsInterface200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC165SupportsInterface200Response>> InterfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfoAsync(string networkId, string address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSupportsInterface");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSupportsInterface");
            }

            // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
            if (interfacesIERC165SupportsInterfaceRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientSupportsInterface");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC165SupportsInterfaceRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientSupportsInterface";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC165SupportsInterface200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientSupportsInterface", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.version Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIContractURIContractURI200Response</returns>
        public InterfacesIContractURIContractURI200Response InterfacesIChainlinkAnyApiClientVersion(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response> localVarResponse = InterfacesIChainlinkAnyApiClientVersionWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.version Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIContractURIContractURI200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientVersionWithHttpInfo(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientVersion");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientVersion");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientVersion");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIContractURIContractURI200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.version Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIContractURIContractURI200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIContractURIContractURI200Response> InterfacesIChainlinkAnyApiClientVersionAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientVersionWithHttpInfoAsync(networkId, address, interfacesIBeaconImplementationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.version Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIBeaconImplementationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIContractURIContractURI200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIContractURIContractURI200Response>> InterfacesIChainlinkAnyApiClientVersionWithHttpInfoAsync(string networkId, string address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientVersion");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientVersion");
            }

            // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
            if (interfacesIBeaconImplementationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIBeaconImplementationRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientVersion");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIBeaconImplementationRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIContractURIContractURI200Response>("/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InterfacesIERC20Transfer200Response</returns>
        public InterfacesIERC20Transfer200Response InterfacesIChainlinkAnyApiClientWithdrawLink(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response> localVarResponse = InterfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(networkId, address, interfacesIERC20TransferRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InterfacesIERC20Transfer200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response> InterfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0)
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientWithdrawLink");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientWithdrawLink");
            }

            // verify the required parameter 'interfacesIERC20TransferRequest' is set
            if (interfacesIERC20TransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20TransferRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientWithdrawLink");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20TransferRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientWithdrawLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InterfacesIERC20Transfer200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientWithdrawLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InterfacesIERC20Transfer200Response</returns>
        public async System.Threading.Tasks.Task<InterfacesIERC20Transfer200Response> InterfacesIChainlinkAnyApiClientWithdrawLinkAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response> localVarResponse = await InterfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfoAsync(networkId, address, interfacesIERC20TransferRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// IChainlinkAnyApiClient.withdrawLink Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkId">The network id</param>
        /// <param name="address">An ethereum address</param>
        /// <param name="interfacesIERC20TransferRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InterfacesIERC20Transfer200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InterfacesIERC20Transfer200Response>> InterfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfoAsync(string networkId, string address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'networkId' is set
            if (networkId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'networkId' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientWithdrawLink");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'address' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientWithdrawLink");
            }

            // verify the required parameter 'interfacesIERC20TransferRequest' is set
            if (interfacesIERC20TransferRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'interfacesIERC20TransferRequest' when calling IChainlinkAnyApiClientApi->InterfacesIChainlinkAnyApiClientWithdrawLink");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("networkId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(networkId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Org.OpenAPITools.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.Data = interfacesIERC20TransferRequest;

            localVarRequestOptions.Operation = "IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientWithdrawLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InterfacesIERC20Transfer200Response>("/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InterfacesIChainlinkAnyApiClientWithdrawLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
