/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IERC721EnumerableApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IERC721EnumerableApiTests : IDisposable
    {
        private IERC721EnumerableApi instance;

        public IERC721EnumerableApiTests()
        {
            instance = new IERC721EnumerableApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IERC721EnumerableApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IERC721EnumerableApi
            //Assert.IsType<IERC721EnumerableApi>(instance);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableApprove
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableApproveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest = null;
            //var response = instance.InterfacesIERC721EnumerableApprove(networkId, address, interfacesIERC721ApproveRequest);
            //Assert.IsType<InterfacesIERC721Approve200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableBalanceOf
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableBalanceOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest = null;
            //var response = instance.InterfacesIERC721EnumerableBalanceOf(networkId, address, interfacesIERC721BalanceOfRequest);
            //Assert.IsType<InterfacesIERC721BalanceOf200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableGetApproved
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableGetApprovedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest = null;
            //var response = instance.InterfacesIERC721EnumerableGetApproved(networkId, address, interfacesIERC721GetApprovedRequest);
            //Assert.IsType<InterfacesIERC721GetApproved200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableIsApprovedForAll
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableIsApprovedForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest = null;
            //var response = instance.InterfacesIERC721EnumerableIsApprovedForAll(networkId, address, interfacesIERC721IsApprovedForAllRequest);
            //Assert.IsType<InterfacesIERC721IsApprovedForAll200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableOwnerOf
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableOwnerOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest = null;
            //var response = instance.InterfacesIERC721EnumerableOwnerOf(networkId, address, interfacesIERC721GetApprovedRequest);
            //Assert.IsType<InterfacesIERC721OwnerOf200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableSafeTransferFrom
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableSafeTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest = null;
            //var response = instance.InterfacesIERC721EnumerableSafeTransferFrom(networkId, address, interfacesIERC721SafeTransferFromRequest);
            //Assert.IsType<InterfacesIERC721SafeTransferFrom200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableSetApprovalForAll
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableSetApprovalForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest = null;
            //var response = instance.InterfacesIERC721EnumerableSetApprovalForAll(networkId, address, interfacesIERC721SetApprovalForAllRequest);
            //Assert.IsType<InterfacesIERC721SetApprovalForAll200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableSupportsInterface
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableSupportsInterfaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest = null;
            //var response = instance.InterfacesIERC721EnumerableSupportsInterface(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            //Assert.IsType<InterfacesIERC165SupportsInterface200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableTokenByIndex
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableTokenByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest = null;
            //var response = instance.InterfacesIERC721EnumerableTokenByIndex(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest);
            //Assert.IsType<InterfacesIERC721EnumerableTokenByIndex200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableTokenOfOwnerByIndex
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableTokenOfOwnerByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest = null;
            //var response = instance.InterfacesIERC721EnumerableTokenOfOwnerByIndex(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest);
            //Assert.IsType<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableTotalSupply
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableTotalSupplyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest = null;
            //var response = instance.InterfacesIERC721EnumerableTotalSupply(networkId, address, interfacesIBeaconImplementationRequest);
            //Assert.IsType<InterfacesIERC20TotalSupply200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721EnumerableTransferFrom
        /// </summary>
        [Fact]
        public void InterfacesIERC721EnumerableTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest = null;
            //var response = instance.InterfacesIERC721EnumerableTransferFrom(networkId, address, interfacesIERC721TransferFromRequest);
            //Assert.IsType<InterfacesIERC721TransferFrom200Response>(response);
        }
    }
}
