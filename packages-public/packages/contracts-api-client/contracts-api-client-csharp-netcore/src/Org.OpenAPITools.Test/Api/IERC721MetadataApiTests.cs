/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IERC721MetadataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IERC721MetadataApiTests : IDisposable
    {
        private IERC721MetadataApi instance;

        public IERC721MetadataApiTests()
        {
            instance = new IERC721MetadataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IERC721MetadataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IERC721MetadataApi
            //Assert.IsType<IERC721MetadataApi>(instance);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataApprove
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataApproveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest = null;
            //var response = instance.InterfacesIERC721MetadataApprove(networkId, address, interfacesIERC721ApproveRequest);
            //Assert.IsType<InterfacesIERC721Approve200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataBalanceOf
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataBalanceOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest = null;
            //var response = instance.InterfacesIERC721MetadataBalanceOf(networkId, address, interfacesIERC721BalanceOfRequest);
            //Assert.IsType<InterfacesIERC721BalanceOf200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataGetApproved
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataGetApprovedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest = null;
            //var response = instance.InterfacesIERC721MetadataGetApproved(networkId, address, interfacesIERC721GetApprovedRequest);
            //Assert.IsType<InterfacesIERC721GetApproved200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataIsApprovedForAll
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataIsApprovedForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest = null;
            //var response = instance.InterfacesIERC721MetadataIsApprovedForAll(networkId, address, interfacesIERC721IsApprovedForAllRequest);
            //Assert.IsType<InterfacesIERC721IsApprovedForAll200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataName
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest = null;
            //var response = instance.InterfacesIERC721MetadataName(networkId, address, interfacesIBeaconImplementationRequest);
            //Assert.IsType<InterfacesIContractURIContractURI200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataOwnerOf
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataOwnerOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest = null;
            //var response = instance.InterfacesIERC721MetadataOwnerOf(networkId, address, interfacesIERC721GetApprovedRequest);
            //Assert.IsType<InterfacesIERC721OwnerOf200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataSafeTransferFrom
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataSafeTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest = null;
            //var response = instance.InterfacesIERC721MetadataSafeTransferFrom(networkId, address, interfacesIERC721SafeTransferFromRequest);
            //Assert.IsType<InterfacesIERC721SafeTransferFrom200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataSetApprovalForAll
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataSetApprovalForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest = null;
            //var response = instance.InterfacesIERC721MetadataSetApprovalForAll(networkId, address, interfacesIERC721SetApprovalForAllRequest);
            //Assert.IsType<InterfacesIERC721SetApprovalForAll200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataSupportsInterface
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataSupportsInterfaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest = null;
            //var response = instance.InterfacesIERC721MetadataSupportsInterface(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            //Assert.IsType<InterfacesIERC165SupportsInterface200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataSymbol
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataSymbolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest = null;
            //var response = instance.InterfacesIERC721MetadataSymbol(networkId, address, interfacesIBeaconImplementationRequest);
            //Assert.IsType<InterfacesIContractURIContractURI200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataTokenURI
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataTokenURITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest = null;
            //var response = instance.InterfacesIERC721MetadataTokenURI(networkId, address, interfacesIERC721GetApprovedRequest);
            //Assert.IsType<InterfacesIERC721MetadataTokenURI200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC721MetadataTransferFrom
        /// </summary>
        [Fact]
        public void InterfacesIERC721MetadataTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest = null;
            //var response = instance.InterfacesIERC721MetadataTransferFrom(networkId, address, interfacesIERC721TransferFromRequest);
            //Assert.IsType<InterfacesIERC721TransferFrom200Response>(response);
        }
    }
}
