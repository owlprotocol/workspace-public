/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IERC1155MetadataURIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IERC1155MetadataURIApiTests : IDisposable
    {
        private IERC1155MetadataURIApi instance;

        public IERC1155MetadataURIApiTests()
        {
            instance = new IERC1155MetadataURIApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IERC1155MetadataURIApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IERC1155MetadataURIApi
            //Assert.IsType<IERC1155MetadataURIApi>(instance);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURIBalanceOf
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURIBalanceOfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURIBalanceOf(networkId, address, interfacesIERC1155BalanceOfRequest);
            //Assert.IsType<InterfacesIERC1155BalanceOf200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURIBalanceOfBatch
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURIBalanceOfBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURIBalanceOfBatch(networkId, address, interfacesIERC1155BalanceOfBatchRequest);
            //Assert.IsType<InterfacesIERC1155BalanceOfBatch200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURIIsApprovedForAll
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURIIsApprovedForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURIIsApprovedForAll(networkId, address, interfacesIERC1155IsApprovedForAllRequest);
            //Assert.IsType<InterfacesIERC1155IsApprovedForAll200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURISafeBatchTransferFrom
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURISafeBatchTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURISafeBatchTransferFrom(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest);
            //Assert.IsType<InterfacesIERC1155SafeBatchTransferFrom200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURISafeTransferFrom
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURISafeTransferFromTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURISafeTransferFrom(networkId, address, interfacesIERC1155SafeTransferFromRequest);
            //Assert.IsType<InterfacesIERC1155SafeTransferFrom200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURISetApprovalForAll
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURISetApprovalForAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURISetApprovalForAll(networkId, address, interfacesIERC1155SetApprovalForAllRequest);
            //Assert.IsType<InterfacesIERC1155SetApprovalForAll200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURISupportsInterface
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURISupportsInterfaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURISupportsInterface(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            //Assert.IsType<InterfacesIERC165SupportsInterface200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIERC1155MetadataURIUri
        /// </summary>
        [Fact]
        public void InterfacesIERC1155MetadataURIUriTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC1155MetadataURIUriRequest interfacesIERC1155MetadataURIUriRequest = null;
            //var response = instance.InterfacesIERC1155MetadataURIUri(networkId, address, interfacesIERC1155MetadataURIUriRequest);
            //Assert.IsType<InterfacesIERC1155MetadataURIUri200Response>(response);
        }
    }
}
