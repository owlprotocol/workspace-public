/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IChainlinkAnyApiClientApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IChainlinkAnyApiClientApiTests : IDisposable
    {
        private IChainlinkAnyApiClientApi instance;

        public IChainlinkAnyApiClientApiTests()
        {
            instance = new IChainlinkAnyApiClientApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IChainlinkAnyApiClientApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IChainlinkAnyApiClientApi
            //Assert.IsType<IChainlinkAnyApiClientApi>(instance);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientContractURI
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientContractURITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientContractURI(networkId, address, interfacesIBeaconImplementationRequest);
            //Assert.IsType<InterfacesIContractURIContractURI200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientDEFAULTADMINROLETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE(networkId, address, interfacesIBeaconImplementationRequest);
            //Assert.IsType<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientFulfill
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientFulfillTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientFulfill(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest);
            //Assert.IsType<InterfacesIChainlinkAnyApiClientFulfill200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientGetRoleAdmin
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientGetRoleAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientGetRoleAdmin(networkId, address, interfacesIAccessControlGetRoleAdminRequest);
            //Assert.IsType<InterfacesIAccessControlGetRoleAdmin200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientGrantRole
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientGrantRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientGrantRole(networkId, address, interfacesIAccessControlGrantRoleRequest);
            //Assert.IsType<InterfacesIAccessControlGrantRole200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientHasRole
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientHasRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientHasRole(networkId, address, interfacesIAccessControlGrantRoleRequest);
            //Assert.IsType<InterfacesIAccessControlHasRole200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientRenounceRole
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientRenounceRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientRenounceRole(networkId, address, interfacesIAccessControlGrantRoleRequest);
            //Assert.IsType<InterfacesIAccessControlGrantRole200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientRequest
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientRequest(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest);
            //Assert.IsType<InterfacesIChainlinkAnyApiClientRequest200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientRequests
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientRequests(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest);
            //Assert.IsType<InterfacesIChainlinkAnyApiClientRequests200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientRevokeRole
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientRevokeRoleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientRevokeRole(networkId, address, interfacesIAccessControlGrantRoleRequest);
            //Assert.IsType<InterfacesIAccessControlGrantRole200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientSetContractURI
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientSetContractURITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientSetContractURI(networkId, address, interfacesIContractURISetContractURIRequest);
            //Assert.IsType<InterfacesIContractURISetContractURI200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientSupportsInterface
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientSupportsInterfaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientSupportsInterface(networkId, address, interfacesIERC165SupportsInterfaceRequest);
            //Assert.IsType<InterfacesIERC165SupportsInterface200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientVersion
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientVersion(networkId, address, interfacesIBeaconImplementationRequest);
            //Assert.IsType<InterfacesIContractURIContractURI200Response>(response);
        }

        /// <summary>
        /// Test InterfacesIChainlinkAnyApiClientWithdrawLink
        /// </summary>
        [Fact]
        public void InterfacesIChainlinkAnyApiClientWithdrawLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string networkId = null;
            //string address = null;
            //InterfacesIERC20TransferRequest interfacesIERC20TransferRequest = null;
            //var response = instance.InterfacesIChainlinkAnyApiClientWithdrawLink(networkId, address, interfacesIERC20TransferRequest);
            //Assert.IsType<InterfacesIERC20Transfer200Response>(response);
        }
    }
}
