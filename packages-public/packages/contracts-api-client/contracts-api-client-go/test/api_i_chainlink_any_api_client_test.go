/*
Owl Contract Api

Testing IChainlinkAnyApiClientApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_IChainlinkAnyApiClientApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientContractURI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientContractURI(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientFulfill", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientFulfill(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientGetRoleAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientGetRoleAdmin(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientGrantRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientGrantRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientHasRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientHasRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientRenounceRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRenounceRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRequest(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRequests(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientRevokeRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientRevokeRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientSetContractURI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientSetContractURI(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientSupportsInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientSupportsInterface(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientVersion(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IChainlinkAnyApiClientApiService InterfacesIChainlinkAnyApiClientWithdrawLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IChainlinkAnyApiClientApi.InterfacesIChainlinkAnyApiClientWithdrawLink(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
