/*
Owl Contract Api

Testing IAccessControlApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_IAccessControlApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IAccessControlApiService InterfacesIAccessControlGetRoleAdmin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IAccessControlApi.InterfacesIAccessControlGetRoleAdmin(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAccessControlApiService InterfacesIAccessControlGrantRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IAccessControlApi.InterfacesIAccessControlGrantRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAccessControlApiService InterfacesIAccessControlHasRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IAccessControlApi.InterfacesIAccessControlHasRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAccessControlApiService InterfacesIAccessControlRenounceRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IAccessControlApi.InterfacesIAccessControlRenounceRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAccessControlApiService InterfacesIAccessControlRevokeRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkId string
		var address string

		resp, httpRes, err := apiClient.IAccessControlApi.InterfacesIAccessControlRevokeRole(context.Background(), networkId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
