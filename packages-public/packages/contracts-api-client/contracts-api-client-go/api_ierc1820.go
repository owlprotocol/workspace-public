/*
Owl Contract Api

Specification for our API focused on contract interactions

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IERC1820ApiService IERC1820Api service
type IERC1820ApiService service

type ApiInterfacesIERC1820GetInterfaceImplementerRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820GetInterfaceImplementerRequest *InterfacesIERC1820GetInterfaceImplementerRequest
}

func (r ApiInterfacesIERC1820GetInterfaceImplementerRequest) InterfacesIERC1820GetInterfaceImplementerRequest(interfacesIERC1820GetInterfaceImplementerRequest InterfacesIERC1820GetInterfaceImplementerRequest) ApiInterfacesIERC1820GetInterfaceImplementerRequest {
	r.interfacesIERC1820GetInterfaceImplementerRequest = &interfacesIERC1820GetInterfaceImplementerRequest
	return r
}

func (r ApiInterfacesIERC1820GetInterfaceImplementerRequest) Execute() (*InterfacesIERC1820GetInterfaceImplementer200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820GetInterfaceImplementerExecute(r)
}

/*
InterfacesIERC1820GetInterfaceImplementer IERC1820.getInterfaceImplementer

Read `getInterfaceImplementer(account,_interfaceHash)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820GetInterfaceImplementerRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820GetInterfaceImplementer(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820GetInterfaceImplementerRequest {
	return ApiInterfacesIERC1820GetInterfaceImplementerRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820GetInterfaceImplementer200Response
func (a *IERC1820ApiService) InterfacesIERC1820GetInterfaceImplementerExecute(r ApiInterfacesIERC1820GetInterfaceImplementerRequest) (*InterfacesIERC1820GetInterfaceImplementer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820GetInterfaceImplementer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820GetInterfaceImplementer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820GetInterfaceImplementerRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820GetInterfaceImplementerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820GetInterfaceImplementerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820GetManagerRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820GetManagerRequest *InterfacesIERC1820GetManagerRequest
}

func (r ApiInterfacesIERC1820GetManagerRequest) InterfacesIERC1820GetManagerRequest(interfacesIERC1820GetManagerRequest InterfacesIERC1820GetManagerRequest) ApiInterfacesIERC1820GetManagerRequest {
	r.interfacesIERC1820GetManagerRequest = &interfacesIERC1820GetManagerRequest
	return r
}

func (r ApiInterfacesIERC1820GetManagerRequest) Execute() (*InterfacesIERC1820GetManager200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820GetManagerExecute(r)
}

/*
InterfacesIERC1820GetManager IERC1820.getManager

Read `getManager(account)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820GetManagerRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820GetManager(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820GetManagerRequest {
	return ApiInterfacesIERC1820GetManagerRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820GetManager200Response
func (a *IERC1820ApiService) InterfacesIERC1820GetManagerExecute(r ApiInterfacesIERC1820GetManagerRequest) (*InterfacesIERC1820GetManager200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820GetManager200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820GetManager")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/read/{address}/getManager"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820GetManagerRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820GetManagerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820GetManagerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820ImplementsERC165InterfaceRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820ImplementsERC165InterfaceRequest *InterfacesIERC1820ImplementsERC165InterfaceRequest
}

func (r ApiInterfacesIERC1820ImplementsERC165InterfaceRequest) InterfacesIERC1820ImplementsERC165InterfaceRequest(interfacesIERC1820ImplementsERC165InterfaceRequest InterfacesIERC1820ImplementsERC165InterfaceRequest) ApiInterfacesIERC1820ImplementsERC165InterfaceRequest {
	r.interfacesIERC1820ImplementsERC165InterfaceRequest = &interfacesIERC1820ImplementsERC165InterfaceRequest
	return r
}

func (r ApiInterfacesIERC1820ImplementsERC165InterfaceRequest) Execute() (*InterfacesIERC1820ImplementsERC165Interface200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820ImplementsERC165InterfaceExecute(r)
}

/*
InterfacesIERC1820ImplementsERC165Interface IERC1820.implementsERC165Interface

Read `implementsERC165Interface(account,interfaceId)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820ImplementsERC165InterfaceRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820ImplementsERC165Interface(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820ImplementsERC165InterfaceRequest {
	return ApiInterfacesIERC1820ImplementsERC165InterfaceRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820ImplementsERC165Interface200Response
func (a *IERC1820ApiService) InterfacesIERC1820ImplementsERC165InterfaceExecute(r ApiInterfacesIERC1820ImplementsERC165InterfaceRequest) (*InterfacesIERC1820ImplementsERC165Interface200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820ImplementsERC165Interface200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820ImplementsERC165Interface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820ImplementsERC165InterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820ImplementsERC165InterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820ImplementsERC165InterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820ImplementsERC165InterfaceRequest *InterfacesIERC1820ImplementsERC165InterfaceRequest
}

func (r ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest) InterfacesIERC1820ImplementsERC165InterfaceRequest(interfacesIERC1820ImplementsERC165InterfaceRequest InterfacesIERC1820ImplementsERC165InterfaceRequest) ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest {
	r.interfacesIERC1820ImplementsERC165InterfaceRequest = &interfacesIERC1820ImplementsERC165InterfaceRequest
	return r
}

func (r ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest) Execute() (*InterfacesIERC1820ImplementsERC165Interface200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820ImplementsERC165InterfaceNoCacheExecute(r)
}

/*
InterfacesIERC1820ImplementsERC165InterfaceNoCache IERC1820.implementsERC165InterfaceNoCache

Read `implementsERC165InterfaceNoCache(account,interfaceId)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820ImplementsERC165InterfaceNoCache(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest {
	return ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820ImplementsERC165Interface200Response
func (a *IERC1820ApiService) InterfacesIERC1820ImplementsERC165InterfaceNoCacheExecute(r ApiInterfacesIERC1820ImplementsERC165InterfaceNoCacheRequest) (*InterfacesIERC1820ImplementsERC165Interface200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820ImplementsERC165Interface200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820ImplementsERC165InterfaceNoCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820ImplementsERC165InterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820ImplementsERC165InterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820ImplementsERC165InterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820InterfaceHashRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820InterfaceHashRequest *InterfacesIERC1820InterfaceHashRequest
}

func (r ApiInterfacesIERC1820InterfaceHashRequest) InterfacesIERC1820InterfaceHashRequest(interfacesIERC1820InterfaceHashRequest InterfacesIERC1820InterfaceHashRequest) ApiInterfacesIERC1820InterfaceHashRequest {
	r.interfacesIERC1820InterfaceHashRequest = &interfacesIERC1820InterfaceHashRequest
	return r
}

func (r ApiInterfacesIERC1820InterfaceHashRequest) Execute() (*InterfacesIERC1820InterfaceHash200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820InterfaceHashExecute(r)
}

/*
InterfacesIERC1820InterfaceHash IERC1820.interfaceHash

Read `interfaceHash(interfaceName)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820InterfaceHashRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820InterfaceHash(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820InterfaceHashRequest {
	return ApiInterfacesIERC1820InterfaceHashRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820InterfaceHash200Response
func (a *IERC1820ApiService) InterfacesIERC1820InterfaceHashExecute(r ApiInterfacesIERC1820InterfaceHashRequest) (*InterfacesIERC1820InterfaceHash200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820InterfaceHash200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820InterfaceHash")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/read/{address}/interfaceHash"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820InterfaceHashRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820InterfaceHashRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820InterfaceHashRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820SetInterfaceImplementerRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820SetInterfaceImplementerRequest *InterfacesIERC1820SetInterfaceImplementerRequest
}

func (r ApiInterfacesIERC1820SetInterfaceImplementerRequest) InterfacesIERC1820SetInterfaceImplementerRequest(interfacesIERC1820SetInterfaceImplementerRequest InterfacesIERC1820SetInterfaceImplementerRequest) ApiInterfacesIERC1820SetInterfaceImplementerRequest {
	r.interfacesIERC1820SetInterfaceImplementerRequest = &interfacesIERC1820SetInterfaceImplementerRequest
	return r
}

func (r ApiInterfacesIERC1820SetInterfaceImplementerRequest) Execute() (*InterfacesIERC1820SetInterfaceImplementer200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820SetInterfaceImplementerExecute(r)
}

/*
InterfacesIERC1820SetInterfaceImplementer IERC1820.setInterfaceImplementer

Write `setInterfaceImplementer(account,_interfaceHash,implementer)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820SetInterfaceImplementerRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820SetInterfaceImplementer(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820SetInterfaceImplementerRequest {
	return ApiInterfacesIERC1820SetInterfaceImplementerRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820SetInterfaceImplementer200Response
func (a *IERC1820ApiService) InterfacesIERC1820SetInterfaceImplementerExecute(r ApiInterfacesIERC1820SetInterfaceImplementerRequest) (*InterfacesIERC1820SetInterfaceImplementer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820SetInterfaceImplementer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820SetInterfaceImplementer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820SetInterfaceImplementerRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820SetInterfaceImplementerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820SetInterfaceImplementerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820SetManagerRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820SetManagerRequest *InterfacesIERC1820SetManagerRequest
}

func (r ApiInterfacesIERC1820SetManagerRequest) InterfacesIERC1820SetManagerRequest(interfacesIERC1820SetManagerRequest InterfacesIERC1820SetManagerRequest) ApiInterfacesIERC1820SetManagerRequest {
	r.interfacesIERC1820SetManagerRequest = &interfacesIERC1820SetManagerRequest
	return r
}

func (r ApiInterfacesIERC1820SetManagerRequest) Execute() (*InterfacesIERC1820SetManager200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820SetManagerExecute(r)
}

/*
InterfacesIERC1820SetManager IERC1820.setManager

Write `setManager(account,newManager)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820SetManagerRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820SetManager(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820SetManagerRequest {
	return ApiInterfacesIERC1820SetManagerRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820SetManager200Response
func (a *IERC1820ApiService) InterfacesIERC1820SetManagerExecute(r ApiInterfacesIERC1820SetManagerRequest) (*InterfacesIERC1820SetManager200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820SetManager200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820SetManager")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/write/{address}/setManager"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820SetManagerRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820SetManagerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820SetManagerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1820UpdateERC165CacheRequest struct {
	ctx context.Context
	ApiService *IERC1820ApiService
	networkId string
	address string
	interfacesIERC1820ImplementsERC165InterfaceRequest *InterfacesIERC1820ImplementsERC165InterfaceRequest
}

func (r ApiInterfacesIERC1820UpdateERC165CacheRequest) InterfacesIERC1820ImplementsERC165InterfaceRequest(interfacesIERC1820ImplementsERC165InterfaceRequest InterfacesIERC1820ImplementsERC165InterfaceRequest) ApiInterfacesIERC1820UpdateERC165CacheRequest {
	r.interfacesIERC1820ImplementsERC165InterfaceRequest = &interfacesIERC1820ImplementsERC165InterfaceRequest
	return r
}

func (r ApiInterfacesIERC1820UpdateERC165CacheRequest) Execute() (*InterfacesIERC1820UpdateERC165Cache200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1820UpdateERC165CacheExecute(r)
}

/*
InterfacesIERC1820UpdateERC165Cache IERC1820.updateERC165Cache

Write `updateERC165Cache(account,interfaceId)` on an instance of `IERC1820`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1820UpdateERC165CacheRequest
*/
func (a *IERC1820ApiService) InterfacesIERC1820UpdateERC165Cache(ctx context.Context, networkId string, address string) ApiInterfacesIERC1820UpdateERC165CacheRequest {
	return ApiInterfacesIERC1820UpdateERC165CacheRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1820UpdateERC165Cache200Response
func (a *IERC1820ApiService) InterfacesIERC1820UpdateERC165CacheExecute(r ApiInterfacesIERC1820UpdateERC165CacheRequest) (*InterfacesIERC1820UpdateERC165Cache200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1820UpdateERC165Cache200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1820ApiService.InterfacesIERC1820UpdateERC165Cache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1820ImplementsERC165InterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1820ImplementsERC165InterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1820ImplementsERC165InterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
