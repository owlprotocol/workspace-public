/*
Owl Contract Api

Specification for our API focused on contract interactions

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IERC721EnumerableApiService IERC721EnumerableApi service
type IERC721EnumerableApiService service

type ApiInterfacesIERC721EnumerableApproveRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721ApproveRequest *InterfacesIERC721ApproveRequest
}

func (r ApiInterfacesIERC721EnumerableApproveRequest) InterfacesIERC721ApproveRequest(interfacesIERC721ApproveRequest InterfacesIERC721ApproveRequest) ApiInterfacesIERC721EnumerableApproveRequest {
	r.interfacesIERC721ApproveRequest = &interfacesIERC721ApproveRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableApproveRequest) Execute() (*InterfacesIERC721Approve200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableApproveExecute(r)
}

/*
InterfacesIERC721EnumerableApprove IERC721Enumerable.approve

Write `approve(to,tokenId)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableApproveRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableApprove(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableApproveRequest {
	return ApiInterfacesIERC721EnumerableApproveRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721Approve200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableApproveExecute(r ApiInterfacesIERC721EnumerableApproveRequest) (*InterfacesIERC721Approve200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721Approve200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableApprove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/write/{address}/approve"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721ApproveRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721ApproveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721ApproveRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableBalanceOfRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721BalanceOfRequest *InterfacesIERC721BalanceOfRequest
}

func (r ApiInterfacesIERC721EnumerableBalanceOfRequest) InterfacesIERC721BalanceOfRequest(interfacesIERC721BalanceOfRequest InterfacesIERC721BalanceOfRequest) ApiInterfacesIERC721EnumerableBalanceOfRequest {
	r.interfacesIERC721BalanceOfRequest = &interfacesIERC721BalanceOfRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableBalanceOfRequest) Execute() (*InterfacesIERC721BalanceOf200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableBalanceOfExecute(r)
}

/*
InterfacesIERC721EnumerableBalanceOf IERC721Enumerable.balanceOf

Read `balanceOf(owner)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableBalanceOfRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableBalanceOf(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableBalanceOfRequest {
	return ApiInterfacesIERC721EnumerableBalanceOfRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721BalanceOf200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableBalanceOfExecute(r ApiInterfacesIERC721EnumerableBalanceOfRequest) (*InterfacesIERC721BalanceOf200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721BalanceOf200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableBalanceOf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/balanceOf"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721BalanceOfRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721BalanceOfRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721BalanceOfRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableGetApprovedRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721GetApprovedRequest *InterfacesIERC721GetApprovedRequest
}

func (r ApiInterfacesIERC721EnumerableGetApprovedRequest) InterfacesIERC721GetApprovedRequest(interfacesIERC721GetApprovedRequest InterfacesIERC721GetApprovedRequest) ApiInterfacesIERC721EnumerableGetApprovedRequest {
	r.interfacesIERC721GetApprovedRequest = &interfacesIERC721GetApprovedRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableGetApprovedRequest) Execute() (*InterfacesIERC721GetApproved200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableGetApprovedExecute(r)
}

/*
InterfacesIERC721EnumerableGetApproved IERC721Enumerable.getApproved

Read `getApproved(tokenId)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableGetApprovedRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableGetApproved(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableGetApprovedRequest {
	return ApiInterfacesIERC721EnumerableGetApprovedRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721GetApproved200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableGetApprovedExecute(r ApiInterfacesIERC721EnumerableGetApprovedRequest) (*InterfacesIERC721GetApproved200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721GetApproved200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableGetApproved")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/getApproved"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721GetApprovedRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721GetApprovedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721GetApprovedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableIsApprovedForAllRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721IsApprovedForAllRequest *InterfacesIERC721IsApprovedForAllRequest
}

func (r ApiInterfacesIERC721EnumerableIsApprovedForAllRequest) InterfacesIERC721IsApprovedForAllRequest(interfacesIERC721IsApprovedForAllRequest InterfacesIERC721IsApprovedForAllRequest) ApiInterfacesIERC721EnumerableIsApprovedForAllRequest {
	r.interfacesIERC721IsApprovedForAllRequest = &interfacesIERC721IsApprovedForAllRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableIsApprovedForAllRequest) Execute() (*InterfacesIERC721IsApprovedForAll200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableIsApprovedForAllExecute(r)
}

/*
InterfacesIERC721EnumerableIsApprovedForAll IERC721Enumerable.isApprovedForAll

Read `isApprovedForAll(owner,operator)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableIsApprovedForAllRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableIsApprovedForAll(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableIsApprovedForAllRequest {
	return ApiInterfacesIERC721EnumerableIsApprovedForAllRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721IsApprovedForAll200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableIsApprovedForAllExecute(r ApiInterfacesIERC721EnumerableIsApprovedForAllRequest) (*InterfacesIERC721IsApprovedForAll200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721IsApprovedForAll200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableIsApprovedForAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/isApprovedForAll"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721IsApprovedForAllRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721IsApprovedForAllRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721IsApprovedForAllRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableOwnerOfRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721GetApprovedRequest *InterfacesIERC721GetApprovedRequest
}

func (r ApiInterfacesIERC721EnumerableOwnerOfRequest) InterfacesIERC721GetApprovedRequest(interfacesIERC721GetApprovedRequest InterfacesIERC721GetApprovedRequest) ApiInterfacesIERC721EnumerableOwnerOfRequest {
	r.interfacesIERC721GetApprovedRequest = &interfacesIERC721GetApprovedRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableOwnerOfRequest) Execute() (*InterfacesIERC721OwnerOf200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableOwnerOfExecute(r)
}

/*
InterfacesIERC721EnumerableOwnerOf IERC721Enumerable.ownerOf

Read `ownerOf(tokenId)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableOwnerOfRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableOwnerOf(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableOwnerOfRequest {
	return ApiInterfacesIERC721EnumerableOwnerOfRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721OwnerOf200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableOwnerOfExecute(r ApiInterfacesIERC721EnumerableOwnerOfRequest) (*InterfacesIERC721OwnerOf200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721OwnerOf200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableOwnerOf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/ownerOf"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721GetApprovedRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721GetApprovedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721GetApprovedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableSafeTransferFromRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721SafeTransferFromRequest *InterfacesIERC721SafeTransferFromRequest
}

func (r ApiInterfacesIERC721EnumerableSafeTransferFromRequest) InterfacesIERC721SafeTransferFromRequest(interfacesIERC721SafeTransferFromRequest InterfacesIERC721SafeTransferFromRequest) ApiInterfacesIERC721EnumerableSafeTransferFromRequest {
	r.interfacesIERC721SafeTransferFromRequest = &interfacesIERC721SafeTransferFromRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableSafeTransferFromRequest) Execute() (*InterfacesIERC721SafeTransferFrom200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableSafeTransferFromExecute(r)
}

/*
InterfacesIERC721EnumerableSafeTransferFrom IERC721Enumerable.safeTransferFrom

Write `safeTransferFrom(from,to,tokenId,data)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableSafeTransferFromRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableSafeTransferFrom(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableSafeTransferFromRequest {
	return ApiInterfacesIERC721EnumerableSafeTransferFromRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721SafeTransferFrom200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableSafeTransferFromExecute(r ApiInterfacesIERC721EnumerableSafeTransferFromRequest) (*InterfacesIERC721SafeTransferFrom200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721SafeTransferFrom200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableSafeTransferFrom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/write/{address}/safeTransferFrom"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721SafeTransferFromRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721SafeTransferFromRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721SafeTransferFromRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableSetApprovalForAllRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721SetApprovalForAllRequest *InterfacesIERC721SetApprovalForAllRequest
}

func (r ApiInterfacesIERC721EnumerableSetApprovalForAllRequest) InterfacesIERC721SetApprovalForAllRequest(interfacesIERC721SetApprovalForAllRequest InterfacesIERC721SetApprovalForAllRequest) ApiInterfacesIERC721EnumerableSetApprovalForAllRequest {
	r.interfacesIERC721SetApprovalForAllRequest = &interfacesIERC721SetApprovalForAllRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableSetApprovalForAllRequest) Execute() (*InterfacesIERC721SetApprovalForAll200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableSetApprovalForAllExecute(r)
}

/*
InterfacesIERC721EnumerableSetApprovalForAll IERC721Enumerable.setApprovalForAll

Write `setApprovalForAll(operator,_approved)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableSetApprovalForAllRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableSetApprovalForAll(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableSetApprovalForAllRequest {
	return ApiInterfacesIERC721EnumerableSetApprovalForAllRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721SetApprovalForAll200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableSetApprovalForAllExecute(r ApiInterfacesIERC721EnumerableSetApprovalForAllRequest) (*InterfacesIERC721SetApprovalForAll200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721SetApprovalForAll200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableSetApprovalForAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/write/{address}/setApprovalForAll"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721SetApprovalForAllRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721SetApprovalForAllRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721SetApprovalForAllRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableSupportsInterfaceRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC165SupportsInterfaceRequest *InterfacesIERC165SupportsInterfaceRequest
}

func (r ApiInterfacesIERC721EnumerableSupportsInterfaceRequest) InterfacesIERC165SupportsInterfaceRequest(interfacesIERC165SupportsInterfaceRequest InterfacesIERC165SupportsInterfaceRequest) ApiInterfacesIERC721EnumerableSupportsInterfaceRequest {
	r.interfacesIERC165SupportsInterfaceRequest = &interfacesIERC165SupportsInterfaceRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableSupportsInterfaceRequest) Execute() (*InterfacesIERC165SupportsInterface200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableSupportsInterfaceExecute(r)
}

/*
InterfacesIERC721EnumerableSupportsInterface IERC721Enumerable.supportsInterface

Read `supportsInterface(interfaceId)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableSupportsInterfaceRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableSupportsInterface(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableSupportsInterfaceRequest {
	return ApiInterfacesIERC721EnumerableSupportsInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC165SupportsInterface200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableSupportsInterfaceExecute(r ApiInterfacesIERC721EnumerableSupportsInterfaceRequest) (*InterfacesIERC165SupportsInterface200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC165SupportsInterface200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableSupportsInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/supportsInterface"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC165SupportsInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC165SupportsInterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC165SupportsInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableTokenByIndexRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721EnumerableTokenByIndexRequest *InterfacesIERC721EnumerableTokenByIndexRequest
}

func (r ApiInterfacesIERC721EnumerableTokenByIndexRequest) InterfacesIERC721EnumerableTokenByIndexRequest(interfacesIERC721EnumerableTokenByIndexRequest InterfacesIERC721EnumerableTokenByIndexRequest) ApiInterfacesIERC721EnumerableTokenByIndexRequest {
	r.interfacesIERC721EnumerableTokenByIndexRequest = &interfacesIERC721EnumerableTokenByIndexRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableTokenByIndexRequest) Execute() (*InterfacesIERC721EnumerableTokenByIndex200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableTokenByIndexExecute(r)
}

/*
InterfacesIERC721EnumerableTokenByIndex IERC721Enumerable.tokenByIndex

Read `tokenByIndex(index)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableTokenByIndexRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTokenByIndex(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableTokenByIndexRequest {
	return ApiInterfacesIERC721EnumerableTokenByIndexRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721EnumerableTokenByIndex200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTokenByIndexExecute(r ApiInterfacesIERC721EnumerableTokenByIndexRequest) (*InterfacesIERC721EnumerableTokenByIndex200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721EnumerableTokenByIndex200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableTokenByIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/tokenByIndex"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721EnumerableTokenByIndexRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721EnumerableTokenByIndexRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721EnumerableTokenByIndexRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721EnumerableTokenOfOwnerByIndexRequest *InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest
}

func (r ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest) InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest(interfacesIERC721EnumerableTokenOfOwnerByIndexRequest InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest) ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest {
	r.interfacesIERC721EnumerableTokenOfOwnerByIndexRequest = &interfacesIERC721EnumerableTokenOfOwnerByIndexRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest) Execute() (*InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableTokenOfOwnerByIndexExecute(r)
}

/*
InterfacesIERC721EnumerableTokenOfOwnerByIndex IERC721Enumerable.tokenOfOwnerByIndex

Read `tokenOfOwnerByIndex(owner,index)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTokenOfOwnerByIndex(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest {
	return ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTokenOfOwnerByIndexExecute(r ApiInterfacesIERC721EnumerableTokenOfOwnerByIndexRequest) (*InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableTokenOfOwnerByIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/tokenOfOwnerByIndex"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721EnumerableTokenOfOwnerByIndexRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721EnumerableTokenOfOwnerByIndexRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721EnumerableTokenOfOwnerByIndexRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableTotalSupplyRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIBeaconImplementationRequest *InterfacesIBeaconImplementationRequest
}

func (r ApiInterfacesIERC721EnumerableTotalSupplyRequest) InterfacesIBeaconImplementationRequest(interfacesIBeaconImplementationRequest InterfacesIBeaconImplementationRequest) ApiInterfacesIERC721EnumerableTotalSupplyRequest {
	r.interfacesIBeaconImplementationRequest = &interfacesIBeaconImplementationRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableTotalSupplyRequest) Execute() (*InterfacesIERC20TotalSupply200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableTotalSupplyExecute(r)
}

/*
InterfacesIERC721EnumerableTotalSupply IERC721Enumerable.totalSupply

Read `totalSupply()` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableTotalSupplyRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTotalSupply(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableTotalSupplyRequest {
	return ApiInterfacesIERC721EnumerableTotalSupplyRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC20TotalSupply200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTotalSupplyExecute(r ApiInterfacesIERC721EnumerableTotalSupplyRequest) (*InterfacesIERC20TotalSupply200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC20TotalSupply200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableTotalSupply")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/read/{address}/totalSupply"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIBeaconImplementationRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIBeaconImplementationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIBeaconImplementationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721EnumerableTransferFromRequest struct {
	ctx context.Context
	ApiService *IERC721EnumerableApiService
	networkId string
	address string
	interfacesIERC721TransferFromRequest *InterfacesIERC721TransferFromRequest
}

func (r ApiInterfacesIERC721EnumerableTransferFromRequest) InterfacesIERC721TransferFromRequest(interfacesIERC721TransferFromRequest InterfacesIERC721TransferFromRequest) ApiInterfacesIERC721EnumerableTransferFromRequest {
	r.interfacesIERC721TransferFromRequest = &interfacesIERC721TransferFromRequest
	return r
}

func (r ApiInterfacesIERC721EnumerableTransferFromRequest) Execute() (*InterfacesIERC721TransferFrom200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721EnumerableTransferFromExecute(r)
}

/*
InterfacesIERC721EnumerableTransferFrom IERC721Enumerable.transferFrom

Write `transferFrom(from,to,tokenId)` on an instance of `IERC721Enumerable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721EnumerableTransferFromRequest
*/
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTransferFrom(ctx context.Context, networkId string, address string) ApiInterfacesIERC721EnumerableTransferFromRequest {
	return ApiInterfacesIERC721EnumerableTransferFromRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721TransferFrom200Response
func (a *IERC721EnumerableApiService) InterfacesIERC721EnumerableTransferFromExecute(r ApiInterfacesIERC721EnumerableTransferFromRequest) (*InterfacesIERC721TransferFrom200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721TransferFrom200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721EnumerableApiService.InterfacesIERC721EnumerableTransferFrom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Enumerable/write/{address}/transferFrom"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721TransferFromRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721TransferFromRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721TransferFromRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
