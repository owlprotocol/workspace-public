/*
Owl Contract Api

Specification for our API focused on contract interactions

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeployBeaconProxyRequestDeployParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployBeaconProxyRequestDeployParams{}

// DeployBeaconProxyRequestDeployParams struct for DeployBeaconProxyRequestDeployParams
type DeployBeaconProxyRequestDeployParams struct {
	// An ethereum address
	MsgSender *string `json:"msgSender,omitempty"`
	// Salt parameter string to deploy different contracts with identical parameteres (default: 1)
	Salt *string `json:"salt,omitempty"`
	DeploymentMethod string `json:"deploymentMethod"`
	// The address of the beacon, if used in the deployment method
	BeaconAddress *string `json:"beaconAddress,omitempty"`
	// The admin address of the beacon, if a new beacon is deployed
	BeaonAdmin *string `json:"beaonAdmin,omitempty"`
}

// NewDeployBeaconProxyRequestDeployParams instantiates a new DeployBeaconProxyRequestDeployParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployBeaconProxyRequestDeployParams(deploymentMethod string) *DeployBeaconProxyRequestDeployParams {
	this := DeployBeaconProxyRequestDeployParams{}
	var salt string = "0x1"
	this.Salt = &salt
	this.DeploymentMethod = deploymentMethod
	return &this
}

// NewDeployBeaconProxyRequestDeployParamsWithDefaults instantiates a new DeployBeaconProxyRequestDeployParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployBeaconProxyRequestDeployParamsWithDefaults() *DeployBeaconProxyRequestDeployParams {
	this := DeployBeaconProxyRequestDeployParams{}
	var salt string = "0x1"
	this.Salt = &salt
	return &this
}

// GetMsgSender returns the MsgSender field value if set, zero value otherwise.
func (o *DeployBeaconProxyRequestDeployParams) GetMsgSender() string {
	if o == nil || IsNil(o.MsgSender) {
		var ret string
		return ret
	}
	return *o.MsgSender
}

// GetMsgSenderOk returns a tuple with the MsgSender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployBeaconProxyRequestDeployParams) GetMsgSenderOk() (*string, bool) {
	if o == nil || IsNil(o.MsgSender) {
		return nil, false
	}
	return o.MsgSender, true
}

// HasMsgSender returns a boolean if a field has been set.
func (o *DeployBeaconProxyRequestDeployParams) HasMsgSender() bool {
	if o != nil && !IsNil(o.MsgSender) {
		return true
	}

	return false
}

// SetMsgSender gets a reference to the given string and assigns it to the MsgSender field.
func (o *DeployBeaconProxyRequestDeployParams) SetMsgSender(v string) {
	o.MsgSender = &v
}

// GetSalt returns the Salt field value if set, zero value otherwise.
func (o *DeployBeaconProxyRequestDeployParams) GetSalt() string {
	if o == nil || IsNil(o.Salt) {
		var ret string
		return ret
	}
	return *o.Salt
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployBeaconProxyRequestDeployParams) GetSaltOk() (*string, bool) {
	if o == nil || IsNil(o.Salt) {
		return nil, false
	}
	return o.Salt, true
}

// HasSalt returns a boolean if a field has been set.
func (o *DeployBeaconProxyRequestDeployParams) HasSalt() bool {
	if o != nil && !IsNil(o.Salt) {
		return true
	}

	return false
}

// SetSalt gets a reference to the given string and assigns it to the Salt field.
func (o *DeployBeaconProxyRequestDeployParams) SetSalt(v string) {
	o.Salt = &v
}

// GetDeploymentMethod returns the DeploymentMethod field value
func (o *DeployBeaconProxyRequestDeployParams) GetDeploymentMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentMethod
}

// GetDeploymentMethodOk returns a tuple with the DeploymentMethod field value
// and a boolean to check if the value has been set.
func (o *DeployBeaconProxyRequestDeployParams) GetDeploymentMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentMethod, true
}

// SetDeploymentMethod sets field value
func (o *DeployBeaconProxyRequestDeployParams) SetDeploymentMethod(v string) {
	o.DeploymentMethod = v
}

// GetBeaconAddress returns the BeaconAddress field value if set, zero value otherwise.
func (o *DeployBeaconProxyRequestDeployParams) GetBeaconAddress() string {
	if o == nil || IsNil(o.BeaconAddress) {
		var ret string
		return ret
	}
	return *o.BeaconAddress
}

// GetBeaconAddressOk returns a tuple with the BeaconAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployBeaconProxyRequestDeployParams) GetBeaconAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BeaconAddress) {
		return nil, false
	}
	return o.BeaconAddress, true
}

// HasBeaconAddress returns a boolean if a field has been set.
func (o *DeployBeaconProxyRequestDeployParams) HasBeaconAddress() bool {
	if o != nil && !IsNil(o.BeaconAddress) {
		return true
	}

	return false
}

// SetBeaconAddress gets a reference to the given string and assigns it to the BeaconAddress field.
func (o *DeployBeaconProxyRequestDeployParams) SetBeaconAddress(v string) {
	o.BeaconAddress = &v
}

// GetBeaonAdmin returns the BeaonAdmin field value if set, zero value otherwise.
func (o *DeployBeaconProxyRequestDeployParams) GetBeaonAdmin() string {
	if o == nil || IsNil(o.BeaonAdmin) {
		var ret string
		return ret
	}
	return *o.BeaonAdmin
}

// GetBeaonAdminOk returns a tuple with the BeaonAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployBeaconProxyRequestDeployParams) GetBeaonAdminOk() (*string, bool) {
	if o == nil || IsNil(o.BeaonAdmin) {
		return nil, false
	}
	return o.BeaonAdmin, true
}

// HasBeaonAdmin returns a boolean if a field has been set.
func (o *DeployBeaconProxyRequestDeployParams) HasBeaonAdmin() bool {
	if o != nil && !IsNil(o.BeaonAdmin) {
		return true
	}

	return false
}

// SetBeaonAdmin gets a reference to the given string and assigns it to the BeaonAdmin field.
func (o *DeployBeaconProxyRequestDeployParams) SetBeaonAdmin(v string) {
	o.BeaonAdmin = &v
}

func (o DeployBeaconProxyRequestDeployParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployBeaconProxyRequestDeployParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MsgSender) {
		toSerialize["msgSender"] = o.MsgSender
	}
	if !IsNil(o.Salt) {
		toSerialize["salt"] = o.Salt
	}
	toSerialize["deploymentMethod"] = o.DeploymentMethod
	if !IsNil(o.BeaconAddress) {
		toSerialize["beaconAddress"] = o.BeaconAddress
	}
	if !IsNil(o.BeaonAdmin) {
		toSerialize["beaonAdmin"] = o.BeaonAdmin
	}
	return toSerialize, nil
}

type NullableDeployBeaconProxyRequestDeployParams struct {
	value *DeployBeaconProxyRequestDeployParams
	isSet bool
}

func (v NullableDeployBeaconProxyRequestDeployParams) Get() *DeployBeaconProxyRequestDeployParams {
	return v.value
}

func (v *NullableDeployBeaconProxyRequestDeployParams) Set(val *DeployBeaconProxyRequestDeployParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployBeaconProxyRequestDeployParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployBeaconProxyRequestDeployParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployBeaconProxyRequestDeployParams(val *DeployBeaconProxyRequestDeployParams) *NullableDeployBeaconProxyRequestDeployParams {
	return &NullableDeployBeaconProxyRequestDeployParams{value: val, isSet: true}
}

func (v NullableDeployBeaconProxyRequestDeployParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployBeaconProxyRequestDeployParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


