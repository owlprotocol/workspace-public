/*
Owl Contract Api

Specification for our API focused on contract interactions

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IERC1155MetadataURIApiService IERC1155MetadataURIApi service
type IERC1155MetadataURIApiService service

type ApiInterfacesIERC1155MetadataURIBalanceOfRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155BalanceOfRequest *InterfacesIERC1155BalanceOfRequest
}

func (r ApiInterfacesIERC1155MetadataURIBalanceOfRequest) InterfacesIERC1155BalanceOfRequest(interfacesIERC1155BalanceOfRequest InterfacesIERC1155BalanceOfRequest) ApiInterfacesIERC1155MetadataURIBalanceOfRequest {
	r.interfacesIERC1155BalanceOfRequest = &interfacesIERC1155BalanceOfRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURIBalanceOfRequest) Execute() (*InterfacesIERC1155BalanceOf200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURIBalanceOfExecute(r)
}

/*
InterfacesIERC1155MetadataURIBalanceOf IERC1155MetadataURI.balanceOf

Read `balanceOf(account,id)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURIBalanceOfRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIBalanceOf(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURIBalanceOfRequest {
	return ApiInterfacesIERC1155MetadataURIBalanceOfRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155BalanceOf200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIBalanceOfExecute(r ApiInterfacesIERC1155MetadataURIBalanceOfRequest) (*InterfacesIERC1155BalanceOf200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155BalanceOf200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURIBalanceOf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOf"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155BalanceOfRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155BalanceOfRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155BalanceOfRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155BalanceOfBatchRequest *InterfacesIERC1155BalanceOfBatchRequest
}

func (r ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest) InterfacesIERC1155BalanceOfBatchRequest(interfacesIERC1155BalanceOfBatchRequest InterfacesIERC1155BalanceOfBatchRequest) ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest {
	r.interfacesIERC1155BalanceOfBatchRequest = &interfacesIERC1155BalanceOfBatchRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest) Execute() (*InterfacesIERC1155BalanceOfBatch200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURIBalanceOfBatchExecute(r)
}

/*
InterfacesIERC1155MetadataURIBalanceOfBatch IERC1155MetadataURI.balanceOfBatch

Read `balanceOfBatch(accounts,ids)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIBalanceOfBatch(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest {
	return ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155BalanceOfBatch200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIBalanceOfBatchExecute(r ApiInterfacesIERC1155MetadataURIBalanceOfBatchRequest) (*InterfacesIERC1155BalanceOfBatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155BalanceOfBatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURIBalanceOfBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOfBatch"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155BalanceOfBatchRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155BalanceOfBatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155BalanceOfBatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155IsApprovedForAllRequest *InterfacesIERC1155IsApprovedForAllRequest
}

func (r ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest) InterfacesIERC1155IsApprovedForAllRequest(interfacesIERC1155IsApprovedForAllRequest InterfacesIERC1155IsApprovedForAllRequest) ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest {
	r.interfacesIERC1155IsApprovedForAllRequest = &interfacesIERC1155IsApprovedForAllRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest) Execute() (*InterfacesIERC1155IsApprovedForAll200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURIIsApprovedForAllExecute(r)
}

/*
InterfacesIERC1155MetadataURIIsApprovedForAll IERC1155MetadataURI.isApprovedForAll

Read `isApprovedForAll(account,operator)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIIsApprovedForAll(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest {
	return ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155IsApprovedForAll200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIIsApprovedForAllExecute(r ApiInterfacesIERC1155MetadataURIIsApprovedForAllRequest) (*InterfacesIERC1155IsApprovedForAll200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155IsApprovedForAll200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURIIsApprovedForAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/read/{address}/isApprovedForAll"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155IsApprovedForAllRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155IsApprovedForAllRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155IsApprovedForAllRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155SafeBatchTransferFromRequest *InterfacesIERC1155SafeBatchTransferFromRequest
}

func (r ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest) InterfacesIERC1155SafeBatchTransferFromRequest(interfacesIERC1155SafeBatchTransferFromRequest InterfacesIERC1155SafeBatchTransferFromRequest) ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest {
	r.interfacesIERC1155SafeBatchTransferFromRequest = &interfacesIERC1155SafeBatchTransferFromRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest) Execute() (*InterfacesIERC1155SafeBatchTransferFrom200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURISafeBatchTransferFromExecute(r)
}

/*
InterfacesIERC1155MetadataURISafeBatchTransferFrom IERC1155MetadataURI.safeBatchTransferFrom

Write `safeBatchTransferFrom(from,to,ids,amounts,data)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISafeBatchTransferFrom(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest {
	return ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155SafeBatchTransferFrom200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISafeBatchTransferFromExecute(r ApiInterfacesIERC1155MetadataURISafeBatchTransferFromRequest) (*InterfacesIERC1155SafeBatchTransferFrom200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155SafeBatchTransferFrom200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURISafeBatchTransferFrom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeBatchTransferFrom"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155SafeBatchTransferFromRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155SafeBatchTransferFromRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155SafeBatchTransferFromRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURISafeTransferFromRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155SafeTransferFromRequest *InterfacesIERC1155SafeTransferFromRequest
}

func (r ApiInterfacesIERC1155MetadataURISafeTransferFromRequest) InterfacesIERC1155SafeTransferFromRequest(interfacesIERC1155SafeTransferFromRequest InterfacesIERC1155SafeTransferFromRequest) ApiInterfacesIERC1155MetadataURISafeTransferFromRequest {
	r.interfacesIERC1155SafeTransferFromRequest = &interfacesIERC1155SafeTransferFromRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURISafeTransferFromRequest) Execute() (*InterfacesIERC1155SafeTransferFrom200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURISafeTransferFromExecute(r)
}

/*
InterfacesIERC1155MetadataURISafeTransferFrom IERC1155MetadataURI.safeTransferFrom

Write `safeTransferFrom(from,to,id,amount,data)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURISafeTransferFromRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISafeTransferFrom(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURISafeTransferFromRequest {
	return ApiInterfacesIERC1155MetadataURISafeTransferFromRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155SafeTransferFrom200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISafeTransferFromExecute(r ApiInterfacesIERC1155MetadataURISafeTransferFromRequest) (*InterfacesIERC1155SafeTransferFrom200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155SafeTransferFrom200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURISafeTransferFrom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeTransferFrom"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155SafeTransferFromRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155SafeTransferFromRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155SafeTransferFromRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155SetApprovalForAllRequest *InterfacesIERC1155SetApprovalForAllRequest
}

func (r ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest) InterfacesIERC1155SetApprovalForAllRequest(interfacesIERC1155SetApprovalForAllRequest InterfacesIERC1155SetApprovalForAllRequest) ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest {
	r.interfacesIERC1155SetApprovalForAllRequest = &interfacesIERC1155SetApprovalForAllRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest) Execute() (*InterfacesIERC1155SetApprovalForAll200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURISetApprovalForAllExecute(r)
}

/*
InterfacesIERC1155MetadataURISetApprovalForAll IERC1155MetadataURI.setApprovalForAll

Write `setApprovalForAll(operator,approved)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISetApprovalForAll(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest {
	return ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155SetApprovalForAll200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISetApprovalForAllExecute(r ApiInterfacesIERC1155MetadataURISetApprovalForAllRequest) (*InterfacesIERC1155SetApprovalForAll200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155SetApprovalForAll200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURISetApprovalForAll")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/write/{address}/setApprovalForAll"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155SetApprovalForAllRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155SetApprovalForAllRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155SetApprovalForAllRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC165SupportsInterfaceRequest *InterfacesIERC165SupportsInterfaceRequest
}

func (r ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest) InterfacesIERC165SupportsInterfaceRequest(interfacesIERC165SupportsInterfaceRequest InterfacesIERC165SupportsInterfaceRequest) ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest {
	r.interfacesIERC165SupportsInterfaceRequest = &interfacesIERC165SupportsInterfaceRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest) Execute() (*InterfacesIERC165SupportsInterface200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURISupportsInterfaceExecute(r)
}

/*
InterfacesIERC1155MetadataURISupportsInterface IERC1155MetadataURI.supportsInterface

Read `supportsInterface(interfaceId)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISupportsInterface(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest {
	return ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC165SupportsInterface200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURISupportsInterfaceExecute(r ApiInterfacesIERC1155MetadataURISupportsInterfaceRequest) (*InterfacesIERC165SupportsInterface200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC165SupportsInterface200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURISupportsInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/read/{address}/supportsInterface"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC165SupportsInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC165SupportsInterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC165SupportsInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC1155MetadataURIUriRequest struct {
	ctx context.Context
	ApiService *IERC1155MetadataURIApiService
	networkId string
	address string
	interfacesIERC1155MetadataURIUriRequest *InterfacesIERC1155MetadataURIUriRequest
}

func (r ApiInterfacesIERC1155MetadataURIUriRequest) InterfacesIERC1155MetadataURIUriRequest(interfacesIERC1155MetadataURIUriRequest InterfacesIERC1155MetadataURIUriRequest) ApiInterfacesIERC1155MetadataURIUriRequest {
	r.interfacesIERC1155MetadataURIUriRequest = &interfacesIERC1155MetadataURIUriRequest
	return r
}

func (r ApiInterfacesIERC1155MetadataURIUriRequest) Execute() (*InterfacesIERC1155MetadataURIUri200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC1155MetadataURIUriExecute(r)
}

/*
InterfacesIERC1155MetadataURIUri IERC1155MetadataURI.uri

Read `uri(id)` on an instance of `IERC1155MetadataURI`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC1155MetadataURIUriRequest
*/
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIUri(ctx context.Context, networkId string, address string) ApiInterfacesIERC1155MetadataURIUriRequest {
	return ApiInterfacesIERC1155MetadataURIUriRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC1155MetadataURIUri200Response
func (a *IERC1155MetadataURIApiService) InterfacesIERC1155MetadataURIUriExecute(r ApiInterfacesIERC1155MetadataURIUriRequest) (*InterfacesIERC1155MetadataURIUri200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC1155MetadataURIUri200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC1155MetadataURIApiService.InterfacesIERC1155MetadataURIUri")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC1155MetadataURI/read/{address}/uri"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC1155MetadataURIUriRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC1155MetadataURIUriRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC1155MetadataURIUriRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
