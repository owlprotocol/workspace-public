/*
Owl Contract Api

Specification for our API focused on contract interactions

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IChainlinkAnyApiClientApiService IChainlinkAnyApiClientApi service
type IChainlinkAnyApiClientApiService service

type ApiInterfacesIChainlinkAnyApiClientContractURIRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIBeaconImplementationRequest *InterfacesIBeaconImplementationRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientContractURIRequest) InterfacesIBeaconImplementationRequest(interfacesIBeaconImplementationRequest InterfacesIBeaconImplementationRequest) ApiInterfacesIChainlinkAnyApiClientContractURIRequest {
	r.interfacesIBeaconImplementationRequest = &interfacesIBeaconImplementationRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientContractURIRequest) Execute() (*InterfacesIContractURIContractURI200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientContractURIExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientContractURI IChainlinkAnyApiClient.contractURI

Read `contractURI()` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientContractURIRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientContractURI(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientContractURIRequest {
	return ApiInterfacesIChainlinkAnyApiClientContractURIRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIContractURIContractURI200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientContractURIExecute(r ApiInterfacesIChainlinkAnyApiClientContractURIRequest) (*InterfacesIContractURIContractURI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIContractURIContractURI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientContractURI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIBeaconImplementationRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIBeaconImplementationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIBeaconImplementationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIBeaconImplementationRequest *InterfacesIBeaconImplementationRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest) InterfacesIBeaconImplementationRequest(interfacesIBeaconImplementationRequest InterfacesIBeaconImplementationRequest) ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest {
	r.interfacesIBeaconImplementationRequest = &interfacesIBeaconImplementationRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest) Execute() (*InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE

Read `DEFAULT_ADMIN_ROLE()` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest {
	return ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientDEFAULTADMINROLEExecute(r ApiInterfacesIChainlinkAnyApiClientDEFAULTADMINROLERequest) (*InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIBeaconImplementationRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIBeaconImplementationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIBeaconImplementationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientFulfillRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIChainlinkAnyApiClientFulfillRequest *InterfacesIChainlinkAnyApiClientFulfillRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientFulfillRequest) InterfacesIChainlinkAnyApiClientFulfillRequest(interfacesIChainlinkAnyApiClientFulfillRequest InterfacesIChainlinkAnyApiClientFulfillRequest) ApiInterfacesIChainlinkAnyApiClientFulfillRequest {
	r.interfacesIChainlinkAnyApiClientFulfillRequest = &interfacesIChainlinkAnyApiClientFulfillRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientFulfillRequest) Execute() (*InterfacesIChainlinkAnyApiClientFulfill200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientFulfillExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientFulfill IChainlinkAnyApiClient.fulfill

Write `fulfill(reqId,reqResponseData)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientFulfillRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientFulfill(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientFulfillRequest {
	return ApiInterfacesIChainlinkAnyApiClientFulfillRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIChainlinkAnyApiClientFulfill200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientFulfillExecute(r ApiInterfacesIChainlinkAnyApiClientFulfillRequest) (*InterfacesIChainlinkAnyApiClientFulfill200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIChainlinkAnyApiClientFulfill200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientFulfill")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIChainlinkAnyApiClientFulfillRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIChainlinkAnyApiClientFulfillRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIChainlinkAnyApiClientFulfillRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIAccessControlGetRoleAdminRequest *InterfacesIAccessControlGetRoleAdminRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest) InterfacesIAccessControlGetRoleAdminRequest(interfacesIAccessControlGetRoleAdminRequest InterfacesIAccessControlGetRoleAdminRequest) ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest {
	r.interfacesIAccessControlGetRoleAdminRequest = &interfacesIAccessControlGetRoleAdminRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest) Execute() (*InterfacesIAccessControlGetRoleAdmin200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientGetRoleAdminExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientGetRoleAdmin IChainlinkAnyApiClient.getRoleAdmin

Read `getRoleAdmin(role)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientGetRoleAdmin(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest {
	return ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIAccessControlGetRoleAdmin200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientGetRoleAdminExecute(r ApiInterfacesIChainlinkAnyApiClientGetRoleAdminRequest) (*InterfacesIAccessControlGetRoleAdmin200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIAccessControlGetRoleAdmin200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientGetRoleAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIAccessControlGetRoleAdminRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIAccessControlGetRoleAdminRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIAccessControlGetRoleAdminRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIAccessControlGrantRoleRequest *InterfacesIAccessControlGrantRoleRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest) InterfacesIAccessControlGrantRoleRequest(interfacesIAccessControlGrantRoleRequest InterfacesIAccessControlGrantRoleRequest) ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest {
	r.interfacesIAccessControlGrantRoleRequest = &interfacesIAccessControlGrantRoleRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest) Execute() (*InterfacesIAccessControlGrantRole200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientGrantRoleExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientGrantRole IChainlinkAnyApiClient.grantRole

Write `grantRole(role,account)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientGrantRole(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest {
	return ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIAccessControlGrantRole200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientGrantRoleExecute(r ApiInterfacesIChainlinkAnyApiClientGrantRoleRequest) (*InterfacesIAccessControlGrantRole200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIAccessControlGrantRole200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientGrantRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIAccessControlGrantRoleRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIAccessControlGrantRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIAccessControlGrantRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientHasRoleRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIAccessControlGrantRoleRequest *InterfacesIAccessControlGrantRoleRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientHasRoleRequest) InterfacesIAccessControlGrantRoleRequest(interfacesIAccessControlGrantRoleRequest InterfacesIAccessControlGrantRoleRequest) ApiInterfacesIChainlinkAnyApiClientHasRoleRequest {
	r.interfacesIAccessControlGrantRoleRequest = &interfacesIAccessControlGrantRoleRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientHasRoleRequest) Execute() (*InterfacesIAccessControlHasRole200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientHasRoleExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientHasRole IChainlinkAnyApiClient.hasRole

Read `hasRole(role,account)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientHasRoleRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientHasRole(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientHasRoleRequest {
	return ApiInterfacesIChainlinkAnyApiClientHasRoleRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIAccessControlHasRole200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientHasRoleExecute(r ApiInterfacesIChainlinkAnyApiClientHasRoleRequest) (*InterfacesIAccessControlHasRole200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIAccessControlHasRole200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientHasRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIAccessControlGrantRoleRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIAccessControlGrantRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIAccessControlGrantRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIAccessControlGrantRoleRequest *InterfacesIAccessControlGrantRoleRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest) InterfacesIAccessControlGrantRoleRequest(interfacesIAccessControlGrantRoleRequest InterfacesIAccessControlGrantRoleRequest) ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest {
	r.interfacesIAccessControlGrantRoleRequest = &interfacesIAccessControlGrantRoleRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest) Execute() (*InterfacesIAccessControlGrantRole200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientRenounceRoleExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientRenounceRole IChainlinkAnyApiClient.renounceRole

Write `renounceRole(role,account)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRenounceRole(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest {
	return ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIAccessControlGrantRole200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRenounceRoleExecute(r ApiInterfacesIChainlinkAnyApiClientRenounceRoleRequest) (*InterfacesIAccessControlGrantRole200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIAccessControlGrantRole200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientRenounceRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIAccessControlGrantRoleRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIAccessControlGrantRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIAccessControlGrantRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientRequestRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIChainlinkAnyApiClientRequestRequest *InterfacesIChainlinkAnyApiClientRequestRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientRequestRequest) InterfacesIChainlinkAnyApiClientRequestRequest(interfacesIChainlinkAnyApiClientRequestRequest InterfacesIChainlinkAnyApiClientRequestRequest) ApiInterfacesIChainlinkAnyApiClientRequestRequest {
	r.interfacesIChainlinkAnyApiClientRequestRequest = &interfacesIChainlinkAnyApiClientRequestRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientRequestRequest) Execute() (*InterfacesIChainlinkAnyApiClientRequest200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientRequestExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientRequest IChainlinkAnyApiClient.request

Write `request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientRequestRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRequest(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientRequestRequest {
	return ApiInterfacesIChainlinkAnyApiClientRequestRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIChainlinkAnyApiClientRequest200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRequestExecute(r ApiInterfacesIChainlinkAnyApiClientRequestRequest) (*InterfacesIChainlinkAnyApiClientRequest200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIChainlinkAnyApiClientRequest200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIChainlinkAnyApiClientRequestRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIChainlinkAnyApiClientRequestRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIChainlinkAnyApiClientRequestRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientRequestsRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIChainlinkAnyApiClientRequestsRequest *InterfacesIChainlinkAnyApiClientRequestsRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientRequestsRequest) InterfacesIChainlinkAnyApiClientRequestsRequest(interfacesIChainlinkAnyApiClientRequestsRequest InterfacesIChainlinkAnyApiClientRequestsRequest) ApiInterfacesIChainlinkAnyApiClientRequestsRequest {
	r.interfacesIChainlinkAnyApiClientRequestsRequest = &interfacesIChainlinkAnyApiClientRequestsRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientRequestsRequest) Execute() (*InterfacesIChainlinkAnyApiClientRequests200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientRequestsExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientRequests IChainlinkAnyApiClient.requests

Read `requests()` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientRequestsRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRequests(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientRequestsRequest {
	return ApiInterfacesIChainlinkAnyApiClientRequestsRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIChainlinkAnyApiClientRequests200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRequestsExecute(r ApiInterfacesIChainlinkAnyApiClientRequestsRequest) (*InterfacesIChainlinkAnyApiClientRequests200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIChainlinkAnyApiClientRequests200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIChainlinkAnyApiClientRequestsRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIChainlinkAnyApiClientRequestsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIChainlinkAnyApiClientRequestsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIAccessControlGrantRoleRequest *InterfacesIAccessControlGrantRoleRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest) InterfacesIAccessControlGrantRoleRequest(interfacesIAccessControlGrantRoleRequest InterfacesIAccessControlGrantRoleRequest) ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest {
	r.interfacesIAccessControlGrantRoleRequest = &interfacesIAccessControlGrantRoleRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest) Execute() (*InterfacesIAccessControlGrantRole200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientRevokeRoleExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientRevokeRole IChainlinkAnyApiClient.revokeRole

Write `revokeRole(role,account)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRevokeRole(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest {
	return ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIAccessControlGrantRole200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientRevokeRoleExecute(r ApiInterfacesIChainlinkAnyApiClientRevokeRoleRequest) (*InterfacesIAccessControlGrantRole200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIAccessControlGrantRole200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientRevokeRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIAccessControlGrantRoleRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIAccessControlGrantRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIAccessControlGrantRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIContractURISetContractURIRequest *InterfacesIContractURISetContractURIRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest) InterfacesIContractURISetContractURIRequest(interfacesIContractURISetContractURIRequest InterfacesIContractURISetContractURIRequest) ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest {
	r.interfacesIContractURISetContractURIRequest = &interfacesIContractURISetContractURIRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest) Execute() (*InterfacesIContractURISetContractURI200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientSetContractURIExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientSetContractURI IChainlinkAnyApiClient.setContractURI

Write `setContractURI(uri)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientSetContractURI(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest {
	return ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIContractURISetContractURI200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientSetContractURIExecute(r ApiInterfacesIChainlinkAnyApiClientSetContractURIRequest) (*InterfacesIContractURISetContractURI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIContractURISetContractURI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientSetContractURI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIContractURISetContractURIRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIContractURISetContractURIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIContractURISetContractURIRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIERC165SupportsInterfaceRequest *InterfacesIERC165SupportsInterfaceRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest) InterfacesIERC165SupportsInterfaceRequest(interfacesIERC165SupportsInterfaceRequest InterfacesIERC165SupportsInterfaceRequest) ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest {
	r.interfacesIERC165SupportsInterfaceRequest = &interfacesIERC165SupportsInterfaceRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest) Execute() (*InterfacesIERC165SupportsInterface200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientSupportsInterfaceExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientSupportsInterface IChainlinkAnyApiClient.supportsInterface

Read `supportsInterface(interfaceId)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientSupportsInterface(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest {
	return ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC165SupportsInterface200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientSupportsInterfaceExecute(r ApiInterfacesIChainlinkAnyApiClientSupportsInterfaceRequest) (*InterfacesIERC165SupportsInterface200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC165SupportsInterface200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientSupportsInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC165SupportsInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC165SupportsInterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC165SupportsInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientVersionRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIBeaconImplementationRequest *InterfacesIBeaconImplementationRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientVersionRequest) InterfacesIBeaconImplementationRequest(interfacesIBeaconImplementationRequest InterfacesIBeaconImplementationRequest) ApiInterfacesIChainlinkAnyApiClientVersionRequest {
	r.interfacesIBeaconImplementationRequest = &interfacesIBeaconImplementationRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientVersionRequest) Execute() (*InterfacesIContractURIContractURI200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientVersionExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientVersion IChainlinkAnyApiClient.version

Read `version()` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientVersionRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientVersion(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientVersionRequest {
	return ApiInterfacesIChainlinkAnyApiClientVersionRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIContractURIContractURI200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientVersionExecute(r ApiInterfacesIChainlinkAnyApiClientVersionRequest) (*InterfacesIContractURIContractURI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIContractURIContractURI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIBeaconImplementationRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIBeaconImplementationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIBeaconImplementationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest struct {
	ctx context.Context
	ApiService *IChainlinkAnyApiClientApiService
	networkId string
	address string
	interfacesIERC20TransferRequest *InterfacesIERC20TransferRequest
}

func (r ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest) InterfacesIERC20TransferRequest(interfacesIERC20TransferRequest InterfacesIERC20TransferRequest) ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest {
	r.interfacesIERC20TransferRequest = &interfacesIERC20TransferRequest
	return r
}

func (r ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest) Execute() (*InterfacesIERC20Transfer200Response, *http.Response, error) {
	return r.ApiService.InterfacesIChainlinkAnyApiClientWithdrawLinkExecute(r)
}

/*
InterfacesIChainlinkAnyApiClientWithdrawLink IChainlinkAnyApiClient.withdrawLink

Write `withdrawLink(to,amount)` on an instance of `IChainlinkAnyApiClient`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest
*/
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientWithdrawLink(ctx context.Context, networkId string, address string) ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest {
	return ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC20Transfer200Response
func (a *IChainlinkAnyApiClientApiService) InterfacesIChainlinkAnyApiClientWithdrawLinkExecute(r ApiInterfacesIChainlinkAnyApiClientWithdrawLinkRequest) (*InterfacesIERC20Transfer200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC20Transfer200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IChainlinkAnyApiClientApiService.InterfacesIChainlinkAnyApiClientWithdrawLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC20TransferRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC20TransferRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC20TransferRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
