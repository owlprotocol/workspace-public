/*
Owl Contract Api

Specification for our API focused on contract interactions

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IERC721MintableApiService IERC721MintableApi service
type IERC721MintableApiService service

type ApiInterfacesIERC721MintableMintRequest struct {
	ctx context.Context
	ApiService *IERC721MintableApiService
	networkId string
	address string
	interfacesIERC721ApproveRequest *InterfacesIERC721ApproveRequest
}

func (r ApiInterfacesIERC721MintableMintRequest) InterfacesIERC721ApproveRequest(interfacesIERC721ApproveRequest InterfacesIERC721ApproveRequest) ApiInterfacesIERC721MintableMintRequest {
	r.interfacesIERC721ApproveRequest = &interfacesIERC721ApproveRequest
	return r
}

func (r ApiInterfacesIERC721MintableMintRequest) Execute() (*InterfacesIERC721Approve200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721MintableMintExecute(r)
}

/*
InterfacesIERC721MintableMint IERC721Mintable.mint

Write `mint(to,tokenId)` on an instance of `IERC721Mintable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721MintableMintRequest
*/
func (a *IERC721MintableApiService) InterfacesIERC721MintableMint(ctx context.Context, networkId string, address string) ApiInterfacesIERC721MintableMintRequest {
	return ApiInterfacesIERC721MintableMintRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721Approve200Response
func (a *IERC721MintableApiService) InterfacesIERC721MintableMintExecute(r ApiInterfacesIERC721MintableMintRequest) (*InterfacesIERC721Approve200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721Approve200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721MintableApiService.InterfacesIERC721MintableMint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Mintable/write/{address}/mint"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721ApproveRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721ApproveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721ApproveRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721MintableMintBatchRequest struct {
	ctx context.Context
	ApiService *IERC721MintableApiService
	networkId string
	address string
	interfacesIERC721MintableMintBatchRequest *InterfacesIERC721MintableMintBatchRequest
}

func (r ApiInterfacesIERC721MintableMintBatchRequest) InterfacesIERC721MintableMintBatchRequest(interfacesIERC721MintableMintBatchRequest InterfacesIERC721MintableMintBatchRequest) ApiInterfacesIERC721MintableMintBatchRequest {
	r.interfacesIERC721MintableMintBatchRequest = &interfacesIERC721MintableMintBatchRequest
	return r
}

func (r ApiInterfacesIERC721MintableMintBatchRequest) Execute() (*InterfacesIERC721MintableMintBatch200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721MintableMintBatchExecute(r)
}

/*
InterfacesIERC721MintableMintBatch IERC721Mintable.mintBatch

Write `mintBatch(to,tokenId)` on an instance of `IERC721Mintable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721MintableMintBatchRequest
*/
func (a *IERC721MintableApiService) InterfacesIERC721MintableMintBatch(ctx context.Context, networkId string, address string) ApiInterfacesIERC721MintableMintBatchRequest {
	return ApiInterfacesIERC721MintableMintBatchRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721MintableMintBatch200Response
func (a *IERC721MintableApiService) InterfacesIERC721MintableMintBatchExecute(r ApiInterfacesIERC721MintableMintBatchRequest) (*InterfacesIERC721MintableMintBatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721MintableMintBatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721MintableApiService.InterfacesIERC721MintableMintBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Mintable/write/{address}/mintBatch"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721MintableMintBatchRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721MintableMintBatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721MintableMintBatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721MintableSafeMintRequest struct {
	ctx context.Context
	ApiService *IERC721MintableApiService
	networkId string
	address string
	interfacesIERC721ApproveRequest *InterfacesIERC721ApproveRequest
}

func (r ApiInterfacesIERC721MintableSafeMintRequest) InterfacesIERC721ApproveRequest(interfacesIERC721ApproveRequest InterfacesIERC721ApproveRequest) ApiInterfacesIERC721MintableSafeMintRequest {
	r.interfacesIERC721ApproveRequest = &interfacesIERC721ApproveRequest
	return r
}

func (r ApiInterfacesIERC721MintableSafeMintRequest) Execute() (*InterfacesIERC721Approve200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721MintableSafeMintExecute(r)
}

/*
InterfacesIERC721MintableSafeMint IERC721Mintable.safeMint

Write `safeMint(to,tokenId)` on an instance of `IERC721Mintable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721MintableSafeMintRequest
*/
func (a *IERC721MintableApiService) InterfacesIERC721MintableSafeMint(ctx context.Context, networkId string, address string) ApiInterfacesIERC721MintableSafeMintRequest {
	return ApiInterfacesIERC721MintableSafeMintRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721Approve200Response
func (a *IERC721MintableApiService) InterfacesIERC721MintableSafeMintExecute(r ApiInterfacesIERC721MintableSafeMintRequest) (*InterfacesIERC721Approve200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721Approve200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721MintableApiService.InterfacesIERC721MintableSafeMint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Mintable/write/{address}/safeMint"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721ApproveRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721ApproveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721ApproveRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInterfacesIERC721MintableSafeMintBatchRequest struct {
	ctx context.Context
	ApiService *IERC721MintableApiService
	networkId string
	address string
	interfacesIERC721MintableMintBatchRequest *InterfacesIERC721MintableMintBatchRequest
}

func (r ApiInterfacesIERC721MintableSafeMintBatchRequest) InterfacesIERC721MintableMintBatchRequest(interfacesIERC721MintableMintBatchRequest InterfacesIERC721MintableMintBatchRequest) ApiInterfacesIERC721MintableSafeMintBatchRequest {
	r.interfacesIERC721MintableMintBatchRequest = &interfacesIERC721MintableMintBatchRequest
	return r
}

func (r ApiInterfacesIERC721MintableSafeMintBatchRequest) Execute() (*InterfacesIERC721MintableMintBatch200Response, *http.Response, error) {
	return r.ApiService.InterfacesIERC721MintableSafeMintBatchExecute(r)
}

/*
InterfacesIERC721MintableSafeMintBatch IERC721Mintable.safeMintBatch

Write `safeMintBatch(to,tokenId)` on an instance of `IERC721Mintable`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkId The network id
 @param address An ethereum address
 @return ApiInterfacesIERC721MintableSafeMintBatchRequest
*/
func (a *IERC721MintableApiService) InterfacesIERC721MintableSafeMintBatch(ctx context.Context, networkId string, address string) ApiInterfacesIERC721MintableSafeMintBatchRequest {
	return ApiInterfacesIERC721MintableSafeMintBatchRequest{
		ApiService: a,
		ctx: ctx,
		networkId: networkId,
		address: address,
	}
}

// Execute executes the request
//  @return InterfacesIERC721MintableMintBatch200Response
func (a *IERC721MintableApiService) InterfacesIERC721MintableSafeMintBatchExecute(r ApiInterfacesIERC721MintableSafeMintBatchRequest) (*InterfacesIERC721MintableMintBatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfacesIERC721MintableMintBatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IERC721MintableApiService.InterfacesIERC721MintableSafeMintBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{networkId}/interface/IERC721Mintable/write/{address}/safeMintBatch"
	localVarPath = strings.Replace(localVarPath, "{"+"networkId"+"}", url.PathEscape(parameterValueToString(r.networkId, "networkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfacesIERC721MintableMintBatchRequest == nil {
		return localVarReturnValue, nil, reportError("interfacesIERC721MintableMintBatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfacesIERC721MintableMintBatchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeployBeaconProxyDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
