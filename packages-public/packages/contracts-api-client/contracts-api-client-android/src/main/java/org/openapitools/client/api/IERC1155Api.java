/**
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIERC1155BalanceOf200Response;
import org.openapitools.client.model.InterfacesIERC1155BalanceOfBatch200Response;
import org.openapitools.client.model.InterfacesIERC1155BalanceOfBatchRequest;
import org.openapitools.client.model.InterfacesIERC1155BalanceOfRequest;
import org.openapitools.client.model.InterfacesIERC1155IsApprovedForAll200Response;
import org.openapitools.client.model.InterfacesIERC1155IsApprovedForAllRequest;
import org.openapitools.client.model.InterfacesIERC1155SafeBatchTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC1155SafeBatchTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC1155SafeTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC1155SafeTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC1155SetApprovalForAll200Response;
import org.openapitools.client.model.InterfacesIERC1155SetApprovalForAllRequest;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IERC1155Api {
  String basePath = "https://17a0-195-175-28-162.ngrok-free.app/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * IERC1155.balanceOf
  * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1155BalanceOfRequest 
   * @return InterfacesIERC1155BalanceOf200Response
  */
  public InterfacesIERC1155BalanceOf200Response interfacesIERC1155BalanceOf (String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1155BalanceOfRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOf",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOf"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155BalanceOf",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155BalanceOf"));
    }
    // verify the required parameter 'interfacesIERC1155BalanceOfRequest' is set
    if (interfacesIERC1155BalanceOfRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155BalanceOfRequest' when calling interfacesIERC1155BalanceOf",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155BalanceOfRequest' when calling interfacesIERC1155BalanceOf"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/balanceOf".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1155BalanceOf200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1155BalanceOf200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.balanceOf
   * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1155BalanceOfRequest 
  */
  public void interfacesIERC1155BalanceOf (String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, final Response.Listener<InterfacesIERC1155BalanceOf200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1155BalanceOfRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOf",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOf"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155BalanceOf",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155BalanceOf"));
    }
    // verify the required parameter 'interfacesIERC1155BalanceOfRequest' is set
    if (interfacesIERC1155BalanceOfRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155BalanceOfRequest' when calling interfacesIERC1155BalanceOf",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155BalanceOfRequest' when calling interfacesIERC1155BalanceOf"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/balanceOf".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1155BalanceOf200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1155BalanceOf200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1155.balanceOfBatch
  * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1155BalanceOfBatchRequest 
   * @return InterfacesIERC1155BalanceOfBatch200Response
  */
  public InterfacesIERC1155BalanceOfBatch200Response interfacesIERC1155BalanceOfBatch (String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1155BalanceOfBatchRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOfBatch",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOfBatch"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155BalanceOfBatch",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155BalanceOfBatch"));
    }
    // verify the required parameter 'interfacesIERC1155BalanceOfBatchRequest' is set
    if (interfacesIERC1155BalanceOfBatchRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling interfacesIERC1155BalanceOfBatch",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling interfacesIERC1155BalanceOfBatch"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/balanceOfBatch".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1155BalanceOfBatch200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1155BalanceOfBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.balanceOfBatch
   * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1155BalanceOfBatchRequest 
  */
  public void interfacesIERC1155BalanceOfBatch (String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, final Response.Listener<InterfacesIERC1155BalanceOfBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1155BalanceOfBatchRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOfBatch",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOfBatch"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155BalanceOfBatch",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155BalanceOfBatch"));
    }
    // verify the required parameter 'interfacesIERC1155BalanceOfBatchRequest' is set
    if (interfacesIERC1155BalanceOfBatchRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling interfacesIERC1155BalanceOfBatch",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling interfacesIERC1155BalanceOfBatch"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/balanceOfBatch".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1155BalanceOfBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1155BalanceOfBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1155.isApprovedForAll
  * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1155IsApprovedForAllRequest 
   * @return InterfacesIERC1155IsApprovedForAll200Response
  */
  public InterfacesIERC1155IsApprovedForAll200Response interfacesIERC1155IsApprovedForAll (String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1155IsApprovedForAllRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155IsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155IsApprovedForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155IsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155IsApprovedForAll"));
    }
    // verify the required parameter 'interfacesIERC1155IsApprovedForAllRequest' is set
    if (interfacesIERC1155IsApprovedForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling interfacesIERC1155IsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling interfacesIERC1155IsApprovedForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/isApprovedForAll".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1155IsApprovedForAll200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1155IsApprovedForAll200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.isApprovedForAll
   * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1155IsApprovedForAllRequest 
  */
  public void interfacesIERC1155IsApprovedForAll (String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, final Response.Listener<InterfacesIERC1155IsApprovedForAll200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1155IsApprovedForAllRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155IsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155IsApprovedForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155IsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155IsApprovedForAll"));
    }
    // verify the required parameter 'interfacesIERC1155IsApprovedForAllRequest' is set
    if (interfacesIERC1155IsApprovedForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling interfacesIERC1155IsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling interfacesIERC1155IsApprovedForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/isApprovedForAll".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1155IsApprovedForAll200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1155IsApprovedForAll200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1155.safeBatchTransferFrom
  * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1155SafeBatchTransferFromRequest 
   * @return InterfacesIERC1155SafeBatchTransferFrom200Response
  */
  public InterfacesIERC1155SafeBatchTransferFrom200Response interfacesIERC1155SafeBatchTransferFrom (String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1155SafeBatchTransferFromRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SafeBatchTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SafeBatchTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SafeBatchTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SafeBatchTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' is set
    if (interfacesIERC1155SafeBatchTransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling interfacesIERC1155SafeBatchTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling interfacesIERC1155SafeBatchTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/write/{address}/safeBatchTransferFrom".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1155SafeBatchTransferFrom200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1155SafeBatchTransferFrom200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.safeBatchTransferFrom
   * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1155SafeBatchTransferFromRequest 
  */
  public void interfacesIERC1155SafeBatchTransferFrom (String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, final Response.Listener<InterfacesIERC1155SafeBatchTransferFrom200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1155SafeBatchTransferFromRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SafeBatchTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SafeBatchTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SafeBatchTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SafeBatchTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' is set
    if (interfacesIERC1155SafeBatchTransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling interfacesIERC1155SafeBatchTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling interfacesIERC1155SafeBatchTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/write/{address}/safeBatchTransferFrom".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1155SafeBatchTransferFrom200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1155SafeBatchTransferFrom200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1155.safeTransferFrom
  * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1155SafeTransferFromRequest 
   * @return InterfacesIERC1155SafeTransferFrom200Response
  */
  public InterfacesIERC1155SafeTransferFrom200Response interfacesIERC1155SafeTransferFrom (String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1155SafeTransferFromRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SafeTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SafeTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC1155SafeTransferFromRequest' is set
    if (interfacesIERC1155SafeTransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling interfacesIERC1155SafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling interfacesIERC1155SafeTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/write/{address}/safeTransferFrom".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1155SafeTransferFrom200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1155SafeTransferFrom200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.safeTransferFrom
   * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1155SafeTransferFromRequest 
  */
  public void interfacesIERC1155SafeTransferFrom (String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, final Response.Listener<InterfacesIERC1155SafeTransferFrom200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1155SafeTransferFromRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SafeTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SafeTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC1155SafeTransferFromRequest' is set
    if (interfacesIERC1155SafeTransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling interfacesIERC1155SafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling interfacesIERC1155SafeTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/write/{address}/safeTransferFrom".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1155SafeTransferFrom200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1155SafeTransferFrom200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1155.setApprovalForAll
  * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1155SetApprovalForAllRequest 
   * @return InterfacesIERC1155SetApprovalForAll200Response
  */
  public InterfacesIERC1155SetApprovalForAll200Response interfacesIERC1155SetApprovalForAll (String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1155SetApprovalForAllRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SetApprovalForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SetApprovalForAll"));
    }
    // verify the required parameter 'interfacesIERC1155SetApprovalForAllRequest' is set
    if (interfacesIERC1155SetApprovalForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling interfacesIERC1155SetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling interfacesIERC1155SetApprovalForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/write/{address}/setApprovalForAll".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1155SetApprovalForAll200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1155SetApprovalForAll200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.setApprovalForAll
   * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1155SetApprovalForAllRequest 
  */
  public void interfacesIERC1155SetApprovalForAll (String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, final Response.Listener<InterfacesIERC1155SetApprovalForAll200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1155SetApprovalForAllRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SetApprovalForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SetApprovalForAll"));
    }
    // verify the required parameter 'interfacesIERC1155SetApprovalForAllRequest' is set
    if (interfacesIERC1155SetApprovalForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling interfacesIERC1155SetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling interfacesIERC1155SetApprovalForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/write/{address}/setApprovalForAll".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1155SetApprovalForAll200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1155SetApprovalForAll200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1155.supportsInterface
  * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC165SupportsInterfaceRequest 
   * @return InterfacesIERC165SupportsInterface200Response
  */
  public InterfacesIERC165SupportsInterface200Response interfacesIERC1155SupportsInterface (String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC165SupportsInterfaceRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SupportsInterface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SupportsInterface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SupportsInterface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SupportsInterface"));
    }
    // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
    if (interfacesIERC165SupportsInterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC1155SupportsInterface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC1155SupportsInterface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/supportsInterface".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC165SupportsInterface200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC165SupportsInterface200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1155.supportsInterface
   * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC165SupportsInterfaceRequest 
  */
  public void interfacesIERC1155SupportsInterface (String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final Response.Listener<InterfacesIERC165SupportsInterface200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC165SupportsInterfaceRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1155SupportsInterface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1155SupportsInterface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1155SupportsInterface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1155SupportsInterface"));
    }
    // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
    if (interfacesIERC165SupportsInterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC1155SupportsInterface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC1155SupportsInterface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1155/read/{address}/supportsInterface".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC165SupportsInterface200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC165SupportsInterface200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
