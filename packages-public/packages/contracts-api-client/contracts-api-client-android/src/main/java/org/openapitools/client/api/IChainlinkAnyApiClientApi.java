/**
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIAccessControlGetRoleAdmin200Response;
import org.openapitools.client.model.InterfacesIAccessControlGetRoleAdminRequest;
import org.openapitools.client.model.InterfacesIAccessControlGrantRole200Response;
import org.openapitools.client.model.InterfacesIAccessControlGrantRoleRequest;
import org.openapitools.client.model.InterfacesIAccessControlHasRole200Response;
import org.openapitools.client.model.InterfacesIBeaconImplementationRequest;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientFulfill200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientFulfillRequest;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequest200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequestRequest;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequests200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequestsRequest;
import org.openapitools.client.model.InterfacesIContractURIContractURI200Response;
import org.openapitools.client.model.InterfacesIContractURISetContractURI200Response;
import org.openapitools.client.model.InterfacesIContractURISetContractURIRequest;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;
import org.openapitools.client.model.InterfacesIERC20Transfer200Response;
import org.openapitools.client.model.InterfacesIERC20TransferRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IChainlinkAnyApiClientApi {
  String basePath = "https://17a0-195-175-28-162.ngrok-free.app/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * IChainlinkAnyApiClient.contractURI
  * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconImplementationRequest 
   * @return InterfacesIContractURIContractURI200Response
  */
  public InterfacesIContractURIContractURI200Response interfacesIChainlinkAnyApiClientContractURI (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconImplementationRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientContractURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientContractURI"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientContractURI",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientContractURI"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientContractURI",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientContractURI"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIContractURIContractURI200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.contractURI
   * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconImplementationRequest 
  */
  public void interfacesIChainlinkAnyApiClientContractURI (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final Response.Listener<InterfacesIContractURIContractURI200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconImplementationRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientContractURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientContractURI"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientContractURI",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientContractURI"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientContractURI",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientContractURI"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIContractURIContractURI200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
  * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconImplementationRequest 
   * @return InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
  */
  public InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response interfacesIChainlinkAnyApiClientDEFAULTADMINROLE (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconImplementationRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
   * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconImplementationRequest 
  */
  public void interfacesIChainlinkAnyApiClientDEFAULTADMINROLE (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final Response.Listener<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconImplementationRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.fulfill
  * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIChainlinkAnyApiClientFulfillRequest 
   * @return InterfacesIChainlinkAnyApiClientFulfill200Response
  */
  public InterfacesIChainlinkAnyApiClientFulfill200Response interfacesIChainlinkAnyApiClientFulfill (String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIChainlinkAnyApiClientFulfillRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientFulfill",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientFulfill"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientFulfill",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientFulfill"));
    }
    // verify the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' is set
    if (interfacesIChainlinkAnyApiClientFulfillRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling interfacesIChainlinkAnyApiClientFulfill",
        new ApiException(400, "Missing the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling interfacesIChainlinkAnyApiClientFulfill"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIChainlinkAnyApiClientFulfill200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIChainlinkAnyApiClientFulfill200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.fulfill
   * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIChainlinkAnyApiClientFulfillRequest 
  */
  public void interfacesIChainlinkAnyApiClientFulfill (String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, final Response.Listener<InterfacesIChainlinkAnyApiClientFulfill200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIChainlinkAnyApiClientFulfillRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientFulfill",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientFulfill"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientFulfill",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientFulfill"));
    }
    // verify the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' is set
    if (interfacesIChainlinkAnyApiClientFulfillRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling interfacesIChainlinkAnyApiClientFulfill",
        new ApiException(400, "Missing the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling interfacesIChainlinkAnyApiClientFulfill"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIChainlinkAnyApiClientFulfill200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIChainlinkAnyApiClientFulfill200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.getRoleAdmin
  * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIAccessControlGetRoleAdminRequest 
   * @return InterfacesIAccessControlGetRoleAdmin200Response
  */
  public InterfacesIAccessControlGetRoleAdmin200Response interfacesIChainlinkAnyApiClientGetRoleAdmin (String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIAccessControlGetRoleAdminRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin"));
    }
    // verify the required parameter 'interfacesIAccessControlGetRoleAdminRequest' is set
    if (interfacesIAccessControlGetRoleAdminRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIAccessControlGetRoleAdmin200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIAccessControlGetRoleAdmin200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.getRoleAdmin
   * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIAccessControlGetRoleAdminRequest 
  */
  public void interfacesIChainlinkAnyApiClientGetRoleAdmin (String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, final Response.Listener<InterfacesIAccessControlGetRoleAdmin200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIAccessControlGetRoleAdminRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin"));
    }
    // verify the required parameter 'interfacesIAccessControlGetRoleAdminRequest' is set
    if (interfacesIAccessControlGetRoleAdminRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIAccessControlGetRoleAdmin200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIAccessControlGetRoleAdmin200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.grantRole
  * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIAccessControlGrantRoleRequest 
   * @return InterfacesIAccessControlGrantRole200Response
  */
  public InterfacesIAccessControlGrantRole200Response interfacesIChainlinkAnyApiClientGrantRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIAccessControlGrantRoleRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGrantRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGrantRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGrantRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGrantRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientGrantRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientGrantRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIAccessControlGrantRole200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIAccessControlGrantRole200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.grantRole
   * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIAccessControlGrantRoleRequest 
  */
  public void interfacesIChainlinkAnyApiClientGrantRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final Response.Listener<InterfacesIAccessControlGrantRole200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIAccessControlGrantRoleRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGrantRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGrantRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGrantRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGrantRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientGrantRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientGrantRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIAccessControlGrantRole200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIAccessControlGrantRole200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.hasRole
  * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIAccessControlGrantRoleRequest 
   * @return InterfacesIAccessControlHasRole200Response
  */
  public InterfacesIAccessControlHasRole200Response interfacesIChainlinkAnyApiClientHasRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIAccessControlGrantRoleRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientHasRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientHasRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientHasRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientHasRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientHasRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientHasRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIAccessControlHasRole200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIAccessControlHasRole200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.hasRole
   * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIAccessControlGrantRoleRequest 
  */
  public void interfacesIChainlinkAnyApiClientHasRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final Response.Listener<InterfacesIAccessControlHasRole200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIAccessControlGrantRoleRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientHasRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientHasRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientHasRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientHasRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientHasRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientHasRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIAccessControlHasRole200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIAccessControlHasRole200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.renounceRole
  * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIAccessControlGrantRoleRequest 
   * @return InterfacesIAccessControlGrantRole200Response
  */
  public InterfacesIAccessControlGrantRole200Response interfacesIChainlinkAnyApiClientRenounceRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIAccessControlGrantRoleRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRenounceRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRenounceRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRenounceRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRenounceRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRenounceRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRenounceRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIAccessControlGrantRole200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIAccessControlGrantRole200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.renounceRole
   * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIAccessControlGrantRoleRequest 
  */
  public void interfacesIChainlinkAnyApiClientRenounceRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final Response.Listener<InterfacesIAccessControlGrantRole200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIAccessControlGrantRoleRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRenounceRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRenounceRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRenounceRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRenounceRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRenounceRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRenounceRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIAccessControlGrantRole200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIAccessControlGrantRole200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.request
  * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIChainlinkAnyApiClientRequestRequest 
   * @return InterfacesIChainlinkAnyApiClientRequest200Response
  */
  public InterfacesIChainlinkAnyApiClientRequest200Response interfacesIChainlinkAnyApiClientRequest (String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIChainlinkAnyApiClientRequestRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequest",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequest"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequest",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequest"));
    }
    // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' is set
    if (interfacesIChainlinkAnyApiClientRequestRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling interfacesIChainlinkAnyApiClientRequest",
        new ApiException(400, "Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling interfacesIChainlinkAnyApiClientRequest"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIChainlinkAnyApiClientRequest200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIChainlinkAnyApiClientRequest200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.request
   * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIChainlinkAnyApiClientRequestRequest 
  */
  public void interfacesIChainlinkAnyApiClientRequest (String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, final Response.Listener<InterfacesIChainlinkAnyApiClientRequest200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIChainlinkAnyApiClientRequestRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequest",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequest"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequest",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequest"));
    }
    // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' is set
    if (interfacesIChainlinkAnyApiClientRequestRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling interfacesIChainlinkAnyApiClientRequest",
        new ApiException(400, "Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling interfacesIChainlinkAnyApiClientRequest"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIChainlinkAnyApiClientRequest200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIChainlinkAnyApiClientRequest200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.requests
  * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIChainlinkAnyApiClientRequestsRequest 
   * @return InterfacesIChainlinkAnyApiClientRequests200Response
  */
  public InterfacesIChainlinkAnyApiClientRequests200Response interfacesIChainlinkAnyApiClientRequests (String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIChainlinkAnyApiClientRequestsRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequests",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequests"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequests",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequests"));
    }
    // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' is set
    if (interfacesIChainlinkAnyApiClientRequestsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling interfacesIChainlinkAnyApiClientRequests",
        new ApiException(400, "Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling interfacesIChainlinkAnyApiClientRequests"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIChainlinkAnyApiClientRequests200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIChainlinkAnyApiClientRequests200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.requests
   * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIChainlinkAnyApiClientRequestsRequest 
  */
  public void interfacesIChainlinkAnyApiClientRequests (String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, final Response.Listener<InterfacesIChainlinkAnyApiClientRequests200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIChainlinkAnyApiClientRequestsRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequests",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequests"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequests",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequests"));
    }
    // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' is set
    if (interfacesIChainlinkAnyApiClientRequestsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling interfacesIChainlinkAnyApiClientRequests",
        new ApiException(400, "Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling interfacesIChainlinkAnyApiClientRequests"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIChainlinkAnyApiClientRequests200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIChainlinkAnyApiClientRequests200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.revokeRole
  * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIAccessControlGrantRoleRequest 
   * @return InterfacesIAccessControlGrantRole200Response
  */
  public InterfacesIAccessControlGrantRole200Response interfacesIChainlinkAnyApiClientRevokeRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIAccessControlGrantRoleRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRevokeRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRevokeRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRevokeRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRevokeRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRevokeRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRevokeRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIAccessControlGrantRole200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIAccessControlGrantRole200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.revokeRole
   * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIAccessControlGrantRoleRequest 
  */
  public void interfacesIChainlinkAnyApiClientRevokeRole (String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final Response.Listener<InterfacesIAccessControlGrantRole200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIAccessControlGrantRoleRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRevokeRole",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRevokeRole"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRevokeRole",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRevokeRole"));
    }
    // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
    if (interfacesIAccessControlGrantRoleRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRevokeRole",
        new ApiException(400, "Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRevokeRole"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIAccessControlGrantRole200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIAccessControlGrantRole200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.setContractURI
  * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIContractURISetContractURIRequest 
   * @return InterfacesIContractURISetContractURI200Response
  */
  public InterfacesIContractURISetContractURI200Response interfacesIChainlinkAnyApiClientSetContractURI (String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIContractURISetContractURIRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSetContractURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSetContractURI"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSetContractURI",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSetContractURI"));
    }
    // verify the required parameter 'interfacesIContractURISetContractURIRequest' is set
    if (interfacesIContractURISetContractURIRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIContractURISetContractURIRequest' when calling interfacesIChainlinkAnyApiClientSetContractURI",
        new ApiException(400, "Missing the required parameter 'interfacesIContractURISetContractURIRequest' when calling interfacesIChainlinkAnyApiClientSetContractURI"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIContractURISetContractURI200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIContractURISetContractURI200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.setContractURI
   * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIContractURISetContractURIRequest 
  */
  public void interfacesIChainlinkAnyApiClientSetContractURI (String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, final Response.Listener<InterfacesIContractURISetContractURI200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIContractURISetContractURIRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSetContractURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSetContractURI"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSetContractURI",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSetContractURI"));
    }
    // verify the required parameter 'interfacesIContractURISetContractURIRequest' is set
    if (interfacesIContractURISetContractURIRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIContractURISetContractURIRequest' when calling interfacesIChainlinkAnyApiClientSetContractURI",
        new ApiException(400, "Missing the required parameter 'interfacesIContractURISetContractURIRequest' when calling interfacesIChainlinkAnyApiClientSetContractURI"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIContractURISetContractURI200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIContractURISetContractURI200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.supportsInterface
  * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC165SupportsInterfaceRequest 
   * @return InterfacesIERC165SupportsInterface200Response
  */
  public InterfacesIERC165SupportsInterface200Response interfacesIChainlinkAnyApiClientSupportsInterface (String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC165SupportsInterfaceRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSupportsInterface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSupportsInterface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSupportsInterface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSupportsInterface"));
    }
    // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
    if (interfacesIERC165SupportsInterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIChainlinkAnyApiClientSupportsInterface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIChainlinkAnyApiClientSupportsInterface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC165SupportsInterface200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC165SupportsInterface200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.supportsInterface
   * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC165SupportsInterfaceRequest 
  */
  public void interfacesIChainlinkAnyApiClientSupportsInterface (String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final Response.Listener<InterfacesIERC165SupportsInterface200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC165SupportsInterfaceRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSupportsInterface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSupportsInterface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSupportsInterface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSupportsInterface"));
    }
    // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
    if (interfacesIERC165SupportsInterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIChainlinkAnyApiClientSupportsInterface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIChainlinkAnyApiClientSupportsInterface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC165SupportsInterface200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC165SupportsInterface200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.version
  * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconImplementationRequest 
   * @return InterfacesIContractURIContractURI200Response
  */
  public InterfacesIContractURIContractURI200Response interfacesIChainlinkAnyApiClientVersion (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconImplementationRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientVersion",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientVersion"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientVersion",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientVersion"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientVersion",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientVersion"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIContractURIContractURI200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.version
   * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconImplementationRequest 
  */
  public void interfacesIChainlinkAnyApiClientVersion (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final Response.Listener<InterfacesIContractURIContractURI200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconImplementationRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientVersion",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientVersion"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientVersion",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientVersion"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientVersion",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientVersion"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIContractURIContractURI200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IChainlinkAnyApiClient.withdrawLink
  * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC20TransferRequest 
   * @return InterfacesIERC20Transfer200Response
  */
  public InterfacesIERC20Transfer200Response interfacesIChainlinkAnyApiClientWithdrawLink (String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC20TransferRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientWithdrawLink",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientWithdrawLink"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientWithdrawLink",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientWithdrawLink"));
    }
    // verify the required parameter 'interfacesIERC20TransferRequest' is set
    if (interfacesIERC20TransferRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC20TransferRequest' when calling interfacesIChainlinkAnyApiClientWithdrawLink",
        new ApiException(400, "Missing the required parameter 'interfacesIERC20TransferRequest' when calling interfacesIChainlinkAnyApiClientWithdrawLink"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC20Transfer200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC20Transfer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IChainlinkAnyApiClient.withdrawLink
   * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC20TransferRequest 
  */
  public void interfacesIChainlinkAnyApiClientWithdrawLink (String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final Response.Listener<InterfacesIERC20Transfer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC20TransferRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientWithdrawLink",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientWithdrawLink"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientWithdrawLink",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientWithdrawLink"));
    }
    // verify the required parameter 'interfacesIERC20TransferRequest' is set
    if (interfacesIERC20TransferRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC20TransferRequest' when calling interfacesIChainlinkAnyApiClientWithdrawLink",
        new ApiException(400, "Missing the required parameter 'interfacesIERC20TransferRequest' when calling interfacesIChainlinkAnyApiClientWithdrawLink"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC20Transfer200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC20Transfer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
