/**
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIBeaconImplementationRequest;
import org.openapitools.client.model.InterfacesIContractURIContractURI200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;
import org.openapitools.client.model.InterfacesIERC721Approve200Response;
import org.openapitools.client.model.InterfacesIERC721ApproveRequest;
import org.openapitools.client.model.InterfacesIERC721BalanceOf200Response;
import org.openapitools.client.model.InterfacesIERC721BalanceOfRequest;
import org.openapitools.client.model.InterfacesIERC721GetApproved200Response;
import org.openapitools.client.model.InterfacesIERC721GetApprovedRequest;
import org.openapitools.client.model.InterfacesIERC721IsApprovedForAll200Response;
import org.openapitools.client.model.InterfacesIERC721IsApprovedForAllRequest;
import org.openapitools.client.model.InterfacesIERC721MetadataTokenURI200Response;
import org.openapitools.client.model.InterfacesIERC721OwnerOf200Response;
import org.openapitools.client.model.InterfacesIERC721SafeTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC721SafeTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC721SetApprovalForAll200Response;
import org.openapitools.client.model.InterfacesIERC721SetApprovalForAllRequest;
import org.openapitools.client.model.InterfacesIERC721TransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC721TransferFromRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IERC721MetadataApi {
  String basePath = "https://17a0-195-175-28-162.ngrok-free.app/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * IERC721Metadata.approve
  * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721ApproveRequest 
   * @return InterfacesIERC721Approve200Response
  */
  public InterfacesIERC721Approve200Response interfacesIERC721MetadataApprove (String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721ApproveRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataApprove",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataApprove"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataApprove",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataApprove"));
    }
    // verify the required parameter 'interfacesIERC721ApproveRequest' is set
    if (interfacesIERC721ApproveRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721MetadataApprove",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721MetadataApprove"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/approve".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721Approve200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721Approve200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.approve
   * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721ApproveRequest 
  */
  public void interfacesIERC721MetadataApprove (String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final Response.Listener<InterfacesIERC721Approve200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721ApproveRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataApprove",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataApprove"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataApprove",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataApprove"));
    }
    // verify the required parameter 'interfacesIERC721ApproveRequest' is set
    if (interfacesIERC721ApproveRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721MetadataApprove",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721MetadataApprove"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/approve".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721Approve200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721Approve200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.balanceOf
  * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721BalanceOfRequest 
   * @return InterfacesIERC721BalanceOf200Response
  */
  public InterfacesIERC721BalanceOf200Response interfacesIERC721MetadataBalanceOf (String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721BalanceOfRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataBalanceOf",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataBalanceOf"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataBalanceOf",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataBalanceOf"));
    }
    // verify the required parameter 'interfacesIERC721BalanceOfRequest' is set
    if (interfacesIERC721BalanceOfRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721BalanceOfRequest' when calling interfacesIERC721MetadataBalanceOf",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721BalanceOfRequest' when calling interfacesIERC721MetadataBalanceOf"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/balanceOf".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721BalanceOf200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721BalanceOf200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.balanceOf
   * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721BalanceOfRequest 
  */
  public void interfacesIERC721MetadataBalanceOf (String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final Response.Listener<InterfacesIERC721BalanceOf200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721BalanceOfRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataBalanceOf",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataBalanceOf"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataBalanceOf",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataBalanceOf"));
    }
    // verify the required parameter 'interfacesIERC721BalanceOfRequest' is set
    if (interfacesIERC721BalanceOfRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721BalanceOfRequest' when calling interfacesIERC721MetadataBalanceOf",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721BalanceOfRequest' when calling interfacesIERC721MetadataBalanceOf"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/balanceOf".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721BalanceOf200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721BalanceOf200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.getApproved
  * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721GetApprovedRequest 
   * @return InterfacesIERC721GetApproved200Response
  */
  public InterfacesIERC721GetApproved200Response interfacesIERC721MetadataGetApproved (String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721GetApprovedRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataGetApproved",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataGetApproved"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataGetApproved",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataGetApproved"));
    }
    // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
    if (interfacesIERC721GetApprovedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataGetApproved",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataGetApproved"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/getApproved".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721GetApproved200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721GetApproved200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.getApproved
   * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721GetApprovedRequest 
  */
  public void interfacesIERC721MetadataGetApproved (String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final Response.Listener<InterfacesIERC721GetApproved200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721GetApprovedRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataGetApproved",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataGetApproved"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataGetApproved",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataGetApproved"));
    }
    // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
    if (interfacesIERC721GetApprovedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataGetApproved",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataGetApproved"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/getApproved".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721GetApproved200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721GetApproved200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.isApprovedForAll
  * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721IsApprovedForAllRequest 
   * @return InterfacesIERC721IsApprovedForAll200Response
  */
  public InterfacesIERC721IsApprovedForAll200Response interfacesIERC721MetadataIsApprovedForAll (String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721IsApprovedForAllRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataIsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataIsApprovedForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataIsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataIsApprovedForAll"));
    }
    // verify the required parameter 'interfacesIERC721IsApprovedForAllRequest' is set
    if (interfacesIERC721IsApprovedForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling interfacesIERC721MetadataIsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling interfacesIERC721MetadataIsApprovedForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/isApprovedForAll".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721IsApprovedForAll200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721IsApprovedForAll200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.isApprovedForAll
   * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721IsApprovedForAllRequest 
  */
  public void interfacesIERC721MetadataIsApprovedForAll (String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final Response.Listener<InterfacesIERC721IsApprovedForAll200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721IsApprovedForAllRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataIsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataIsApprovedForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataIsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataIsApprovedForAll"));
    }
    // verify the required parameter 'interfacesIERC721IsApprovedForAllRequest' is set
    if (interfacesIERC721IsApprovedForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling interfacesIERC721MetadataIsApprovedForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling interfacesIERC721MetadataIsApprovedForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/isApprovedForAll".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721IsApprovedForAll200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721IsApprovedForAll200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.name
  * Read &#x60;name()&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconImplementationRequest 
   * @return InterfacesIContractURIContractURI200Response
  */
  public InterfacesIContractURIContractURI200Response interfacesIERC721MetadataName (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconImplementationRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataName",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataName"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataName",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataName"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataName",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataName"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/name".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIContractURIContractURI200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.name
   * Read &#x60;name()&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconImplementationRequest 
  */
  public void interfacesIERC721MetadataName (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final Response.Listener<InterfacesIContractURIContractURI200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconImplementationRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataName",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataName"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataName",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataName"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataName",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataName"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/name".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIContractURIContractURI200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.ownerOf
  * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721GetApprovedRequest 
   * @return InterfacesIERC721OwnerOf200Response
  */
  public InterfacesIERC721OwnerOf200Response interfacesIERC721MetadataOwnerOf (String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721GetApprovedRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataOwnerOf",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataOwnerOf"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataOwnerOf",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataOwnerOf"));
    }
    // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
    if (interfacesIERC721GetApprovedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataOwnerOf",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataOwnerOf"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/ownerOf".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721OwnerOf200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721OwnerOf200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.ownerOf
   * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721GetApprovedRequest 
  */
  public void interfacesIERC721MetadataOwnerOf (String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final Response.Listener<InterfacesIERC721OwnerOf200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721GetApprovedRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataOwnerOf",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataOwnerOf"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataOwnerOf",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataOwnerOf"));
    }
    // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
    if (interfacesIERC721GetApprovedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataOwnerOf",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataOwnerOf"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/ownerOf".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721OwnerOf200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721OwnerOf200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.safeTransferFrom
  * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721SafeTransferFromRequest 
   * @return InterfacesIERC721SafeTransferFrom200Response
  */
  public InterfacesIERC721SafeTransferFrom200Response interfacesIERC721MetadataSafeTransferFrom (String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721SafeTransferFromRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSafeTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSafeTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC721SafeTransferFromRequest' is set
    if (interfacesIERC721SafeTransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721SafeTransferFromRequest' when calling interfacesIERC721MetadataSafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721SafeTransferFromRequest' when calling interfacesIERC721MetadataSafeTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/safeTransferFrom".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721SafeTransferFrom200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721SafeTransferFrom200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.safeTransferFrom
   * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721SafeTransferFromRequest 
  */
  public void interfacesIERC721MetadataSafeTransferFrom (String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final Response.Listener<InterfacesIERC721SafeTransferFrom200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721SafeTransferFromRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSafeTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSafeTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC721SafeTransferFromRequest' is set
    if (interfacesIERC721SafeTransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721SafeTransferFromRequest' when calling interfacesIERC721MetadataSafeTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721SafeTransferFromRequest' when calling interfacesIERC721MetadataSafeTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/safeTransferFrom".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721SafeTransferFrom200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721SafeTransferFrom200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.setApprovalForAll
  * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721SetApprovalForAllRequest 
   * @return InterfacesIERC721SetApprovalForAll200Response
  */
  public InterfacesIERC721SetApprovalForAll200Response interfacesIERC721MetadataSetApprovalForAll (String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721SetApprovalForAllRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSetApprovalForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSetApprovalForAll"));
    }
    // verify the required parameter 'interfacesIERC721SetApprovalForAllRequest' is set
    if (interfacesIERC721SetApprovalForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling interfacesIERC721MetadataSetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling interfacesIERC721MetadataSetApprovalForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/setApprovalForAll".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721SetApprovalForAll200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721SetApprovalForAll200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.setApprovalForAll
   * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721SetApprovalForAllRequest 
  */
  public void interfacesIERC721MetadataSetApprovalForAll (String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final Response.Listener<InterfacesIERC721SetApprovalForAll200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721SetApprovalForAllRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSetApprovalForAll"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSetApprovalForAll"));
    }
    // verify the required parameter 'interfacesIERC721SetApprovalForAllRequest' is set
    if (interfacesIERC721SetApprovalForAllRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling interfacesIERC721MetadataSetApprovalForAll",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling interfacesIERC721MetadataSetApprovalForAll"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/setApprovalForAll".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721SetApprovalForAll200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721SetApprovalForAll200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.supportsInterface
  * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC165SupportsInterfaceRequest 
   * @return InterfacesIERC165SupportsInterface200Response
  */
  public InterfacesIERC165SupportsInterface200Response interfacesIERC721MetadataSupportsInterface (String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC165SupportsInterfaceRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSupportsInterface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSupportsInterface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSupportsInterface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSupportsInterface"));
    }
    // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
    if (interfacesIERC165SupportsInterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC721MetadataSupportsInterface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC721MetadataSupportsInterface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/supportsInterface".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC165SupportsInterface200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC165SupportsInterface200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.supportsInterface
   * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC165SupportsInterfaceRequest 
  */
  public void interfacesIERC721MetadataSupportsInterface (String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final Response.Listener<InterfacesIERC165SupportsInterface200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC165SupportsInterfaceRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSupportsInterface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSupportsInterface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSupportsInterface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSupportsInterface"));
    }
    // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
    if (interfacesIERC165SupportsInterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC721MetadataSupportsInterface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC721MetadataSupportsInterface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/supportsInterface".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC165SupportsInterface200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC165SupportsInterface200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.symbol
  * Read &#x60;symbol()&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconImplementationRequest 
   * @return InterfacesIContractURIContractURI200Response
  */
  public InterfacesIContractURIContractURI200Response interfacesIERC721MetadataSymbol (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconImplementationRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSymbol",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSymbol"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSymbol",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSymbol"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataSymbol",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataSymbol"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/symbol".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIContractURIContractURI200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.symbol
   * Read &#x60;symbol()&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconImplementationRequest 
  */
  public void interfacesIERC721MetadataSymbol (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final Response.Listener<InterfacesIContractURIContractURI200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconImplementationRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSymbol",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataSymbol"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataSymbol",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataSymbol"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataSymbol",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721MetadataSymbol"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/symbol".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIContractURIContractURI200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIContractURIContractURI200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.tokenURI
  * Read &#x60;tokenURI(tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721GetApprovedRequest 
   * @return InterfacesIERC721MetadataTokenURI200Response
  */
  public InterfacesIERC721MetadataTokenURI200Response interfacesIERC721MetadataTokenURI (String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721GetApprovedRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTokenURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTokenURI"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataTokenURI",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataTokenURI"));
    }
    // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
    if (interfacesIERC721GetApprovedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataTokenURI",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataTokenURI"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/tokenURI".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721MetadataTokenURI200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721MetadataTokenURI200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.tokenURI
   * Read &#x60;tokenURI(tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721GetApprovedRequest 
  */
  public void interfacesIERC721MetadataTokenURI (String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final Response.Listener<InterfacesIERC721MetadataTokenURI200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721GetApprovedRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTokenURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTokenURI"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataTokenURI",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataTokenURI"));
    }
    // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
    if (interfacesIERC721GetApprovedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataTokenURI",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721MetadataTokenURI"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/read/{address}/tokenURI".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721MetadataTokenURI200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721MetadataTokenURI200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC721Metadata.transferFrom
  * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC721TransferFromRequest 
   * @return InterfacesIERC721TransferFrom200Response
  */
  public InterfacesIERC721TransferFrom200Response interfacesIERC721MetadataTransferFrom (String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC721TransferFromRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC721TransferFromRequest' is set
    if (interfacesIERC721TransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721TransferFromRequest' when calling interfacesIERC721MetadataTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721TransferFromRequest' when calling interfacesIERC721MetadataTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/transferFrom".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC721TransferFrom200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC721TransferFrom200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC721Metadata.transferFrom
   * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Metadata&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC721TransferFromRequest 
  */
  public void interfacesIERC721MetadataTransferFrom (String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final Response.Listener<InterfacesIERC721TransferFrom200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC721TransferFromRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTransferFrom",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC721MetadataTransferFrom"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC721MetadataTransferFrom",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC721MetadataTransferFrom"));
    }
    // verify the required parameter 'interfacesIERC721TransferFromRequest' is set
    if (interfacesIERC721TransferFromRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC721TransferFromRequest' when calling interfacesIERC721MetadataTransferFrom",
        new ApiException(400, "Missing the required parameter 'interfacesIERC721TransferFromRequest' when calling interfacesIERC721MetadataTransferFrom"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC721Metadata/write/{address}/transferFrom".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC721TransferFrom200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC721TransferFrom200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
