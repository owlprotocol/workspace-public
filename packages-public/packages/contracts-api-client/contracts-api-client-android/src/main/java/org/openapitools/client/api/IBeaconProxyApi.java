/**
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIBeaconImplementation200Response;
import org.openapitools.client.model.InterfacesIBeaconImplementationRequest;
import org.openapitools.client.model.InterfacesIBeaconProxySetBeacon200Response;
import org.openapitools.client.model.InterfacesIBeaconProxySetBeaconRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IBeaconProxyApi {
  String basePath = "https://17a0-195-175-28-162.ngrok-free.app/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * IBeaconProxy.beacon
  * Read &#x60;beacon()&#x60; on an instance of &#x60;IBeaconProxy&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconImplementationRequest 
   * @return InterfacesIBeaconImplementation200Response
  */
  public InterfacesIBeaconImplementation200Response interfacesIBeaconProxyBeacon (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconImplementationRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIBeaconProxyBeacon",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIBeaconProxyBeacon"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIBeaconProxyBeacon",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIBeaconProxyBeacon"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIBeaconProxyBeacon",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIBeaconProxyBeacon"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IBeaconProxy/read/{address}/beacon".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIBeaconImplementation200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIBeaconImplementation200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IBeaconProxy.beacon
   * Read &#x60;beacon()&#x60; on an instance of &#x60;IBeaconProxy&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconImplementationRequest 
  */
  public void interfacesIBeaconProxyBeacon (String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final Response.Listener<InterfacesIBeaconImplementation200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconImplementationRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIBeaconProxyBeacon",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIBeaconProxyBeacon"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIBeaconProxyBeacon",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIBeaconProxyBeacon"));
    }
    // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
    if (interfacesIBeaconImplementationRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIBeaconProxyBeacon",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIBeaconProxyBeacon"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IBeaconProxy/read/{address}/beacon".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIBeaconImplementation200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIBeaconImplementation200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IBeaconProxy.setBeacon
  * Write &#x60;setBeacon(_beaconAddress,data)&#x60; on an instance of &#x60;IBeaconProxy&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIBeaconProxySetBeaconRequest 
   * @return InterfacesIBeaconProxySetBeacon200Response
  */
  public InterfacesIBeaconProxySetBeacon200Response interfacesIBeaconProxySetBeacon (String networkId, String address, InterfacesIBeaconProxySetBeaconRequest interfacesIBeaconProxySetBeaconRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIBeaconProxySetBeaconRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIBeaconProxySetBeacon",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIBeaconProxySetBeacon"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIBeaconProxySetBeacon",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIBeaconProxySetBeacon"));
    }
    // verify the required parameter 'interfacesIBeaconProxySetBeaconRequest' is set
    if (interfacesIBeaconProxySetBeaconRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconProxySetBeaconRequest' when calling interfacesIBeaconProxySetBeacon",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconProxySetBeaconRequest' when calling interfacesIBeaconProxySetBeacon"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IBeaconProxy/write/{address}/setBeacon".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIBeaconProxySetBeacon200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIBeaconProxySetBeacon200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IBeaconProxy.setBeacon
   * Write &#x60;setBeacon(_beaconAddress,data)&#x60; on an instance of &#x60;IBeaconProxy&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIBeaconProxySetBeaconRequest 
  */
  public void interfacesIBeaconProxySetBeacon (String networkId, String address, InterfacesIBeaconProxySetBeaconRequest interfacesIBeaconProxySetBeaconRequest, final Response.Listener<InterfacesIBeaconProxySetBeacon200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIBeaconProxySetBeaconRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIBeaconProxySetBeacon",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIBeaconProxySetBeacon"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIBeaconProxySetBeacon",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIBeaconProxySetBeacon"));
    }
    // verify the required parameter 'interfacesIBeaconProxySetBeaconRequest' is set
    if (interfacesIBeaconProxySetBeaconRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIBeaconProxySetBeaconRequest' when calling interfacesIBeaconProxySetBeacon",
        new ApiException(400, "Missing the required parameter 'interfacesIBeaconProxySetBeaconRequest' when calling interfacesIBeaconProxySetBeacon"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IBeaconProxy/write/{address}/setBeacon".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIBeaconProxySetBeacon200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIBeaconProxySetBeacon200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
