/**
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.DeployBeaconProxyRequest;
import org.openapitools.client.model.DeployChainlinkAnyApiClientRequest;
import org.openapitools.client.model.DeployERC1155MintableRequest;
import org.openapitools.client.model.DeployERC20MintableRequest;
import org.openapitools.client.model.DeployERC2981SetterRequest;
import org.openapitools.client.model.DeployERC721MintableRequest;
import org.openapitools.client.model.DeployTokenDnaRequest;
import org.openapitools.client.model.DeployTokenURIBaseURIRequest;
import org.openapitools.client.model.DeployTokenURIDnaRequest;
import org.openapitools.client.model.DeployTokenURIRequest;
import org.openapitools.client.model.DeployUpgradeableBeaconRequest;
import org.openapitools.client.model.OasAnyTypeNotMapped;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DeployApi {
  String basePath = "https://17a0-195-175-28-162.ngrok-free.app/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Deploy BeaconProxy
  * Deploys an instance of &#x60;BeaconProxy&#x60;
   * @param networkId The network id
   * @param deployBeaconProxyRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployBeaconProxy (String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployBeaconProxyRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployBeaconProxy",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployBeaconProxy"));
    }
    // verify the required parameter 'deployBeaconProxyRequest' is set
    if (deployBeaconProxyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployBeaconProxyRequest' when calling deployBeaconProxy",
        new ApiException(400, "Missing the required parameter 'deployBeaconProxyRequest' when calling deployBeaconProxy"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/BeaconProxy".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy BeaconProxy
   * Deploys an instance of &#x60;BeaconProxy&#x60;
   * @param networkId The network id   * @param deployBeaconProxyRequest 
  */
  public void deployBeaconProxy (String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployBeaconProxyRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployBeaconProxy",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployBeaconProxy"));
    }
    // verify the required parameter 'deployBeaconProxyRequest' is set
    if (deployBeaconProxyRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployBeaconProxyRequest' when calling deployBeaconProxy",
        new ApiException(400, "Missing the required parameter 'deployBeaconProxyRequest' when calling deployBeaconProxy"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/BeaconProxy".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy ChainlinkAnyApiClient
  * Deploys an instance of &#x60;ChainlinkAnyApiClient&#x60;
   * @param networkId The network id
   * @param deployChainlinkAnyApiClientRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployChainlinkAnyApiClient (String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployChainlinkAnyApiClientRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployChainlinkAnyApiClient",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployChainlinkAnyApiClient"));
    }
    // verify the required parameter 'deployChainlinkAnyApiClientRequest' is set
    if (deployChainlinkAnyApiClientRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployChainlinkAnyApiClientRequest' when calling deployChainlinkAnyApiClient",
        new ApiException(400, "Missing the required parameter 'deployChainlinkAnyApiClientRequest' when calling deployChainlinkAnyApiClient"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ChainlinkAnyApiClient".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy ChainlinkAnyApiClient
   * Deploys an instance of &#x60;ChainlinkAnyApiClient&#x60;
   * @param networkId The network id   * @param deployChainlinkAnyApiClientRequest 
  */
  public void deployChainlinkAnyApiClient (String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployChainlinkAnyApiClientRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployChainlinkAnyApiClient",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployChainlinkAnyApiClient"));
    }
    // verify the required parameter 'deployChainlinkAnyApiClientRequest' is set
    if (deployChainlinkAnyApiClientRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployChainlinkAnyApiClientRequest' when calling deployChainlinkAnyApiClient",
        new ApiException(400, "Missing the required parameter 'deployChainlinkAnyApiClientRequest' when calling deployChainlinkAnyApiClient"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ChainlinkAnyApiClient".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy ERC1155Mintable
  * Deploys an instance of &#x60;ERC1155Mintable&#x60;
   * @param networkId The network id
   * @param deployERC1155MintableRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployERC1155Mintable (String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployERC1155MintableRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC1155Mintable",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC1155Mintable"));
    }
    // verify the required parameter 'deployERC1155MintableRequest' is set
    if (deployERC1155MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC1155MintableRequest' when calling deployERC1155Mintable",
        new ApiException(400, "Missing the required parameter 'deployERC1155MintableRequest' when calling deployERC1155Mintable"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC1155Mintable".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy ERC1155Mintable
   * Deploys an instance of &#x60;ERC1155Mintable&#x60;
   * @param networkId The network id   * @param deployERC1155MintableRequest 
  */
  public void deployERC1155Mintable (String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployERC1155MintableRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC1155Mintable",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC1155Mintable"));
    }
    // verify the required parameter 'deployERC1155MintableRequest' is set
    if (deployERC1155MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC1155MintableRequest' when calling deployERC1155Mintable",
        new ApiException(400, "Missing the required parameter 'deployERC1155MintableRequest' when calling deployERC1155Mintable"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC1155Mintable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy ERC20Mintable
  * Deploys an instance of &#x60;ERC20Mintable&#x60;
   * @param networkId The network id
   * @param deployERC20MintableRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployERC20Mintable (String networkId, DeployERC20MintableRequest deployERC20MintableRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployERC20MintableRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC20Mintable",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC20Mintable"));
    }
    // verify the required parameter 'deployERC20MintableRequest' is set
    if (deployERC20MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC20MintableRequest' when calling deployERC20Mintable",
        new ApiException(400, "Missing the required parameter 'deployERC20MintableRequest' when calling deployERC20Mintable"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC20Mintable".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy ERC20Mintable
   * Deploys an instance of &#x60;ERC20Mintable&#x60;
   * @param networkId The network id   * @param deployERC20MintableRequest 
  */
  public void deployERC20Mintable (String networkId, DeployERC20MintableRequest deployERC20MintableRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployERC20MintableRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC20Mintable",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC20Mintable"));
    }
    // verify the required parameter 'deployERC20MintableRequest' is set
    if (deployERC20MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC20MintableRequest' when calling deployERC20Mintable",
        new ApiException(400, "Missing the required parameter 'deployERC20MintableRequest' when calling deployERC20Mintable"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC20Mintable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy ERC2981Setter
  * Deploys an instance of &#x60;ERC2981Setter&#x60;
   * @param networkId The network id
   * @param deployERC2981SetterRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployERC2981Setter (String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployERC2981SetterRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC2981Setter",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC2981Setter"));
    }
    // verify the required parameter 'deployERC2981SetterRequest' is set
    if (deployERC2981SetterRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC2981SetterRequest' when calling deployERC2981Setter",
        new ApiException(400, "Missing the required parameter 'deployERC2981SetterRequest' when calling deployERC2981Setter"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC2981Setter".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy ERC2981Setter
   * Deploys an instance of &#x60;ERC2981Setter&#x60;
   * @param networkId The network id   * @param deployERC2981SetterRequest 
  */
  public void deployERC2981Setter (String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployERC2981SetterRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC2981Setter",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC2981Setter"));
    }
    // verify the required parameter 'deployERC2981SetterRequest' is set
    if (deployERC2981SetterRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC2981SetterRequest' when calling deployERC2981Setter",
        new ApiException(400, "Missing the required parameter 'deployERC2981SetterRequest' when calling deployERC2981Setter"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC2981Setter".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy ERC721Mintable
  * Deploys an instance of &#x60;ERC721Mintable&#x60;
   * @param networkId The network id
   * @param deployERC721MintableRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployERC721Mintable (String networkId, DeployERC721MintableRequest deployERC721MintableRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployERC721MintableRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC721Mintable",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC721Mintable"));
    }
    // verify the required parameter 'deployERC721MintableRequest' is set
    if (deployERC721MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721Mintable",
        new ApiException(400, "Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721Mintable"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC721Mintable".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy ERC721Mintable
   * Deploys an instance of &#x60;ERC721Mintable&#x60;
   * @param networkId The network id   * @param deployERC721MintableRequest 
  */
  public void deployERC721Mintable (String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployERC721MintableRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC721Mintable",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC721Mintable"));
    }
    // verify the required parameter 'deployERC721MintableRequest' is set
    if (deployERC721MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721Mintable",
        new ApiException(400, "Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721Mintable"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC721Mintable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy ERC721MintableAutoId
  * Deploys an instance of &#x60;ERC721MintableAutoId&#x60;
   * @param networkId The network id
   * @param deployERC721MintableRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployERC721MintableAutoId (String networkId, DeployERC721MintableRequest deployERC721MintableRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployERC721MintableRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC721MintableAutoId",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC721MintableAutoId"));
    }
    // verify the required parameter 'deployERC721MintableRequest' is set
    if (deployERC721MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721MintableAutoId",
        new ApiException(400, "Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721MintableAutoId"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC721MintableAutoId".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy ERC721MintableAutoId
   * Deploys an instance of &#x60;ERC721MintableAutoId&#x60;
   * @param networkId The network id   * @param deployERC721MintableRequest 
  */
  public void deployERC721MintableAutoId (String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployERC721MintableRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployERC721MintableAutoId",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployERC721MintableAutoId"));
    }
    // verify the required parameter 'deployERC721MintableRequest' is set
    if (deployERC721MintableRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721MintableAutoId",
        new ApiException(400, "Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721MintableAutoId"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/ERC721MintableAutoId".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy TokenDna
  * Deploys an instance of &#x60;TokenDna&#x60;
   * @param networkId The network id
   * @param deployTokenDnaRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployTokenDna (String networkId, DeployTokenDnaRequest deployTokenDnaRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployTokenDnaRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenDna",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenDna"));
    }
    // verify the required parameter 'deployTokenDnaRequest' is set
    if (deployTokenDnaRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenDnaRequest' when calling deployTokenDna",
        new ApiException(400, "Missing the required parameter 'deployTokenDnaRequest' when calling deployTokenDna"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenDna".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy TokenDna
   * Deploys an instance of &#x60;TokenDna&#x60;
   * @param networkId The network id   * @param deployTokenDnaRequest 
  */
  public void deployTokenDna (String networkId, DeployTokenDnaRequest deployTokenDnaRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployTokenDnaRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenDna",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenDna"));
    }
    // verify the required parameter 'deployTokenDnaRequest' is set
    if (deployTokenDnaRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenDnaRequest' when calling deployTokenDna",
        new ApiException(400, "Missing the required parameter 'deployTokenDnaRequest' when calling deployTokenDna"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenDna".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy TokenURI
  * Deploys an instance of &#x60;TokenURI&#x60;
   * @param networkId The network id
   * @param deployTokenURIRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployTokenURI (String networkId, DeployTokenURIRequest deployTokenURIRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployTokenURIRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenURI"));
    }
    // verify the required parameter 'deployTokenURIRequest' is set
    if (deployTokenURIRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenURIRequest' when calling deployTokenURI",
        new ApiException(400, "Missing the required parameter 'deployTokenURIRequest' when calling deployTokenURI"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenURI".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy TokenURI
   * Deploys an instance of &#x60;TokenURI&#x60;
   * @param networkId The network id   * @param deployTokenURIRequest 
  */
  public void deployTokenURI (String networkId, DeployTokenURIRequest deployTokenURIRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployTokenURIRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenURI"));
    }
    // verify the required parameter 'deployTokenURIRequest' is set
    if (deployTokenURIRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenURIRequest' when calling deployTokenURI",
        new ApiException(400, "Missing the required parameter 'deployTokenURIRequest' when calling deployTokenURI"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenURI".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy TokenURIBaseURI
  * Deploys an instance of &#x60;TokenURIBaseURI&#x60;
   * @param networkId The network id
   * @param deployTokenURIBaseURIRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployTokenURIBaseURI (String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployTokenURIBaseURIRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenURIBaseURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenURIBaseURI"));
    }
    // verify the required parameter 'deployTokenURIBaseURIRequest' is set
    if (deployTokenURIBaseURIRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenURIBaseURIRequest' when calling deployTokenURIBaseURI",
        new ApiException(400, "Missing the required parameter 'deployTokenURIBaseURIRequest' when calling deployTokenURIBaseURI"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenURIBaseURI".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy TokenURIBaseURI
   * Deploys an instance of &#x60;TokenURIBaseURI&#x60;
   * @param networkId The network id   * @param deployTokenURIBaseURIRequest 
  */
  public void deployTokenURIBaseURI (String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployTokenURIBaseURIRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenURIBaseURI",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenURIBaseURI"));
    }
    // verify the required parameter 'deployTokenURIBaseURIRequest' is set
    if (deployTokenURIBaseURIRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenURIBaseURIRequest' when calling deployTokenURIBaseURI",
        new ApiException(400, "Missing the required parameter 'deployTokenURIBaseURIRequest' when calling deployTokenURIBaseURI"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenURIBaseURI".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy TokenURIDna
  * Deploys an instance of &#x60;TokenURIDna&#x60;
   * @param networkId The network id
   * @param deployTokenURIDnaRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployTokenURIDna (String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployTokenURIDnaRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenURIDna",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenURIDna"));
    }
    // verify the required parameter 'deployTokenURIDnaRequest' is set
    if (deployTokenURIDnaRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenURIDnaRequest' when calling deployTokenURIDna",
        new ApiException(400, "Missing the required parameter 'deployTokenURIDnaRequest' when calling deployTokenURIDna"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenURIDna".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy TokenURIDna
   * Deploys an instance of &#x60;TokenURIDna&#x60;
   * @param networkId The network id   * @param deployTokenURIDnaRequest 
  */
  public void deployTokenURIDna (String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployTokenURIDnaRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployTokenURIDna",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployTokenURIDna"));
    }
    // verify the required parameter 'deployTokenURIDnaRequest' is set
    if (deployTokenURIDnaRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployTokenURIDnaRequest' when calling deployTokenURIDna",
        new ApiException(400, "Missing the required parameter 'deployTokenURIDnaRequest' when calling deployTokenURIDna"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/TokenURIDna".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy UpgradeableBeacon
  * Deploys an instance of &#x60;UpgradeableBeacon&#x60;
   * @param networkId The network id
   * @param deployUpgradeableBeaconRequest 
   * @return OasAnyTypeNotMapped
  */
  public OasAnyTypeNotMapped deployUpgradeableBeacon (String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deployUpgradeableBeaconRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployUpgradeableBeacon",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployUpgradeableBeacon"));
    }
    // verify the required parameter 'deployUpgradeableBeaconRequest' is set
    if (deployUpgradeableBeaconRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployUpgradeableBeaconRequest' when calling deployUpgradeableBeacon",
        new ApiException(400, "Missing the required parameter 'deployUpgradeableBeaconRequest' when calling deployUpgradeableBeacon"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/UpgradeableBeacon".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse, "", OasAnyTypeNotMapped.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy UpgradeableBeacon
   * Deploys an instance of &#x60;UpgradeableBeacon&#x60;
   * @param networkId The network id   * @param deployUpgradeableBeaconRequest 
  */
  public void deployUpgradeableBeacon (String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest, final Response.Listener<OasAnyTypeNotMapped> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deployUpgradeableBeaconRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling deployUpgradeableBeacon",
        new ApiException(400, "Missing the required parameter 'networkId' when calling deployUpgradeableBeacon"));
    }
    // verify the required parameter 'deployUpgradeableBeaconRequest' is set
    if (deployUpgradeableBeaconRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deployUpgradeableBeaconRequest' when calling deployUpgradeableBeacon",
        new ApiException(400, "Missing the required parameter 'deployUpgradeableBeaconRequest' when calling deployUpgradeableBeacon"));
    }

    // create path and map variables
    String path = "/{networkId}/deploy/UpgradeableBeacon".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OasAnyTypeNotMapped) ApiInvoker.deserialize(localVarResponse,  "", OasAnyTypeNotMapped.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
