/**
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIERC1820GetInterfaceImplementer200Response;
import org.openapitools.client.model.InterfacesIERC1820GetInterfaceImplementerRequest;
import org.openapitools.client.model.InterfacesIERC1820GetManager200Response;
import org.openapitools.client.model.InterfacesIERC1820GetManagerRequest;
import org.openapitools.client.model.InterfacesIERC1820ImplementsERC165Interface200Response;
import org.openapitools.client.model.InterfacesIERC1820ImplementsERC165InterfaceRequest;
import org.openapitools.client.model.InterfacesIERC1820InterfaceHash200Response;
import org.openapitools.client.model.InterfacesIERC1820InterfaceHashRequest;
import org.openapitools.client.model.InterfacesIERC1820SetInterfaceImplementer200Response;
import org.openapitools.client.model.InterfacesIERC1820SetInterfaceImplementerRequest;
import org.openapitools.client.model.InterfacesIERC1820SetManager200Response;
import org.openapitools.client.model.InterfacesIERC1820SetManagerRequest;
import org.openapitools.client.model.InterfacesIERC1820UpdateERC165Cache200Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IERC1820Api {
  String basePath = "https://17a0-195-175-28-162.ngrok-free.app/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * IERC1820.getInterfaceImplementer
  * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820GetInterfaceImplementerRequest 
   * @return InterfacesIERC1820GetInterfaceImplementer200Response
  */
  public InterfacesIERC1820GetInterfaceImplementer200Response interfacesIERC1820GetInterfaceImplementer (String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820GetInterfaceImplementerRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820GetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820GetInterfaceImplementer"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820GetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820GetInterfaceImplementer"));
    }
    // verify the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' is set
    if (interfacesIERC1820GetInterfaceImplementerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling interfacesIERC1820GetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling interfacesIERC1820GetInterfaceImplementer"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820GetInterfaceImplementer200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820GetInterfaceImplementer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.getInterfaceImplementer
   * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820GetInterfaceImplementerRequest 
  */
  public void interfacesIERC1820GetInterfaceImplementer (String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, final Response.Listener<InterfacesIERC1820GetInterfaceImplementer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820GetInterfaceImplementerRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820GetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820GetInterfaceImplementer"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820GetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820GetInterfaceImplementer"));
    }
    // verify the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' is set
    if (interfacesIERC1820GetInterfaceImplementerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling interfacesIERC1820GetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling interfacesIERC1820GetInterfaceImplementer"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820GetInterfaceImplementer200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820GetInterfaceImplementer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.getManager
  * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820GetManagerRequest 
   * @return InterfacesIERC1820GetManager200Response
  */
  public InterfacesIERC1820GetManager200Response interfacesIERC1820GetManager (String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820GetManagerRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820GetManager",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820GetManager"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820GetManager",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820GetManager"));
    }
    // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
    if (interfacesIERC1820GetManagerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820GetManagerRequest' when calling interfacesIERC1820GetManager",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820GetManagerRequest' when calling interfacesIERC1820GetManager"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/getManager".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820GetManager200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820GetManager200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.getManager
   * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820GetManagerRequest 
  */
  public void interfacesIERC1820GetManager (String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final Response.Listener<InterfacesIERC1820GetManager200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820GetManagerRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820GetManager",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820GetManager"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820GetManager",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820GetManager"));
    }
    // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
    if (interfacesIERC1820GetManagerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820GetManagerRequest' when calling interfacesIERC1820GetManager",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820GetManagerRequest' when calling interfacesIERC1820GetManager"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/getManager".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820GetManager200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820GetManager200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.implementsERC165Interface
  * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
   * @return InterfacesIERC1820ImplementsERC165Interface200Response
  */
  public InterfacesIERC1820ImplementsERC165Interface200Response interfacesIERC1820ImplementsERC165Interface (String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820ImplementsERC165InterfaceRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165Interface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165Interface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165Interface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165Interface"));
    }
    // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
    if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165Interface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165Interface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820ImplementsERC165Interface200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820ImplementsERC165Interface200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.implementsERC165Interface
   * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
  */
  public void interfacesIERC1820ImplementsERC165Interface (String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final Response.Listener<InterfacesIERC1820ImplementsERC165Interface200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820ImplementsERC165InterfaceRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165Interface",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165Interface"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165Interface",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165Interface"));
    }
    // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
    if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165Interface",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165Interface"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820ImplementsERC165Interface200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820ImplementsERC165Interface200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.implementsERC165InterfaceNoCache
  * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
   * @return InterfacesIERC1820ImplementsERC165Interface200Response
  */
  public InterfacesIERC1820ImplementsERC165Interface200Response interfacesIERC1820ImplementsERC165InterfaceNoCache (String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820ImplementsERC165InterfaceRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache"));
    }
    // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
    if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820ImplementsERC165Interface200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820ImplementsERC165Interface200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.implementsERC165InterfaceNoCache
   * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
  */
  public void interfacesIERC1820ImplementsERC165InterfaceNoCache (String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final Response.Listener<InterfacesIERC1820ImplementsERC165Interface200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820ImplementsERC165InterfaceRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache"));
    }
    // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
    if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820ImplementsERC165Interface200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820ImplementsERC165Interface200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.interfaceHash
  * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820InterfaceHashRequest 
   * @return InterfacesIERC1820InterfaceHash200Response
  */
  public InterfacesIERC1820InterfaceHash200Response interfacesIERC1820InterfaceHash (String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820InterfaceHashRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820InterfaceHash",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820InterfaceHash"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820InterfaceHash",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820InterfaceHash"));
    }
    // verify the required parameter 'interfacesIERC1820InterfaceHashRequest' is set
    if (interfacesIERC1820InterfaceHashRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820InterfaceHashRequest' when calling interfacesIERC1820InterfaceHash",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820InterfaceHashRequest' when calling interfacesIERC1820InterfaceHash"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/interfaceHash".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820InterfaceHash200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820InterfaceHash200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.interfaceHash
   * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820InterfaceHashRequest 
  */
  public void interfacesIERC1820InterfaceHash (String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, final Response.Listener<InterfacesIERC1820InterfaceHash200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820InterfaceHashRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820InterfaceHash",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820InterfaceHash"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820InterfaceHash",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820InterfaceHash"));
    }
    // verify the required parameter 'interfacesIERC1820InterfaceHashRequest' is set
    if (interfacesIERC1820InterfaceHashRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820InterfaceHashRequest' when calling interfacesIERC1820InterfaceHash",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820InterfaceHashRequest' when calling interfacesIERC1820InterfaceHash"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/read/{address}/interfaceHash".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820InterfaceHash200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820InterfaceHash200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.setInterfaceImplementer
  * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820SetInterfaceImplementerRequest 
   * @return InterfacesIERC1820SetInterfaceImplementer200Response
  */
  public InterfacesIERC1820SetInterfaceImplementer200Response interfacesIERC1820SetInterfaceImplementer (String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820SetInterfaceImplementerRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820SetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820SetInterfaceImplementer"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820SetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820SetInterfaceImplementer"));
    }
    // verify the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' is set
    if (interfacesIERC1820SetInterfaceImplementerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling interfacesIERC1820SetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling interfacesIERC1820SetInterfaceImplementer"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820SetInterfaceImplementer200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820SetInterfaceImplementer200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.setInterfaceImplementer
   * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820SetInterfaceImplementerRequest 
  */
  public void interfacesIERC1820SetInterfaceImplementer (String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, final Response.Listener<InterfacesIERC1820SetInterfaceImplementer200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820SetInterfaceImplementerRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820SetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820SetInterfaceImplementer"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820SetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820SetInterfaceImplementer"));
    }
    // verify the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' is set
    if (interfacesIERC1820SetInterfaceImplementerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling interfacesIERC1820SetInterfaceImplementer",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling interfacesIERC1820SetInterfaceImplementer"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820SetInterfaceImplementer200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820SetInterfaceImplementer200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.setManager
  * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820SetManagerRequest 
   * @return InterfacesIERC1820SetManager200Response
  */
  public InterfacesIERC1820SetManager200Response interfacesIERC1820SetManager (String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820SetManagerRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820SetManager",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820SetManager"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820SetManager",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820SetManager"));
    }
    // verify the required parameter 'interfacesIERC1820SetManagerRequest' is set
    if (interfacesIERC1820SetManagerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820SetManagerRequest' when calling interfacesIERC1820SetManager",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820SetManagerRequest' when calling interfacesIERC1820SetManager"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/write/{address}/setManager".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820SetManager200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820SetManager200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.setManager
   * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820SetManagerRequest 
  */
  public void interfacesIERC1820SetManager (String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, final Response.Listener<InterfacesIERC1820SetManager200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820SetManagerRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820SetManager",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820SetManager"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820SetManager",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820SetManager"));
    }
    // verify the required parameter 'interfacesIERC1820SetManagerRequest' is set
    if (interfacesIERC1820SetManagerRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820SetManagerRequest' when calling interfacesIERC1820SetManager",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820SetManagerRequest' when calling interfacesIERC1820SetManager"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/write/{address}/setManager".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820SetManager200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820SetManager200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * IERC1820.updateERC165Cache
  * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id
   * @param address An ethereum address
   * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
   * @return InterfacesIERC1820UpdateERC165Cache200Response
  */
  public InterfacesIERC1820UpdateERC165Cache200Response interfacesIERC1820UpdateERC165Cache (String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = interfacesIERC1820ImplementsERC165InterfaceRequest;
    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820UpdateERC165Cache",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820UpdateERC165Cache"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820UpdateERC165Cache",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820UpdateERC165Cache"));
    }
    // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
    if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820UpdateERC165Cache",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820UpdateERC165Cache"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache".replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InterfacesIERC1820UpdateERC165Cache200Response) ApiInvoker.deserialize(localVarResponse, "", InterfacesIERC1820UpdateERC165Cache200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * IERC1820.updateERC165Cache
   * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
   * @param networkId The network id   * @param address An ethereum address   * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
  */
  public void interfacesIERC1820UpdateERC165Cache (String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final Response.Listener<InterfacesIERC1820UpdateERC165Cache200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = interfacesIERC1820ImplementsERC165InterfaceRequest;

    // verify the required parameter 'networkId' is set
    if (networkId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'networkId' when calling interfacesIERC1820UpdateERC165Cache",
        new ApiException(400, "Missing the required parameter 'networkId' when calling interfacesIERC1820UpdateERC165Cache"));
    }
    // verify the required parameter 'address' is set
    if (address == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'address' when calling interfacesIERC1820UpdateERC165Cache",
        new ApiException(400, "Missing the required parameter 'address' when calling interfacesIERC1820UpdateERC165Cache"));
    }
    // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
    if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820UpdateERC165Cache",
        new ApiException(400, "Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820UpdateERC165Cache"));
    }

    // create path and map variables
    String path = "/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache".replaceAll("\\{format\\}","json").replaceAll("\\{" + "networkId" + "\\}", apiInvoker.escapeString(networkId.toString())).replaceAll("\\{" + "address" + "\\}", apiInvoker.escapeString(address.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InterfacesIERC1820UpdateERC165Cache200Response) ApiInvoker.deserialize(localVarResponse,  "", InterfacesIERC1820UpdateERC165Cache200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
