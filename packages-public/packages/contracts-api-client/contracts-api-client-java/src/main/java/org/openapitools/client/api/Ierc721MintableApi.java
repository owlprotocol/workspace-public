/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIERC721Approve200Response;
import org.openapitools.client.model.InterfacesIERC721ApproveRequest;
import org.openapitools.client.model.InterfacesIERC721MintableMintBatch200Response;
import org.openapitools.client.model.InterfacesIERC721MintableMintBatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Ierc721MintableApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ierc721MintableApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Ierc721MintableApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIERC721MintableMint
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableMintCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721ApproveRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Mintable/write/{address}/mint"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721MintableMintValidateBeforeCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721MintableMint(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721MintableMint(Async)");
        }

        // verify the required parameter 'interfacesIERC721ApproveRequest' is set
        if (interfacesIERC721ApproveRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721MintableMint(Async)");
        }

        return interfacesIERC721MintableMintCall(networkId, address, interfacesIERC721ApproveRequest, _callback);

    }

    /**
     * IERC721Mintable.mint
     * Write &#x60;mint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return InterfacesIERC721Approve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721Approve200Response interfacesIERC721MintableMint(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        ApiResponse<InterfacesIERC721Approve200Response> localVarResp = interfacesIERC721MintableMintWithHttpInfo(networkId, address, interfacesIERC721ApproveRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Mintable.mint
     * Write &#x60;mint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721Approve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721Approve200Response> interfacesIERC721MintableMintWithHttpInfo(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721MintableMintValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Mintable.mint (asynchronously)
     * Write &#x60;mint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableMintAsync(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback<InterfacesIERC721Approve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721MintableMintValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721MintableMintBatch
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableMintBatchCall(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721MintableMintBatchRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Mintable/write/{address}/mintBatch"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721MintableMintBatchValidateBeforeCall(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721MintableMintBatch(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721MintableMintBatch(Async)");
        }

        // verify the required parameter 'interfacesIERC721MintableMintBatchRequest' is set
        if (interfacesIERC721MintableMintBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721MintableMintBatchRequest' when calling interfacesIERC721MintableMintBatch(Async)");
        }

        return interfacesIERC721MintableMintBatchCall(networkId, address, interfacesIERC721MintableMintBatchRequest, _callback);

    }

    /**
     * IERC721Mintable.mintBatch
     * Write &#x60;mintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @return InterfacesIERC721MintableMintBatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721MintableMintBatch200Response interfacesIERC721MintableMintBatch(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest) throws ApiException {
        ApiResponse<InterfacesIERC721MintableMintBatch200Response> localVarResp = interfacesIERC721MintableMintBatchWithHttpInfo(networkId, address, interfacesIERC721MintableMintBatchRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Mintable.mintBatch
     * Write &#x60;mintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721MintableMintBatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721MintableMintBatch200Response> interfacesIERC721MintableMintBatchWithHttpInfo(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721MintableMintBatchValidateBeforeCall(networkId, address, interfacesIERC721MintableMintBatchRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721MintableMintBatch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Mintable.mintBatch (asynchronously)
     * Write &#x60;mintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableMintBatchAsync(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest, final ApiCallback<InterfacesIERC721MintableMintBatch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721MintableMintBatchValidateBeforeCall(networkId, address, interfacesIERC721MintableMintBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721MintableMintBatch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721MintableSafeMint
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableSafeMintCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721ApproveRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Mintable/write/{address}/safeMint"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721MintableSafeMintValidateBeforeCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721MintableSafeMint(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721MintableSafeMint(Async)");
        }

        // verify the required parameter 'interfacesIERC721ApproveRequest' is set
        if (interfacesIERC721ApproveRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721MintableSafeMint(Async)");
        }

        return interfacesIERC721MintableSafeMintCall(networkId, address, interfacesIERC721ApproveRequest, _callback);

    }

    /**
     * IERC721Mintable.safeMint
     * Write &#x60;safeMint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return InterfacesIERC721Approve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721Approve200Response interfacesIERC721MintableSafeMint(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        ApiResponse<InterfacesIERC721Approve200Response> localVarResp = interfacesIERC721MintableSafeMintWithHttpInfo(networkId, address, interfacesIERC721ApproveRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Mintable.safeMint
     * Write &#x60;safeMint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721Approve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721Approve200Response> interfacesIERC721MintableSafeMintWithHttpInfo(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721MintableSafeMintValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Mintable.safeMint (asynchronously)
     * Write &#x60;safeMint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableSafeMintAsync(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback<InterfacesIERC721Approve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721MintableSafeMintValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721MintableSafeMintBatch
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableSafeMintBatchCall(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721MintableMintBatchRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Mintable/write/{address}/safeMintBatch"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721MintableSafeMintBatchValidateBeforeCall(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721MintableSafeMintBatch(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721MintableSafeMintBatch(Async)");
        }

        // verify the required parameter 'interfacesIERC721MintableMintBatchRequest' is set
        if (interfacesIERC721MintableMintBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721MintableMintBatchRequest' when calling interfacesIERC721MintableSafeMintBatch(Async)");
        }

        return interfacesIERC721MintableSafeMintBatchCall(networkId, address, interfacesIERC721MintableMintBatchRequest, _callback);

    }

    /**
     * IERC721Mintable.safeMintBatch
     * Write &#x60;safeMintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @return InterfacesIERC721MintableMintBatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721MintableMintBatch200Response interfacesIERC721MintableSafeMintBatch(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest) throws ApiException {
        ApiResponse<InterfacesIERC721MintableMintBatch200Response> localVarResp = interfacesIERC721MintableSafeMintBatchWithHttpInfo(networkId, address, interfacesIERC721MintableMintBatchRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Mintable.safeMintBatch
     * Write &#x60;safeMintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721MintableMintBatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721MintableMintBatch200Response> interfacesIERC721MintableSafeMintBatchWithHttpInfo(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721MintableSafeMintBatchValidateBeforeCall(networkId, address, interfacesIERC721MintableMintBatchRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721MintableMintBatch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Mintable.safeMintBatch (asynchronously)
     * Write &#x60;safeMintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721MintableMintBatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721MintableSafeMintBatchAsync(String networkId, String address, InterfacesIERC721MintableMintBatchRequest interfacesIERC721MintableMintBatchRequest, final ApiCallback<InterfacesIERC721MintableMintBatch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721MintableSafeMintBatchValidateBeforeCall(networkId, address, interfacesIERC721MintableMintBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721MintableMintBatch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
