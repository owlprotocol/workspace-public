/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.DeployBeaconProxyRequest;
import org.openapitools.client.model.DeployChainlinkAnyApiClientRequest;
import org.openapitools.client.model.DeployERC1155MintableRequest;
import org.openapitools.client.model.DeployERC20MintableRequest;
import org.openapitools.client.model.DeployERC2981SetterRequest;
import org.openapitools.client.model.DeployERC721MintableRequest;
import org.openapitools.client.model.DeployTokenDnaRequest;
import org.openapitools.client.model.DeployTokenURIBaseURIRequest;
import org.openapitools.client.model.DeployTokenURIDnaRequest;
import org.openapitools.client.model.DeployTokenURIRequest;
import org.openapitools.client.model.DeployUpgradeableBeaconRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DeployApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeployApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeployApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deployBeaconProxy
     * @param networkId The network id (required)
     * @param deployBeaconProxyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployBeaconProxyCall(String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployBeaconProxyRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/BeaconProxy"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployBeaconProxyValidateBeforeCall(String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployBeaconProxy(Async)");
        }

        // verify the required parameter 'deployBeaconProxyRequest' is set
        if (deployBeaconProxyRequest == null) {
            throw new ApiException("Missing the required parameter 'deployBeaconProxyRequest' when calling deployBeaconProxy(Async)");
        }

        return deployBeaconProxyCall(networkId, deployBeaconProxyRequest, _callback);

    }

    /**
     * Deploy BeaconProxy
     * Deploys an instance of &#x60;BeaconProxy&#x60;
     * @param networkId The network id (required)
     * @param deployBeaconProxyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployBeaconProxy(String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployBeaconProxyWithHttpInfo(networkId, deployBeaconProxyRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy BeaconProxy
     * Deploys an instance of &#x60;BeaconProxy&#x60;
     * @param networkId The network id (required)
     * @param deployBeaconProxyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployBeaconProxyWithHttpInfo(String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest) throws ApiException {
        okhttp3.Call localVarCall = deployBeaconProxyValidateBeforeCall(networkId, deployBeaconProxyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy BeaconProxy (asynchronously)
     * Deploys an instance of &#x60;BeaconProxy&#x60;
     * @param networkId The network id (required)
     * @param deployBeaconProxyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployBeaconProxyAsync(String networkId, DeployBeaconProxyRequest deployBeaconProxyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployBeaconProxyValidateBeforeCall(networkId, deployBeaconProxyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployChainlinkAnyApiClient
     * @param networkId The network id (required)
     * @param deployChainlinkAnyApiClientRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployChainlinkAnyApiClientCall(String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployChainlinkAnyApiClientRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/ChainlinkAnyApiClient"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployChainlinkAnyApiClientValidateBeforeCall(String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployChainlinkAnyApiClient(Async)");
        }

        // verify the required parameter 'deployChainlinkAnyApiClientRequest' is set
        if (deployChainlinkAnyApiClientRequest == null) {
            throw new ApiException("Missing the required parameter 'deployChainlinkAnyApiClientRequest' when calling deployChainlinkAnyApiClient(Async)");
        }

        return deployChainlinkAnyApiClientCall(networkId, deployChainlinkAnyApiClientRequest, _callback);

    }

    /**
     * Deploy ChainlinkAnyApiClient
     * Deploys an instance of &#x60;ChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param deployChainlinkAnyApiClientRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployChainlinkAnyApiClient(String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployChainlinkAnyApiClientWithHttpInfo(networkId, deployChainlinkAnyApiClientRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy ChainlinkAnyApiClient
     * Deploys an instance of &#x60;ChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param deployChainlinkAnyApiClientRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployChainlinkAnyApiClientWithHttpInfo(String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest) throws ApiException {
        okhttp3.Call localVarCall = deployChainlinkAnyApiClientValidateBeforeCall(networkId, deployChainlinkAnyApiClientRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy ChainlinkAnyApiClient (asynchronously)
     * Deploys an instance of &#x60;ChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param deployChainlinkAnyApiClientRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployChainlinkAnyApiClientAsync(String networkId, DeployChainlinkAnyApiClientRequest deployChainlinkAnyApiClientRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployChainlinkAnyApiClientValidateBeforeCall(networkId, deployChainlinkAnyApiClientRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployERC1155Mintable
     * @param networkId The network id (required)
     * @param deployERC1155MintableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC1155MintableCall(String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployERC1155MintableRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/ERC1155Mintable"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployERC1155MintableValidateBeforeCall(String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployERC1155Mintable(Async)");
        }

        // verify the required parameter 'deployERC1155MintableRequest' is set
        if (deployERC1155MintableRequest == null) {
            throw new ApiException("Missing the required parameter 'deployERC1155MintableRequest' when calling deployERC1155Mintable(Async)");
        }

        return deployERC1155MintableCall(networkId, deployERC1155MintableRequest, _callback);

    }

    /**
     * Deploy ERC1155Mintable
     * Deploys an instance of &#x60;ERC1155Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC1155MintableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployERC1155Mintable(String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployERC1155MintableWithHttpInfo(networkId, deployERC1155MintableRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy ERC1155Mintable
     * Deploys an instance of &#x60;ERC1155Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC1155MintableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployERC1155MintableWithHttpInfo(String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest) throws ApiException {
        okhttp3.Call localVarCall = deployERC1155MintableValidateBeforeCall(networkId, deployERC1155MintableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy ERC1155Mintable (asynchronously)
     * Deploys an instance of &#x60;ERC1155Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC1155MintableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC1155MintableAsync(String networkId, DeployERC1155MintableRequest deployERC1155MintableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployERC1155MintableValidateBeforeCall(networkId, deployERC1155MintableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployERC20Mintable
     * @param networkId The network id (required)
     * @param deployERC20MintableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC20MintableCall(String networkId, DeployERC20MintableRequest deployERC20MintableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployERC20MintableRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/ERC20Mintable"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployERC20MintableValidateBeforeCall(String networkId, DeployERC20MintableRequest deployERC20MintableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployERC20Mintable(Async)");
        }

        // verify the required parameter 'deployERC20MintableRequest' is set
        if (deployERC20MintableRequest == null) {
            throw new ApiException("Missing the required parameter 'deployERC20MintableRequest' when calling deployERC20Mintable(Async)");
        }

        return deployERC20MintableCall(networkId, deployERC20MintableRequest, _callback);

    }

    /**
     * Deploy ERC20Mintable
     * Deploys an instance of &#x60;ERC20Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC20MintableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployERC20Mintable(String networkId, DeployERC20MintableRequest deployERC20MintableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployERC20MintableWithHttpInfo(networkId, deployERC20MintableRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy ERC20Mintable
     * Deploys an instance of &#x60;ERC20Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC20MintableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployERC20MintableWithHttpInfo(String networkId, DeployERC20MintableRequest deployERC20MintableRequest) throws ApiException {
        okhttp3.Call localVarCall = deployERC20MintableValidateBeforeCall(networkId, deployERC20MintableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy ERC20Mintable (asynchronously)
     * Deploys an instance of &#x60;ERC20Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC20MintableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC20MintableAsync(String networkId, DeployERC20MintableRequest deployERC20MintableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployERC20MintableValidateBeforeCall(networkId, deployERC20MintableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployERC2981Setter
     * @param networkId The network id (required)
     * @param deployERC2981SetterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC2981SetterCall(String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployERC2981SetterRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/ERC2981Setter"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployERC2981SetterValidateBeforeCall(String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployERC2981Setter(Async)");
        }

        // verify the required parameter 'deployERC2981SetterRequest' is set
        if (deployERC2981SetterRequest == null) {
            throw new ApiException("Missing the required parameter 'deployERC2981SetterRequest' when calling deployERC2981Setter(Async)");
        }

        return deployERC2981SetterCall(networkId, deployERC2981SetterRequest, _callback);

    }

    /**
     * Deploy ERC2981Setter
     * Deploys an instance of &#x60;ERC2981Setter&#x60;
     * @param networkId The network id (required)
     * @param deployERC2981SetterRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployERC2981Setter(String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployERC2981SetterWithHttpInfo(networkId, deployERC2981SetterRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy ERC2981Setter
     * Deploys an instance of &#x60;ERC2981Setter&#x60;
     * @param networkId The network id (required)
     * @param deployERC2981SetterRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployERC2981SetterWithHttpInfo(String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest) throws ApiException {
        okhttp3.Call localVarCall = deployERC2981SetterValidateBeforeCall(networkId, deployERC2981SetterRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy ERC2981Setter (asynchronously)
     * Deploys an instance of &#x60;ERC2981Setter&#x60;
     * @param networkId The network id (required)
     * @param deployERC2981SetterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC2981SetterAsync(String networkId, DeployERC2981SetterRequest deployERC2981SetterRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployERC2981SetterValidateBeforeCall(networkId, deployERC2981SetterRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployERC721Mintable
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC721MintableCall(String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployERC721MintableRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/ERC721Mintable"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployERC721MintableValidateBeforeCall(String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployERC721Mintable(Async)");
        }

        // verify the required parameter 'deployERC721MintableRequest' is set
        if (deployERC721MintableRequest == null) {
            throw new ApiException("Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721Mintable(Async)");
        }

        return deployERC721MintableCall(networkId, deployERC721MintableRequest, _callback);

    }

    /**
     * Deploy ERC721Mintable
     * Deploys an instance of &#x60;ERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployERC721Mintable(String networkId, DeployERC721MintableRequest deployERC721MintableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployERC721MintableWithHttpInfo(networkId, deployERC721MintableRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy ERC721Mintable
     * Deploys an instance of &#x60;ERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployERC721MintableWithHttpInfo(String networkId, DeployERC721MintableRequest deployERC721MintableRequest) throws ApiException {
        okhttp3.Call localVarCall = deployERC721MintableValidateBeforeCall(networkId, deployERC721MintableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy ERC721Mintable (asynchronously)
     * Deploys an instance of &#x60;ERC721Mintable&#x60;
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC721MintableAsync(String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployERC721MintableValidateBeforeCall(networkId, deployERC721MintableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployERC721MintableAutoId
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC721MintableAutoIdCall(String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployERC721MintableRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/ERC721MintableAutoId"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployERC721MintableAutoIdValidateBeforeCall(String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployERC721MintableAutoId(Async)");
        }

        // verify the required parameter 'deployERC721MintableRequest' is set
        if (deployERC721MintableRequest == null) {
            throw new ApiException("Missing the required parameter 'deployERC721MintableRequest' when calling deployERC721MintableAutoId(Async)");
        }

        return deployERC721MintableAutoIdCall(networkId, deployERC721MintableRequest, _callback);

    }

    /**
     * Deploy ERC721MintableAutoId
     * Deploys an instance of &#x60;ERC721MintableAutoId&#x60;
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployERC721MintableAutoId(String networkId, DeployERC721MintableRequest deployERC721MintableRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployERC721MintableAutoIdWithHttpInfo(networkId, deployERC721MintableRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy ERC721MintableAutoId
     * Deploys an instance of &#x60;ERC721MintableAutoId&#x60;
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployERC721MintableAutoIdWithHttpInfo(String networkId, DeployERC721MintableRequest deployERC721MintableRequest) throws ApiException {
        okhttp3.Call localVarCall = deployERC721MintableAutoIdValidateBeforeCall(networkId, deployERC721MintableRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy ERC721MintableAutoId (asynchronously)
     * Deploys an instance of &#x60;ERC721MintableAutoId&#x60;
     * @param networkId The network id (required)
     * @param deployERC721MintableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployERC721MintableAutoIdAsync(String networkId, DeployERC721MintableRequest deployERC721MintableRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployERC721MintableAutoIdValidateBeforeCall(networkId, deployERC721MintableRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployTokenDna
     * @param networkId The network id (required)
     * @param deployTokenDnaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenDnaCall(String networkId, DeployTokenDnaRequest deployTokenDnaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployTokenDnaRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/TokenDna"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployTokenDnaValidateBeforeCall(String networkId, DeployTokenDnaRequest deployTokenDnaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployTokenDna(Async)");
        }

        // verify the required parameter 'deployTokenDnaRequest' is set
        if (deployTokenDnaRequest == null) {
            throw new ApiException("Missing the required parameter 'deployTokenDnaRequest' when calling deployTokenDna(Async)");
        }

        return deployTokenDnaCall(networkId, deployTokenDnaRequest, _callback);

    }

    /**
     * Deploy TokenDna
     * Deploys an instance of &#x60;TokenDna&#x60;
     * @param networkId The network id (required)
     * @param deployTokenDnaRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployTokenDna(String networkId, DeployTokenDnaRequest deployTokenDnaRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployTokenDnaWithHttpInfo(networkId, deployTokenDnaRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy TokenDna
     * Deploys an instance of &#x60;TokenDna&#x60;
     * @param networkId The network id (required)
     * @param deployTokenDnaRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployTokenDnaWithHttpInfo(String networkId, DeployTokenDnaRequest deployTokenDnaRequest) throws ApiException {
        okhttp3.Call localVarCall = deployTokenDnaValidateBeforeCall(networkId, deployTokenDnaRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy TokenDna (asynchronously)
     * Deploys an instance of &#x60;TokenDna&#x60;
     * @param networkId The network id (required)
     * @param deployTokenDnaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenDnaAsync(String networkId, DeployTokenDnaRequest deployTokenDnaRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployTokenDnaValidateBeforeCall(networkId, deployTokenDnaRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployTokenURI
     * @param networkId The network id (required)
     * @param deployTokenURIRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenURICall(String networkId, DeployTokenURIRequest deployTokenURIRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployTokenURIRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/TokenURI"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployTokenURIValidateBeforeCall(String networkId, DeployTokenURIRequest deployTokenURIRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployTokenURI(Async)");
        }

        // verify the required parameter 'deployTokenURIRequest' is set
        if (deployTokenURIRequest == null) {
            throw new ApiException("Missing the required parameter 'deployTokenURIRequest' when calling deployTokenURI(Async)");
        }

        return deployTokenURICall(networkId, deployTokenURIRequest, _callback);

    }

    /**
     * Deploy TokenURI
     * Deploys an instance of &#x60;TokenURI&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployTokenURI(String networkId, DeployTokenURIRequest deployTokenURIRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployTokenURIWithHttpInfo(networkId, deployTokenURIRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy TokenURI
     * Deploys an instance of &#x60;TokenURI&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployTokenURIWithHttpInfo(String networkId, DeployTokenURIRequest deployTokenURIRequest) throws ApiException {
        okhttp3.Call localVarCall = deployTokenURIValidateBeforeCall(networkId, deployTokenURIRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy TokenURI (asynchronously)
     * Deploys an instance of &#x60;TokenURI&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenURIAsync(String networkId, DeployTokenURIRequest deployTokenURIRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployTokenURIValidateBeforeCall(networkId, deployTokenURIRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployTokenURIBaseURI
     * @param networkId The network id (required)
     * @param deployTokenURIBaseURIRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenURIBaseURICall(String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployTokenURIBaseURIRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/TokenURIBaseURI"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployTokenURIBaseURIValidateBeforeCall(String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployTokenURIBaseURI(Async)");
        }

        // verify the required parameter 'deployTokenURIBaseURIRequest' is set
        if (deployTokenURIBaseURIRequest == null) {
            throw new ApiException("Missing the required parameter 'deployTokenURIBaseURIRequest' when calling deployTokenURIBaseURI(Async)");
        }

        return deployTokenURIBaseURICall(networkId, deployTokenURIBaseURIRequest, _callback);

    }

    /**
     * Deploy TokenURIBaseURI
     * Deploys an instance of &#x60;TokenURIBaseURI&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIBaseURIRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployTokenURIBaseURI(String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployTokenURIBaseURIWithHttpInfo(networkId, deployTokenURIBaseURIRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy TokenURIBaseURI
     * Deploys an instance of &#x60;TokenURIBaseURI&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIBaseURIRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployTokenURIBaseURIWithHttpInfo(String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest) throws ApiException {
        okhttp3.Call localVarCall = deployTokenURIBaseURIValidateBeforeCall(networkId, deployTokenURIBaseURIRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy TokenURIBaseURI (asynchronously)
     * Deploys an instance of &#x60;TokenURIBaseURI&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIBaseURIRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenURIBaseURIAsync(String networkId, DeployTokenURIBaseURIRequest deployTokenURIBaseURIRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployTokenURIBaseURIValidateBeforeCall(networkId, deployTokenURIBaseURIRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployTokenURIDna
     * @param networkId The network id (required)
     * @param deployTokenURIDnaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenURIDnaCall(String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployTokenURIDnaRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/TokenURIDna"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployTokenURIDnaValidateBeforeCall(String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployTokenURIDna(Async)");
        }

        // verify the required parameter 'deployTokenURIDnaRequest' is set
        if (deployTokenURIDnaRequest == null) {
            throw new ApiException("Missing the required parameter 'deployTokenURIDnaRequest' when calling deployTokenURIDna(Async)");
        }

        return deployTokenURIDnaCall(networkId, deployTokenURIDnaRequest, _callback);

    }

    /**
     * Deploy TokenURIDna
     * Deploys an instance of &#x60;TokenURIDna&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIDnaRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployTokenURIDna(String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployTokenURIDnaWithHttpInfo(networkId, deployTokenURIDnaRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy TokenURIDna
     * Deploys an instance of &#x60;TokenURIDna&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIDnaRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployTokenURIDnaWithHttpInfo(String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest) throws ApiException {
        okhttp3.Call localVarCall = deployTokenURIDnaValidateBeforeCall(networkId, deployTokenURIDnaRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy TokenURIDna (asynchronously)
     * Deploys an instance of &#x60;TokenURIDna&#x60;
     * @param networkId The network id (required)
     * @param deployTokenURIDnaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployTokenURIDnaAsync(String networkId, DeployTokenURIDnaRequest deployTokenURIDnaRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployTokenURIDnaValidateBeforeCall(networkId, deployTokenURIDnaRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployUpgradeableBeacon
     * @param networkId The network id (required)
     * @param deployUpgradeableBeaconRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployUpgradeableBeaconCall(String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployUpgradeableBeaconRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/deploy/UpgradeableBeacon"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployUpgradeableBeaconValidateBeforeCall(String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deployUpgradeableBeacon(Async)");
        }

        // verify the required parameter 'deployUpgradeableBeaconRequest' is set
        if (deployUpgradeableBeaconRequest == null) {
            throw new ApiException("Missing the required parameter 'deployUpgradeableBeaconRequest' when calling deployUpgradeableBeacon(Async)");
        }

        return deployUpgradeableBeaconCall(networkId, deployUpgradeableBeaconRequest, _callback);

    }

    /**
     * Deploy UpgradeableBeacon
     * Deploys an instance of &#x60;UpgradeableBeacon&#x60;
     * @param networkId The network id (required)
     * @param deployUpgradeableBeaconRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Object deployUpgradeableBeacon(String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest) throws ApiException {
        ApiResponse<Object> localVarResp = deployUpgradeableBeaconWithHttpInfo(networkId, deployUpgradeableBeaconRequest);
        return localVarResp.getData();
    }

    /**
     * Deploy UpgradeableBeacon
     * Deploys an instance of &#x60;UpgradeableBeacon&#x60;
     * @param networkId The network id (required)
     * @param deployUpgradeableBeaconRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deployUpgradeableBeaconWithHttpInfo(String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest) throws ApiException {
        okhttp3.Call localVarCall = deployUpgradeableBeaconValidateBeforeCall(networkId, deployUpgradeableBeaconRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy UpgradeableBeacon (asynchronously)
     * Deploys an instance of &#x60;UpgradeableBeacon&#x60;
     * @param networkId The network id (required)
     * @param deployUpgradeableBeaconRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployUpgradeableBeaconAsync(String networkId, DeployUpgradeableBeaconRequest deployUpgradeableBeaconRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployUpgradeableBeaconValidateBeforeCall(networkId, deployUpgradeableBeaconRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
