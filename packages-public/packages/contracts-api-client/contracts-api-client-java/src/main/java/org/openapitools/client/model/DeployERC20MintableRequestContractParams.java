/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeployERC20MintableRequestContractParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-16T18:48:04.561997+03:00[Europe/Istanbul]")
public class DeployERC20MintableRequestContractParams {
  public static final String SERIALIZED_NAME_0 = "0";
  @SerializedName(SERIALIZED_NAME_0)
  private String _0;

  public static final String SERIALIZED_NAME_1 = "1";
  @SerializedName(SERIALIZED_NAME_1)
  private String _1;

  public static final String SERIALIZED_NAME_2 = "2";
  @SerializedName(SERIALIZED_NAME_2)
  private String _2;

  public static final String SERIALIZED_NAME_3 = "3";
  @SerializedName(SERIALIZED_NAME_3)
  private String _3;

  public static final String SERIALIZED_NAME_ADMIN = "_admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private String admin;

  public static final String SERIALIZED_NAME_INIT_CONTRACT_U_R_I = "_initContractURI";
  @SerializedName(SERIALIZED_NAME_INIT_CONTRACT_U_R_I)
  private String initContractURI;

  public static final String SERIALIZED_NAME_NAME = "_name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYMBOL = "_symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public DeployERC20MintableRequestContractParams() {
  }

  public DeployERC20MintableRequestContractParams _0(String _0) {
    
    this._0 = _0;
    return this;
  }

   /**
   * An ethereum address
   * @return _0
  **/
  @javax.annotation.Nullable
  public String get0() {
    return _0;
  }


  public void set0(String _0) {
    this._0 = _0;
  }


  public DeployERC20MintableRequestContractParams _1(String _1) {
    
    this._1 = _1;
    return this;
  }

   /**
   * A string
   * @return _1
  **/
  @javax.annotation.Nullable
  public String get1() {
    return _1;
  }


  public void set1(String _1) {
    this._1 = _1;
  }


  public DeployERC20MintableRequestContractParams _2(String _2) {
    
    this._2 = _2;
    return this;
  }

   /**
   * A string
   * @return _2
  **/
  @javax.annotation.Nullable
  public String get2() {
    return _2;
  }


  public void set2(String _2) {
    this._2 = _2;
  }


  public DeployERC20MintableRequestContractParams _3(String _3) {
    
    this._3 = _3;
    return this;
  }

   /**
   * A string
   * @return _3
  **/
  @javax.annotation.Nullable
  public String get3() {
    return _3;
  }


  public void set3(String _3) {
    this._3 = _3;
  }


  public DeployERC20MintableRequestContractParams admin(String admin) {
    
    this.admin = admin;
    return this;
  }

   /**
   * An ethereum address
   * @return admin
  **/
  @javax.annotation.Nullable
  public String getAdmin() {
    return admin;
  }


  public void setAdmin(String admin) {
    this.admin = admin;
  }


  public DeployERC20MintableRequestContractParams initContractURI(String initContractURI) {
    
    this.initContractURI = initContractURI;
    return this;
  }

   /**
   * A string
   * @return initContractURI
  **/
  @javax.annotation.Nullable
  public String getInitContractURI() {
    return initContractURI;
  }


  public void setInitContractURI(String initContractURI) {
    this.initContractURI = initContractURI;
  }


  public DeployERC20MintableRequestContractParams name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A string
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DeployERC20MintableRequestContractParams symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * A string
   * @return symbol
  **/
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployERC20MintableRequestContractParams deployERC20MintableRequestContractParams = (DeployERC20MintableRequestContractParams) o;
    return Objects.equals(this._0, deployERC20MintableRequestContractParams._0) &&
        Objects.equals(this._1, deployERC20MintableRequestContractParams._1) &&
        Objects.equals(this._2, deployERC20MintableRequestContractParams._2) &&
        Objects.equals(this._3, deployERC20MintableRequestContractParams._3) &&
        Objects.equals(this.admin, deployERC20MintableRequestContractParams.admin) &&
        Objects.equals(this.initContractURI, deployERC20MintableRequestContractParams.initContractURI) &&
        Objects.equals(this.name, deployERC20MintableRequestContractParams.name) &&
        Objects.equals(this.symbol, deployERC20MintableRequestContractParams.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_0, _1, _2, _3, admin, initContractURI, name, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployERC20MintableRequestContractParams {\n");
    sb.append("    _0: ").append(toIndentedString(_0)).append("\n");
    sb.append("    _1: ").append(toIndentedString(_1)).append("\n");
    sb.append("    _2: ").append(toIndentedString(_2)).append("\n");
    sb.append("    _3: ").append(toIndentedString(_3)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    initContractURI: ").append(toIndentedString(initContractURI)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("0");
    openapiFields.add("1");
    openapiFields.add("2");
    openapiFields.add("3");
    openapiFields.add("_admin");
    openapiFields.add("_initContractURI");
    openapiFields.add("_name");
    openapiFields.add("_symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeployERC20MintableRequestContractParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeployERC20MintableRequestContractParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployERC20MintableRequestContractParams is not found in the empty JSON string", DeployERC20MintableRequestContractParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeployERC20MintableRequestContractParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployERC20MintableRequestContractParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("0") != null && !jsonObj.get("0").isJsonNull()) && !jsonObj.get("0").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `0` to be a primitive type in the JSON string but got `%s`", jsonObj.get("0").toString()));
      }
      if ((jsonObj.get("1") != null && !jsonObj.get("1").isJsonNull()) && !jsonObj.get("1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("1").toString()));
      }
      if ((jsonObj.get("2") != null && !jsonObj.get("2").isJsonNull()) && !jsonObj.get("2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("2").toString()));
      }
      if ((jsonObj.get("3") != null && !jsonObj.get("3").isJsonNull()) && !jsonObj.get("3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("3").toString()));
      }
      if ((jsonObj.get("_admin") != null && !jsonObj.get("_admin").isJsonNull()) && !jsonObj.get("_admin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_admin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_admin").toString()));
      }
      if ((jsonObj.get("_initContractURI") != null && !jsonObj.get("_initContractURI").isJsonNull()) && !jsonObj.get("_initContractURI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_initContractURI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_initContractURI").toString()));
      }
      if ((jsonObj.get("_name") != null && !jsonObj.get("_name").isJsonNull()) && !jsonObj.get("_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_name").toString()));
      }
      if ((jsonObj.get("_symbol") != null && !jsonObj.get("_symbol").isJsonNull()) && !jsonObj.get("_symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployERC20MintableRequestContractParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployERC20MintableRequestContractParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployERC20MintableRequestContractParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployERC20MintableRequestContractParams.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployERC20MintableRequestContractParams>() {
           @Override
           public void write(JsonWriter out, DeployERC20MintableRequestContractParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployERC20MintableRequestContractParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeployERC20MintableRequestContractParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeployERC20MintableRequestContractParams
  * @throws IOException if the JSON string is invalid with respect to DeployERC20MintableRequestContractParams
  */
  public static DeployERC20MintableRequestContractParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployERC20MintableRequestContractParams.class);
  }

 /**
  * Convert an instance of DeployERC20MintableRequestContractParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

