/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIERC1820GetInterfaceImplementer200Response;
import org.openapitools.client.model.InterfacesIERC1820GetInterfaceImplementerRequest;
import org.openapitools.client.model.InterfacesIERC1820GetManager200Response;
import org.openapitools.client.model.InterfacesIERC1820GetManagerRequest;
import org.openapitools.client.model.InterfacesIERC1820ImplementsERC165Interface200Response;
import org.openapitools.client.model.InterfacesIERC1820ImplementsERC165InterfaceRequest;
import org.openapitools.client.model.InterfacesIERC1820InterfaceHash200Response;
import org.openapitools.client.model.InterfacesIERC1820InterfaceHashRequest;
import org.openapitools.client.model.InterfacesIERC1820SetInterfaceImplementer200Response;
import org.openapitools.client.model.InterfacesIERC1820SetInterfaceImplementerRequest;
import org.openapitools.client.model.InterfacesIERC1820SetManager200Response;
import org.openapitools.client.model.InterfacesIERC1820SetManagerRequest;
import org.openapitools.client.model.InterfacesIERC1820UpdateERC165Cache200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Ierc1820Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ierc1820Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Ierc1820Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIERC1820GetInterfaceImplementer
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetInterfaceImplementerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820GetInterfaceImplementerCall(String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820GetInterfaceImplementerRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820GetInterfaceImplementerValidateBeforeCall(String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820GetInterfaceImplementer(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820GetInterfaceImplementer(Async)");
        }

        // verify the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' is set
        if (interfacesIERC1820GetInterfaceImplementerRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820GetInterfaceImplementerRequest' when calling interfacesIERC1820GetInterfaceImplementer(Async)");
        }

        return interfacesIERC1820GetInterfaceImplementerCall(networkId, address, interfacesIERC1820GetInterfaceImplementerRequest, _callback);

    }

    /**
     * IERC1820.getInterfaceImplementer
     * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetInterfaceImplementerRequest  (required)
     * @return InterfacesIERC1820GetInterfaceImplementer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820GetInterfaceImplementer200Response interfacesIERC1820GetInterfaceImplementer(String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response> localVarResp = interfacesIERC1820GetInterfaceImplementerWithHttpInfo(networkId, address, interfacesIERC1820GetInterfaceImplementerRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.getInterfaceImplementer
     * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetInterfaceImplementerRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820GetInterfaceImplementer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response> interfacesIERC1820GetInterfaceImplementerWithHttpInfo(String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820GetInterfaceImplementerValidateBeforeCall(networkId, address, interfacesIERC1820GetInterfaceImplementerRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820GetInterfaceImplementer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.getInterfaceImplementer (asynchronously)
     * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetInterfaceImplementerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820GetInterfaceImplementerAsync(String networkId, String address, InterfacesIERC1820GetInterfaceImplementerRequest interfacesIERC1820GetInterfaceImplementerRequest, final ApiCallback<InterfacesIERC1820GetInterfaceImplementer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820GetInterfaceImplementerValidateBeforeCall(networkId, address, interfacesIERC1820GetInterfaceImplementerRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820GetInterfaceImplementer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820GetManager
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820GetManagerCall(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820GetManagerRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/read/{address}/getManager"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820GetManagerValidateBeforeCall(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820GetManager(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820GetManager(Async)");
        }

        // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
        if (interfacesIERC1820GetManagerRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820GetManagerRequest' when calling interfacesIERC1820GetManager(Async)");
        }

        return interfacesIERC1820GetManagerCall(networkId, address, interfacesIERC1820GetManagerRequest, _callback);

    }

    /**
     * IERC1820.getManager
     * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @return InterfacesIERC1820GetManager200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820GetManager200Response interfacesIERC1820GetManager(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820GetManager200Response> localVarResp = interfacesIERC1820GetManagerWithHttpInfo(networkId, address, interfacesIERC1820GetManagerRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.getManager
     * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820GetManager200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820GetManager200Response> interfacesIERC1820GetManagerWithHttpInfo(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820GetManagerValidateBeforeCall(networkId, address, interfacesIERC1820GetManagerRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820GetManager200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.getManager (asynchronously)
     * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820GetManagerAsync(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final ApiCallback<InterfacesIERC1820GetManager200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820GetManagerValidateBeforeCall(networkId, address, interfacesIERC1820GetManagerRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820GetManager200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820ImplementsERC165Interface
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820ImplementsERC165InterfaceCall(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820ImplementsERC165InterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820ImplementsERC165InterfaceValidateBeforeCall(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165Interface(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165Interface(Async)");
        }

        // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
        if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165Interface(Async)");
        }

        return interfacesIERC1820ImplementsERC165InterfaceCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, _callback);

    }

    /**
     * IERC1820.implementsERC165Interface
     * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @return InterfacesIERC1820ImplementsERC165Interface200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820ImplementsERC165Interface200Response interfacesIERC1820ImplementsERC165Interface(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> localVarResp = interfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.implementsERC165Interface
     * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820ImplementsERC165Interface200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> interfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820ImplementsERC165InterfaceValidateBeforeCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820ImplementsERC165Interface200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.implementsERC165Interface (asynchronously)
     * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820ImplementsERC165InterfaceAsync(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback<InterfacesIERC1820ImplementsERC165Interface200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820ImplementsERC165InterfaceValidateBeforeCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820ImplementsERC165Interface200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820ImplementsERC165InterfaceNoCache
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820ImplementsERC165InterfaceNoCacheCall(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820ImplementsERC165InterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820ImplementsERC165InterfaceNoCacheValidateBeforeCall(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache(Async)");
        }

        // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
        if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820ImplementsERC165InterfaceNoCache(Async)");
        }

        return interfacesIERC1820ImplementsERC165InterfaceNoCacheCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, _callback);

    }

    /**
     * IERC1820.implementsERC165InterfaceNoCache
     * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @return InterfacesIERC1820ImplementsERC165Interface200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820ImplementsERC165Interface200Response interfacesIERC1820ImplementsERC165InterfaceNoCache(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> localVarResp = interfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.implementsERC165InterfaceNoCache
     * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820ImplementsERC165Interface200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response> interfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820ImplementsERC165InterfaceNoCacheValidateBeforeCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820ImplementsERC165Interface200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.implementsERC165InterfaceNoCache (asynchronously)
     * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820ImplementsERC165InterfaceNoCacheAsync(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback<InterfacesIERC1820ImplementsERC165Interface200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820ImplementsERC165InterfaceNoCacheValidateBeforeCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820ImplementsERC165Interface200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820InterfaceHash
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820InterfaceHashRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820InterfaceHashCall(String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820InterfaceHashRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/read/{address}/interfaceHash"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820InterfaceHashValidateBeforeCall(String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820InterfaceHash(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820InterfaceHash(Async)");
        }

        // verify the required parameter 'interfacesIERC1820InterfaceHashRequest' is set
        if (interfacesIERC1820InterfaceHashRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820InterfaceHashRequest' when calling interfacesIERC1820InterfaceHash(Async)");
        }

        return interfacesIERC1820InterfaceHashCall(networkId, address, interfacesIERC1820InterfaceHashRequest, _callback);

    }

    /**
     * IERC1820.interfaceHash
     * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820InterfaceHashRequest  (required)
     * @return InterfacesIERC1820InterfaceHash200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820InterfaceHash200Response interfacesIERC1820InterfaceHash(String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820InterfaceHash200Response> localVarResp = interfacesIERC1820InterfaceHashWithHttpInfo(networkId, address, interfacesIERC1820InterfaceHashRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.interfaceHash
     * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820InterfaceHashRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820InterfaceHash200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820InterfaceHash200Response> interfacesIERC1820InterfaceHashWithHttpInfo(String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820InterfaceHashValidateBeforeCall(networkId, address, interfacesIERC1820InterfaceHashRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820InterfaceHash200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.interfaceHash (asynchronously)
     * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820InterfaceHashRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820InterfaceHashAsync(String networkId, String address, InterfacesIERC1820InterfaceHashRequest interfacesIERC1820InterfaceHashRequest, final ApiCallback<InterfacesIERC1820InterfaceHash200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820InterfaceHashValidateBeforeCall(networkId, address, interfacesIERC1820InterfaceHashRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820InterfaceHash200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820SetInterfaceImplementer
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetInterfaceImplementerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820SetInterfaceImplementerCall(String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820SetInterfaceImplementerRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820SetInterfaceImplementerValidateBeforeCall(String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820SetInterfaceImplementer(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820SetInterfaceImplementer(Async)");
        }

        // verify the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' is set
        if (interfacesIERC1820SetInterfaceImplementerRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820SetInterfaceImplementerRequest' when calling interfacesIERC1820SetInterfaceImplementer(Async)");
        }

        return interfacesIERC1820SetInterfaceImplementerCall(networkId, address, interfacesIERC1820SetInterfaceImplementerRequest, _callback);

    }

    /**
     * IERC1820.setInterfaceImplementer
     * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetInterfaceImplementerRequest  (required)
     * @return InterfacesIERC1820SetInterfaceImplementer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820SetInterfaceImplementer200Response interfacesIERC1820SetInterfaceImplementer(String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response> localVarResp = interfacesIERC1820SetInterfaceImplementerWithHttpInfo(networkId, address, interfacesIERC1820SetInterfaceImplementerRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.setInterfaceImplementer
     * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetInterfaceImplementerRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820SetInterfaceImplementer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response> interfacesIERC1820SetInterfaceImplementerWithHttpInfo(String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820SetInterfaceImplementerValidateBeforeCall(networkId, address, interfacesIERC1820SetInterfaceImplementerRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820SetInterfaceImplementer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.setInterfaceImplementer (asynchronously)
     * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetInterfaceImplementerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820SetInterfaceImplementerAsync(String networkId, String address, InterfacesIERC1820SetInterfaceImplementerRequest interfacesIERC1820SetInterfaceImplementerRequest, final ApiCallback<InterfacesIERC1820SetInterfaceImplementer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820SetInterfaceImplementerValidateBeforeCall(networkId, address, interfacesIERC1820SetInterfaceImplementerRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820SetInterfaceImplementer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820SetManager
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetManagerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820SetManagerCall(String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820SetManagerRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/write/{address}/setManager"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820SetManagerValidateBeforeCall(String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820SetManager(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820SetManager(Async)");
        }

        // verify the required parameter 'interfacesIERC1820SetManagerRequest' is set
        if (interfacesIERC1820SetManagerRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820SetManagerRequest' when calling interfacesIERC1820SetManager(Async)");
        }

        return interfacesIERC1820SetManagerCall(networkId, address, interfacesIERC1820SetManagerRequest, _callback);

    }

    /**
     * IERC1820.setManager
     * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetManagerRequest  (required)
     * @return InterfacesIERC1820SetManager200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820SetManager200Response interfacesIERC1820SetManager(String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820SetManager200Response> localVarResp = interfacesIERC1820SetManagerWithHttpInfo(networkId, address, interfacesIERC1820SetManagerRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.setManager
     * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetManagerRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820SetManager200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820SetManager200Response> interfacesIERC1820SetManagerWithHttpInfo(String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820SetManagerValidateBeforeCall(networkId, address, interfacesIERC1820SetManagerRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820SetManager200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.setManager (asynchronously)
     * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820SetManagerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820SetManagerAsync(String networkId, String address, InterfacesIERC1820SetManagerRequest interfacesIERC1820SetManagerRequest, final ApiCallback<InterfacesIERC1820SetManager200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820SetManagerValidateBeforeCall(networkId, address, interfacesIERC1820SetManagerRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820SetManager200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1820UpdateERC165Cache
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820UpdateERC165CacheCall(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820ImplementsERC165InterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1820UpdateERC165CacheValidateBeforeCall(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1820UpdateERC165Cache(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1820UpdateERC165Cache(Async)");
        }

        // verify the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' is set
        if (interfacesIERC1820ImplementsERC165InterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820ImplementsERC165InterfaceRequest' when calling interfacesIERC1820UpdateERC165Cache(Async)");
        }

        return interfacesIERC1820UpdateERC165CacheCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, _callback);

    }

    /**
     * IERC1820.updateERC165Cache
     * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @return InterfacesIERC1820UpdateERC165Cache200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1820UpdateERC165Cache200Response interfacesIERC1820UpdateERC165Cache(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response> localVarResp = interfacesIERC1820UpdateERC165CacheWithHttpInfo(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1820.updateERC165Cache
     * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1820UpdateERC165Cache200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response> interfacesIERC1820UpdateERC165CacheWithHttpInfo(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1820UpdateERC165CacheValidateBeforeCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820UpdateERC165Cache200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1820.updateERC165Cache (asynchronously)
     * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1820UpdateERC165CacheAsync(String networkId, String address, InterfacesIERC1820ImplementsERC165InterfaceRequest interfacesIERC1820ImplementsERC165InterfaceRequest, final ApiCallback<InterfacesIERC1820UpdateERC165Cache200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1820UpdateERC165CacheValidateBeforeCall(networkId, address, interfacesIERC1820ImplementsERC165InterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1820UpdateERC165Cache200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
