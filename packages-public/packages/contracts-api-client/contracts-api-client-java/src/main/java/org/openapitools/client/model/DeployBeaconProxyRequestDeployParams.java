/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeployBeaconProxyRequestDeployParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-16T18:48:04.561997+03:00[Europe/Istanbul]")
public class DeployBeaconProxyRequestDeployParams {
  public static final String SERIALIZED_NAME_MSG_SENDER = "msgSender";
  @SerializedName(SERIALIZED_NAME_MSG_SENDER)
  private String msgSender;

  public static final String SERIALIZED_NAME_SALT = "salt";
  @SerializedName(SERIALIZED_NAME_SALT)
  private String salt = "0x1";

  /**
   * Gets or Sets deploymentMethod
   */
  @JsonAdapter(DeploymentMethodEnum.Adapter.class)
  public enum DeploymentMethodEnum {
    DETERMINISTIC("DETERMINISTIC"),
    
    ERC1167("ERC1167"),
    
    BEACON_OWL("BEACON_OWL"),
    
    BEACON_EXISTING("BEACON_EXISTING"),
    
    BEACON_NEW("BEACON_NEW");

    private String value;

    DeploymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentMethodEnum fromValue(String value) {
      for (DeploymentMethodEnum b : DeploymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENT_METHOD = "deploymentMethod";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_METHOD)
  private DeploymentMethodEnum deploymentMethod;

  public static final String SERIALIZED_NAME_BEACON_ADDRESS = "beaconAddress";
  @SerializedName(SERIALIZED_NAME_BEACON_ADDRESS)
  private String beaconAddress;

  public static final String SERIALIZED_NAME_BEAON_ADMIN = "beaonAdmin";
  @SerializedName(SERIALIZED_NAME_BEAON_ADMIN)
  private String beaonAdmin;

  public DeployBeaconProxyRequestDeployParams() {
  }

  public DeployBeaconProxyRequestDeployParams msgSender(String msgSender) {
    
    this.msgSender = msgSender;
    return this;
  }

   /**
   * An ethereum address
   * @return msgSender
  **/
  @javax.annotation.Nullable
  public String getMsgSender() {
    return msgSender;
  }


  public void setMsgSender(String msgSender) {
    this.msgSender = msgSender;
  }


  public DeployBeaconProxyRequestDeployParams salt(String salt) {
    
    this.salt = salt;
    return this;
  }

   /**
   * Salt parameter string to deploy different contracts with identical parameteres (default: 1)
   * @return salt
  **/
  @javax.annotation.Nullable
  public String getSalt() {
    return salt;
  }


  public void setSalt(String salt) {
    this.salt = salt;
  }


  public DeployBeaconProxyRequestDeployParams deploymentMethod(DeploymentMethodEnum deploymentMethod) {
    
    this.deploymentMethod = deploymentMethod;
    return this;
  }

   /**
   * Get deploymentMethod
   * @return deploymentMethod
  **/
  @javax.annotation.Nonnull
  public DeploymentMethodEnum getDeploymentMethod() {
    return deploymentMethod;
  }


  public void setDeploymentMethod(DeploymentMethodEnum deploymentMethod) {
    this.deploymentMethod = deploymentMethod;
  }


  public DeployBeaconProxyRequestDeployParams beaconAddress(String beaconAddress) {
    
    this.beaconAddress = beaconAddress;
    return this;
  }

   /**
   * The address of the beacon, if used in the deployment method
   * @return beaconAddress
  **/
  @javax.annotation.Nullable
  public String getBeaconAddress() {
    return beaconAddress;
  }


  public void setBeaconAddress(String beaconAddress) {
    this.beaconAddress = beaconAddress;
  }


  public DeployBeaconProxyRequestDeployParams beaonAdmin(String beaonAdmin) {
    
    this.beaonAdmin = beaonAdmin;
    return this;
  }

   /**
   * The admin address of the beacon, if a new beacon is deployed
   * @return beaonAdmin
  **/
  @javax.annotation.Nullable
  public String getBeaonAdmin() {
    return beaonAdmin;
  }


  public void setBeaonAdmin(String beaonAdmin) {
    this.beaonAdmin = beaonAdmin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployBeaconProxyRequestDeployParams deployBeaconProxyRequestDeployParams = (DeployBeaconProxyRequestDeployParams) o;
    return Objects.equals(this.msgSender, deployBeaconProxyRequestDeployParams.msgSender) &&
        Objects.equals(this.salt, deployBeaconProxyRequestDeployParams.salt) &&
        Objects.equals(this.deploymentMethod, deployBeaconProxyRequestDeployParams.deploymentMethod) &&
        Objects.equals(this.beaconAddress, deployBeaconProxyRequestDeployParams.beaconAddress) &&
        Objects.equals(this.beaonAdmin, deployBeaconProxyRequestDeployParams.beaonAdmin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msgSender, salt, deploymentMethod, beaconAddress, beaonAdmin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployBeaconProxyRequestDeployParams {\n");
    sb.append("    msgSender: ").append(toIndentedString(msgSender)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("    deploymentMethod: ").append(toIndentedString(deploymentMethod)).append("\n");
    sb.append("    beaconAddress: ").append(toIndentedString(beaconAddress)).append("\n");
    sb.append("    beaonAdmin: ").append(toIndentedString(beaonAdmin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msgSender");
    openapiFields.add("salt");
    openapiFields.add("deploymentMethod");
    openapiFields.add("beaconAddress");
    openapiFields.add("beaonAdmin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deploymentMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeployBeaconProxyRequestDeployParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeployBeaconProxyRequestDeployParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployBeaconProxyRequestDeployParams is not found in the empty JSON string", DeployBeaconProxyRequestDeployParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeployBeaconProxyRequestDeployParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployBeaconProxyRequestDeployParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeployBeaconProxyRequestDeployParams.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("msgSender") != null && !jsonObj.get("msgSender").isJsonNull()) && !jsonObj.get("msgSender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msgSender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msgSender").toString()));
      }
      if ((jsonObj.get("salt") != null && !jsonObj.get("salt").isJsonNull()) && !jsonObj.get("salt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salt").toString()));
      }
      if (!jsonObj.get("deploymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentMethod").toString()));
      }
      if ((jsonObj.get("beaconAddress") != null && !jsonObj.get("beaconAddress").isJsonNull()) && !jsonObj.get("beaconAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beaconAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beaconAddress").toString()));
      }
      if ((jsonObj.get("beaonAdmin") != null && !jsonObj.get("beaonAdmin").isJsonNull()) && !jsonObj.get("beaonAdmin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beaonAdmin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beaonAdmin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployBeaconProxyRequestDeployParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployBeaconProxyRequestDeployParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployBeaconProxyRequestDeployParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployBeaconProxyRequestDeployParams.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployBeaconProxyRequestDeployParams>() {
           @Override
           public void write(JsonWriter out, DeployBeaconProxyRequestDeployParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployBeaconProxyRequestDeployParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeployBeaconProxyRequestDeployParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeployBeaconProxyRequestDeployParams
  * @throws IOException if the JSON string is invalid with respect to DeployBeaconProxyRequestDeployParams
  */
  public static DeployBeaconProxyRequestDeployParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployBeaconProxyRequestDeployParams.class);
  }

 /**
  * Convert an instance of DeployBeaconProxyRequestDeployParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

