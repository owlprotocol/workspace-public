/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIBeaconImplementationRequest;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;
import org.openapitools.client.model.InterfacesIERC20TotalSupply200Response;
import org.openapitools.client.model.InterfacesIERC721Approve200Response;
import org.openapitools.client.model.InterfacesIERC721ApproveRequest;
import org.openapitools.client.model.InterfacesIERC721BalanceOf200Response;
import org.openapitools.client.model.InterfacesIERC721BalanceOfRequest;
import org.openapitools.client.model.InterfacesIERC721EnumerableTokenByIndex200Response;
import org.openapitools.client.model.InterfacesIERC721EnumerableTokenByIndexRequest;
import org.openapitools.client.model.InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response;
import org.openapitools.client.model.InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest;
import org.openapitools.client.model.InterfacesIERC721GetApproved200Response;
import org.openapitools.client.model.InterfacesIERC721GetApprovedRequest;
import org.openapitools.client.model.InterfacesIERC721IsApprovedForAll200Response;
import org.openapitools.client.model.InterfacesIERC721IsApprovedForAllRequest;
import org.openapitools.client.model.InterfacesIERC721OwnerOf200Response;
import org.openapitools.client.model.InterfacesIERC721SafeTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC721SafeTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC721SetApprovalForAll200Response;
import org.openapitools.client.model.InterfacesIERC721SetApprovalForAllRequest;
import org.openapitools.client.model.InterfacesIERC721TransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC721TransferFromRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Ierc721EnumerableApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ierc721EnumerableApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Ierc721EnumerableApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIERC721EnumerableApprove
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableApproveCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721ApproveRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/write/{address}/approve"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableApproveValidateBeforeCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableApprove(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableApprove(Async)");
        }

        // verify the required parameter 'interfacesIERC721ApproveRequest' is set
        if (interfacesIERC721ApproveRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721EnumerableApprove(Async)");
        }

        return interfacesIERC721EnumerableApproveCall(networkId, address, interfacesIERC721ApproveRequest, _callback);

    }

    /**
     * IERC721Enumerable.approve
     * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return InterfacesIERC721Approve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721Approve200Response interfacesIERC721EnumerableApprove(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        ApiResponse<InterfacesIERC721Approve200Response> localVarResp = interfacesIERC721EnumerableApproveWithHttpInfo(networkId, address, interfacesIERC721ApproveRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.approve
     * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721Approve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721Approve200Response> interfacesIERC721EnumerableApproveWithHttpInfo(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableApproveValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.approve (asynchronously)
     * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableApproveAsync(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback<InterfacesIERC721Approve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableApproveValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableBalanceOf
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableBalanceOfCall(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721BalanceOfRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/balanceOf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableBalanceOfValidateBeforeCall(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableBalanceOf(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableBalanceOf(Async)");
        }

        // verify the required parameter 'interfacesIERC721BalanceOfRequest' is set
        if (interfacesIERC721BalanceOfRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721BalanceOfRequest' when calling interfacesIERC721EnumerableBalanceOf(Async)");
        }

        return interfacesIERC721EnumerableBalanceOfCall(networkId, address, interfacesIERC721BalanceOfRequest, _callback);

    }

    /**
     * IERC721Enumerable.balanceOf
     * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @return InterfacesIERC721BalanceOf200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721BalanceOf200Response interfacesIERC721EnumerableBalanceOf(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest) throws ApiException {
        ApiResponse<InterfacesIERC721BalanceOf200Response> localVarResp = interfacesIERC721EnumerableBalanceOfWithHttpInfo(networkId, address, interfacesIERC721BalanceOfRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.balanceOf
     * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721BalanceOf200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721BalanceOf200Response> interfacesIERC721EnumerableBalanceOfWithHttpInfo(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableBalanceOfValidateBeforeCall(networkId, address, interfacesIERC721BalanceOfRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721BalanceOf200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.balanceOf (asynchronously)
     * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableBalanceOfAsync(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final ApiCallback<InterfacesIERC721BalanceOf200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableBalanceOfValidateBeforeCall(networkId, address, interfacesIERC721BalanceOfRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721BalanceOf200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableGetApproved
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableGetApprovedCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721GetApprovedRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/getApproved"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableGetApprovedValidateBeforeCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableGetApproved(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableGetApproved(Async)");
        }

        // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
        if (interfacesIERC721GetApprovedRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721EnumerableGetApproved(Async)");
        }

        return interfacesIERC721EnumerableGetApprovedCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);

    }

    /**
     * IERC721Enumerable.getApproved
     * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return InterfacesIERC721GetApproved200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721GetApproved200Response interfacesIERC721EnumerableGetApproved(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        ApiResponse<InterfacesIERC721GetApproved200Response> localVarResp = interfacesIERC721EnumerableGetApprovedWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.getApproved
     * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721GetApproved200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721GetApproved200Response> interfacesIERC721EnumerableGetApprovedWithHttpInfo(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableGetApprovedValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721GetApproved200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.getApproved (asynchronously)
     * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableGetApprovedAsync(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback<InterfacesIERC721GetApproved200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableGetApprovedValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721GetApproved200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableIsApprovedForAll
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableIsApprovedForAllCall(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721IsApprovedForAllRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/isApprovedForAll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableIsApprovedForAllValidateBeforeCall(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableIsApprovedForAll(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableIsApprovedForAll(Async)");
        }

        // verify the required parameter 'interfacesIERC721IsApprovedForAllRequest' is set
        if (interfacesIERC721IsApprovedForAllRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling interfacesIERC721EnumerableIsApprovedForAll(Async)");
        }

        return interfacesIERC721EnumerableIsApprovedForAllCall(networkId, address, interfacesIERC721IsApprovedForAllRequest, _callback);

    }

    /**
     * IERC721Enumerable.isApprovedForAll
     * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @return InterfacesIERC721IsApprovedForAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721IsApprovedForAll200Response interfacesIERC721EnumerableIsApprovedForAll(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest) throws ApiException {
        ApiResponse<InterfacesIERC721IsApprovedForAll200Response> localVarResp = interfacesIERC721EnumerableIsApprovedForAllWithHttpInfo(networkId, address, interfacesIERC721IsApprovedForAllRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.isApprovedForAll
     * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721IsApprovedForAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721IsApprovedForAll200Response> interfacesIERC721EnumerableIsApprovedForAllWithHttpInfo(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableIsApprovedForAllValidateBeforeCall(networkId, address, interfacesIERC721IsApprovedForAllRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721IsApprovedForAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.isApprovedForAll (asynchronously)
     * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableIsApprovedForAllAsync(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final ApiCallback<InterfacesIERC721IsApprovedForAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableIsApprovedForAllValidateBeforeCall(networkId, address, interfacesIERC721IsApprovedForAllRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721IsApprovedForAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableOwnerOf
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableOwnerOfCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721GetApprovedRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/ownerOf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableOwnerOfValidateBeforeCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableOwnerOf(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableOwnerOf(Async)");
        }

        // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
        if (interfacesIERC721GetApprovedRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721EnumerableOwnerOf(Async)");
        }

        return interfacesIERC721EnumerableOwnerOfCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);

    }

    /**
     * IERC721Enumerable.ownerOf
     * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return InterfacesIERC721OwnerOf200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721OwnerOf200Response interfacesIERC721EnumerableOwnerOf(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        ApiResponse<InterfacesIERC721OwnerOf200Response> localVarResp = interfacesIERC721EnumerableOwnerOfWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.ownerOf
     * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721OwnerOf200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721OwnerOf200Response> interfacesIERC721EnumerableOwnerOfWithHttpInfo(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableOwnerOfValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721OwnerOf200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.ownerOf (asynchronously)
     * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableOwnerOfAsync(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback<InterfacesIERC721OwnerOf200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableOwnerOfValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721OwnerOf200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableSafeTransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableSafeTransferFromCall(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721SafeTransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/write/{address}/safeTransferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableSafeTransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableSafeTransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableSafeTransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC721SafeTransferFromRequest' is set
        if (interfacesIERC721SafeTransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721SafeTransferFromRequest' when calling interfacesIERC721EnumerableSafeTransferFrom(Async)");
        }

        return interfacesIERC721EnumerableSafeTransferFromCall(networkId, address, interfacesIERC721SafeTransferFromRequest, _callback);

    }

    /**
     * IERC721Enumerable.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @return InterfacesIERC721SafeTransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721SafeTransferFrom200Response interfacesIERC721EnumerableSafeTransferFrom(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC721SafeTransferFrom200Response> localVarResp = interfacesIERC721EnumerableSafeTransferFromWithHttpInfo(networkId, address, interfacesIERC721SafeTransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721SafeTransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721SafeTransferFrom200Response> interfacesIERC721EnumerableSafeTransferFromWithHttpInfo(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableSafeTransferFromValidateBeforeCall(networkId, address, interfacesIERC721SafeTransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SafeTransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.safeTransferFrom (asynchronously)
     * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableSafeTransferFromAsync(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final ApiCallback<InterfacesIERC721SafeTransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableSafeTransferFromValidateBeforeCall(networkId, address, interfacesIERC721SafeTransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SafeTransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableSetApprovalForAll
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableSetApprovalForAllCall(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721SetApprovalForAllRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/write/{address}/setApprovalForAll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableSetApprovalForAllValidateBeforeCall(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableSetApprovalForAll(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableSetApprovalForAll(Async)");
        }

        // verify the required parameter 'interfacesIERC721SetApprovalForAllRequest' is set
        if (interfacesIERC721SetApprovalForAllRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling interfacesIERC721EnumerableSetApprovalForAll(Async)");
        }

        return interfacesIERC721EnumerableSetApprovalForAllCall(networkId, address, interfacesIERC721SetApprovalForAllRequest, _callback);

    }

    /**
     * IERC721Enumerable.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @return InterfacesIERC721SetApprovalForAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721SetApprovalForAll200Response interfacesIERC721EnumerableSetApprovalForAll(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest) throws ApiException {
        ApiResponse<InterfacesIERC721SetApprovalForAll200Response> localVarResp = interfacesIERC721EnumerableSetApprovalForAllWithHttpInfo(networkId, address, interfacesIERC721SetApprovalForAllRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721SetApprovalForAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721SetApprovalForAll200Response> interfacesIERC721EnumerableSetApprovalForAllWithHttpInfo(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableSetApprovalForAllValidateBeforeCall(networkId, address, interfacesIERC721SetApprovalForAllRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SetApprovalForAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.setApprovalForAll (asynchronously)
     * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableSetApprovalForAllAsync(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final ApiCallback<InterfacesIERC721SetApprovalForAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableSetApprovalForAllValidateBeforeCall(networkId, address, interfacesIERC721SetApprovalForAllRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SetApprovalForAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableSupportsInterface
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableSupportsInterfaceCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC165SupportsInterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/supportsInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableSupportsInterfaceValidateBeforeCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableSupportsInterface(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableSupportsInterface(Async)");
        }

        // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
        if (interfacesIERC165SupportsInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC721EnumerableSupportsInterface(Async)");
        }

        return interfacesIERC721EnumerableSupportsInterfaceCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);

    }

    /**
     * IERC721Enumerable.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return InterfacesIERC165SupportsInterface200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC165SupportsInterface200Response interfacesIERC721EnumerableSupportsInterface(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResp = interfacesIERC721EnumerableSupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC165SupportsInterface200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC165SupportsInterface200Response> interfacesIERC721EnumerableSupportsInterfaceWithHttpInfo(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableSupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.supportsInterface (asynchronously)
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableSupportsInterfaceAsync(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback<InterfacesIERC165SupportsInterface200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableSupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableTokenByIndex
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenByIndexRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTokenByIndexCall(String networkId, String address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721EnumerableTokenByIndexRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/tokenByIndex"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableTokenByIndexValidateBeforeCall(String networkId, String address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableTokenByIndex(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableTokenByIndex(Async)");
        }

        // verify the required parameter 'interfacesIERC721EnumerableTokenByIndexRequest' is set
        if (interfacesIERC721EnumerableTokenByIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721EnumerableTokenByIndexRequest' when calling interfacesIERC721EnumerableTokenByIndex(Async)");
        }

        return interfacesIERC721EnumerableTokenByIndexCall(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest, _callback);

    }

    /**
     * IERC721Enumerable.tokenByIndex
     * Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenByIndexRequest  (required)
     * @return InterfacesIERC721EnumerableTokenByIndex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721EnumerableTokenByIndex200Response interfacesIERC721EnumerableTokenByIndex(String networkId, String address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest) throws ApiException {
        ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response> localVarResp = interfacesIERC721EnumerableTokenByIndexWithHttpInfo(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.tokenByIndex
     * Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenByIndexRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721EnumerableTokenByIndex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721EnumerableTokenByIndex200Response> interfacesIERC721EnumerableTokenByIndexWithHttpInfo(String networkId, String address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableTokenByIndexValidateBeforeCall(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721EnumerableTokenByIndex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.tokenByIndex (asynchronously)
     * Read &#x60;tokenByIndex(index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenByIndexRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTokenByIndexAsync(String networkId, String address, InterfacesIERC721EnumerableTokenByIndexRequest interfacesIERC721EnumerableTokenByIndexRequest, final ApiCallback<InterfacesIERC721EnumerableTokenByIndex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableTokenByIndexValidateBeforeCall(networkId, address, interfacesIERC721EnumerableTokenByIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721EnumerableTokenByIndex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableTokenOfOwnerByIndex
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenOfOwnerByIndexRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTokenOfOwnerByIndexCall(String networkId, String address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721EnumerableTokenOfOwnerByIndexRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/tokenOfOwnerByIndex"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableTokenOfOwnerByIndexValidateBeforeCall(String networkId, String address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableTokenOfOwnerByIndex(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableTokenOfOwnerByIndex(Async)");
        }

        // verify the required parameter 'interfacesIERC721EnumerableTokenOfOwnerByIndexRequest' is set
        if (interfacesIERC721EnumerableTokenOfOwnerByIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721EnumerableTokenOfOwnerByIndexRequest' when calling interfacesIERC721EnumerableTokenOfOwnerByIndex(Async)");
        }

        return interfacesIERC721EnumerableTokenOfOwnerByIndexCall(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, _callback);

    }

    /**
     * IERC721Enumerable.tokenOfOwnerByIndex
     * Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenOfOwnerByIndexRequest  (required)
     * @return InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response interfacesIERC721EnumerableTokenOfOwnerByIndex(String networkId, String address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest) throws ApiException {
        ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> localVarResp = interfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfo(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.tokenOfOwnerByIndex
     * Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenOfOwnerByIndexRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> interfacesIERC721EnumerableTokenOfOwnerByIndexWithHttpInfo(String networkId, String address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableTokenOfOwnerByIndexValidateBeforeCall(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.tokenOfOwnerByIndex (asynchronously)
     * Read &#x60;tokenOfOwnerByIndex(owner,index)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721EnumerableTokenOfOwnerByIndexRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTokenOfOwnerByIndexAsync(String networkId, String address, InterfacesIERC721EnumerableTokenOfOwnerByIndexRequest interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, final ApiCallback<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableTokenOfOwnerByIndexValidateBeforeCall(networkId, address, interfacesIERC721EnumerableTokenOfOwnerByIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721EnumerableTokenOfOwnerByIndex200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableTotalSupply
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTotalSupplyCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIBeaconImplementationRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/read/{address}/totalSupply"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableTotalSupplyValidateBeforeCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableTotalSupply(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableTotalSupply(Async)");
        }

        // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
        if (interfacesIBeaconImplementationRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC721EnumerableTotalSupply(Async)");
        }

        return interfacesIERC721EnumerableTotalSupplyCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);

    }

    /**
     * IERC721Enumerable.totalSupply
     * Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return InterfacesIERC20TotalSupply200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20TotalSupply200Response interfacesIERC721EnumerableTotalSupply(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        ApiResponse<InterfacesIERC20TotalSupply200Response> localVarResp = interfacesIERC721EnumerableTotalSupplyWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.totalSupply
     * Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20TotalSupply200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20TotalSupply200Response> interfacesIERC721EnumerableTotalSupplyWithHttpInfo(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableTotalSupplyValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20TotalSupply200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.totalSupply (asynchronously)
     * Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTotalSupplyAsync(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback<InterfacesIERC20TotalSupply200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableTotalSupplyValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20TotalSupply200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721EnumerableTransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTransferFromCall(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721TransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721Enumerable/write/{address}/transferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721EnumerableTransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721EnumerableTransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721EnumerableTransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC721TransferFromRequest' is set
        if (interfacesIERC721TransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721TransferFromRequest' when calling interfacesIERC721EnumerableTransferFrom(Async)");
        }

        return interfacesIERC721EnumerableTransferFromCall(networkId, address, interfacesIERC721TransferFromRequest, _callback);

    }

    /**
     * IERC721Enumerable.transferFrom
     * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @return InterfacesIERC721TransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721TransferFrom200Response interfacesIERC721EnumerableTransferFrom(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC721TransferFrom200Response> localVarResp = interfacesIERC721EnumerableTransferFromWithHttpInfo(networkId, address, interfacesIERC721TransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721Enumerable.transferFrom
     * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721TransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721TransferFrom200Response> interfacesIERC721EnumerableTransferFromWithHttpInfo(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721EnumerableTransferFromValidateBeforeCall(networkId, address, interfacesIERC721TransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721TransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721Enumerable.transferFrom (asynchronously)
     * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721Enumerable&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721EnumerableTransferFromAsync(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final ApiCallback<InterfacesIERC721TransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721EnumerableTransferFromValidateBeforeCall(networkId, address, interfacesIERC721TransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721TransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
