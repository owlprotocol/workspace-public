/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIBeaconImplementationRequest;
import org.openapitools.client.model.InterfacesIERC1820GetManagerRequest;
import org.openapitools.client.model.InterfacesIERC20Allowance200Response;
import org.openapitools.client.model.InterfacesIERC20AllowanceRequest;
import org.openapitools.client.model.InterfacesIERC20Approve200Response;
import org.openapitools.client.model.InterfacesIERC20ApproveRequest;
import org.openapitools.client.model.InterfacesIERC20BalanceOf200Response;
import org.openapitools.client.model.InterfacesIERC20TotalSupply200Response;
import org.openapitools.client.model.InterfacesIERC20Transfer200Response;
import org.openapitools.client.model.InterfacesIERC20TransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC20TransferFromRequest;
import org.openapitools.client.model.InterfacesIERC20TransferRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Ierc20Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ierc20Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Ierc20Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIERC20Allowance
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20AllowanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20AllowanceCall(String networkId, String address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC20AllowanceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC20/read/{address}/allowance"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC20AllowanceValidateBeforeCall(String networkId, String address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC20Allowance(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC20Allowance(Async)");
        }

        // verify the required parameter 'interfacesIERC20AllowanceRequest' is set
        if (interfacesIERC20AllowanceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC20AllowanceRequest' when calling interfacesIERC20Allowance(Async)");
        }

        return interfacesIERC20AllowanceCall(networkId, address, interfacesIERC20AllowanceRequest, _callback);

    }

    /**
     * IERC20.allowance
     * Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20AllowanceRequest  (required)
     * @return InterfacesIERC20Allowance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20Allowance200Response interfacesIERC20Allowance(String networkId, String address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest) throws ApiException {
        ApiResponse<InterfacesIERC20Allowance200Response> localVarResp = interfacesIERC20AllowanceWithHttpInfo(networkId, address, interfacesIERC20AllowanceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC20.allowance
     * Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20AllowanceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20Allowance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20Allowance200Response> interfacesIERC20AllowanceWithHttpInfo(String networkId, String address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC20AllowanceValidateBeforeCall(networkId, address, interfacesIERC20AllowanceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Allowance200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC20.allowance (asynchronously)
     * Read &#x60;allowance(owner,spender)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20AllowanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20AllowanceAsync(String networkId, String address, InterfacesIERC20AllowanceRequest interfacesIERC20AllowanceRequest, final ApiCallback<InterfacesIERC20Allowance200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC20AllowanceValidateBeforeCall(networkId, address, interfacesIERC20AllowanceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Allowance200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC20Approve
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20ApproveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20ApproveCall(String networkId, String address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC20ApproveRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC20/write/{address}/approve"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC20ApproveValidateBeforeCall(String networkId, String address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC20Approve(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC20Approve(Async)");
        }

        // verify the required parameter 'interfacesIERC20ApproveRequest' is set
        if (interfacesIERC20ApproveRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC20ApproveRequest' when calling interfacesIERC20Approve(Async)");
        }

        return interfacesIERC20ApproveCall(networkId, address, interfacesIERC20ApproveRequest, _callback);

    }

    /**
     * IERC20.approve
     * Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20ApproveRequest  (required)
     * @return InterfacesIERC20Approve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20Approve200Response interfacesIERC20Approve(String networkId, String address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest) throws ApiException {
        ApiResponse<InterfacesIERC20Approve200Response> localVarResp = interfacesIERC20ApproveWithHttpInfo(networkId, address, interfacesIERC20ApproveRequest);
        return localVarResp.getData();
    }

    /**
     * IERC20.approve
     * Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20ApproveRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20Approve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20Approve200Response> interfacesIERC20ApproveWithHttpInfo(String networkId, String address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC20ApproveValidateBeforeCall(networkId, address, interfacesIERC20ApproveRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Approve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC20.approve (asynchronously)
     * Write &#x60;approve(spender,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20ApproveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20ApproveAsync(String networkId, String address, InterfacesIERC20ApproveRequest interfacesIERC20ApproveRequest, final ApiCallback<InterfacesIERC20Approve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC20ApproveValidateBeforeCall(networkId, address, interfacesIERC20ApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Approve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC20BalanceOf
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20BalanceOfCall(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1820GetManagerRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC20/read/{address}/balanceOf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC20BalanceOfValidateBeforeCall(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC20BalanceOf(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC20BalanceOf(Async)");
        }

        // verify the required parameter 'interfacesIERC1820GetManagerRequest' is set
        if (interfacesIERC1820GetManagerRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1820GetManagerRequest' when calling interfacesIERC20BalanceOf(Async)");
        }

        return interfacesIERC20BalanceOfCall(networkId, address, interfacesIERC1820GetManagerRequest, _callback);

    }

    /**
     * IERC20.balanceOf
     * Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @return InterfacesIERC20BalanceOf200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20BalanceOf200Response interfacesIERC20BalanceOf(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest) throws ApiException {
        ApiResponse<InterfacesIERC20BalanceOf200Response> localVarResp = interfacesIERC20BalanceOfWithHttpInfo(networkId, address, interfacesIERC1820GetManagerRequest);
        return localVarResp.getData();
    }

    /**
     * IERC20.balanceOf
     * Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20BalanceOf200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20BalanceOf200Response> interfacesIERC20BalanceOfWithHttpInfo(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC20BalanceOfValidateBeforeCall(networkId, address, interfacesIERC1820GetManagerRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20BalanceOf200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC20.balanceOf (asynchronously)
     * Read &#x60;balanceOf(account)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1820GetManagerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20BalanceOfAsync(String networkId, String address, InterfacesIERC1820GetManagerRequest interfacesIERC1820GetManagerRequest, final ApiCallback<InterfacesIERC20BalanceOf200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC20BalanceOfValidateBeforeCall(networkId, address, interfacesIERC1820GetManagerRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20BalanceOf200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC20TotalSupply
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20TotalSupplyCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIBeaconImplementationRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC20/read/{address}/totalSupply"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC20TotalSupplyValidateBeforeCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC20TotalSupply(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC20TotalSupply(Async)");
        }

        // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
        if (interfacesIBeaconImplementationRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIERC20TotalSupply(Async)");
        }

        return interfacesIERC20TotalSupplyCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);

    }

    /**
     * IERC20.totalSupply
     * Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return InterfacesIERC20TotalSupply200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20TotalSupply200Response interfacesIERC20TotalSupply(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        ApiResponse<InterfacesIERC20TotalSupply200Response> localVarResp = interfacesIERC20TotalSupplyWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
        return localVarResp.getData();
    }

    /**
     * IERC20.totalSupply
     * Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20TotalSupply200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20TotalSupply200Response> interfacesIERC20TotalSupplyWithHttpInfo(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC20TotalSupplyValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20TotalSupply200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC20.totalSupply (asynchronously)
     * Read &#x60;totalSupply()&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20TotalSupplyAsync(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback<InterfacesIERC20TotalSupply200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC20TotalSupplyValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20TotalSupply200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC20Transfer
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20TransferCall(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC20TransferRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC20/write/{address}/transfer"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC20TransferValidateBeforeCall(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC20Transfer(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC20Transfer(Async)");
        }

        // verify the required parameter 'interfacesIERC20TransferRequest' is set
        if (interfacesIERC20TransferRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC20TransferRequest' when calling interfacesIERC20Transfer(Async)");
        }

        return interfacesIERC20TransferCall(networkId, address, interfacesIERC20TransferRequest, _callback);

    }

    /**
     * IERC20.transfer
     * Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @return InterfacesIERC20Transfer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20Transfer200Response interfacesIERC20Transfer(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest) throws ApiException {
        ApiResponse<InterfacesIERC20Transfer200Response> localVarResp = interfacesIERC20TransferWithHttpInfo(networkId, address, interfacesIERC20TransferRequest);
        return localVarResp.getData();
    }

    /**
     * IERC20.transfer
     * Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20Transfer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20Transfer200Response> interfacesIERC20TransferWithHttpInfo(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC20TransferValidateBeforeCall(networkId, address, interfacesIERC20TransferRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Transfer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC20.transfer (asynchronously)
     * Write &#x60;transfer(to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20TransferAsync(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final ApiCallback<InterfacesIERC20Transfer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC20TransferValidateBeforeCall(networkId, address, interfacesIERC20TransferRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Transfer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC20TransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20TransferFromCall(String networkId, String address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC20TransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC20/write/{address}/transferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC20TransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC20TransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC20TransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC20TransferFromRequest' is set
        if (interfacesIERC20TransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC20TransferFromRequest' when calling interfacesIERC20TransferFrom(Async)");
        }

        return interfacesIERC20TransferFromCall(networkId, address, interfacesIERC20TransferFromRequest, _callback);

    }

    /**
     * IERC20.transferFrom
     * Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferFromRequest  (required)
     * @return InterfacesIERC20TransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20TransferFrom200Response interfacesIERC20TransferFrom(String networkId, String address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC20TransferFrom200Response> localVarResp = interfacesIERC20TransferFromWithHttpInfo(networkId, address, interfacesIERC20TransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC20.transferFrom
     * Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20TransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20TransferFrom200Response> interfacesIERC20TransferFromWithHttpInfo(String networkId, String address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC20TransferFromValidateBeforeCall(networkId, address, interfacesIERC20TransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20TransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC20.transferFrom (asynchronously)
     * Write &#x60;transferFrom(from,to,amount)&#x60; on an instance of &#x60;IERC20&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC20TransferFromAsync(String networkId, String address, InterfacesIERC20TransferFromRequest interfacesIERC20TransferFromRequest, final ApiCallback<InterfacesIERC20TransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC20TransferFromValidateBeforeCall(networkId, address, interfacesIERC20TransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20TransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
