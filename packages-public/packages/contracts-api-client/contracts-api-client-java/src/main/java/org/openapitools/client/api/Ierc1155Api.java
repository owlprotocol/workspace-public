/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIERC1155BalanceOf200Response;
import org.openapitools.client.model.InterfacesIERC1155BalanceOfBatch200Response;
import org.openapitools.client.model.InterfacesIERC1155BalanceOfBatchRequest;
import org.openapitools.client.model.InterfacesIERC1155BalanceOfRequest;
import org.openapitools.client.model.InterfacesIERC1155IsApprovedForAll200Response;
import org.openapitools.client.model.InterfacesIERC1155IsApprovedForAllRequest;
import org.openapitools.client.model.InterfacesIERC1155SafeBatchTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC1155SafeBatchTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC1155SafeTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC1155SafeTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC1155SetApprovalForAll200Response;
import org.openapitools.client.model.InterfacesIERC1155SetApprovalForAllRequest;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Ierc1155Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ierc1155Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Ierc1155Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIERC1155BalanceOf
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155BalanceOfCall(String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1155BalanceOfRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/read/{address}/balanceOf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155BalanceOfValidateBeforeCall(String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOf(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155BalanceOf(Async)");
        }

        // verify the required parameter 'interfacesIERC1155BalanceOfRequest' is set
        if (interfacesIERC1155BalanceOfRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1155BalanceOfRequest' when calling interfacesIERC1155BalanceOf(Async)");
        }

        return interfacesIERC1155BalanceOfCall(networkId, address, interfacesIERC1155BalanceOfRequest, _callback);

    }

    /**
     * IERC1155.balanceOf
     * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfRequest  (required)
     * @return InterfacesIERC1155BalanceOf200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1155BalanceOf200Response interfacesIERC1155BalanceOf(String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest) throws ApiException {
        ApiResponse<InterfacesIERC1155BalanceOf200Response> localVarResp = interfacesIERC1155BalanceOfWithHttpInfo(networkId, address, interfacesIERC1155BalanceOfRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.balanceOf
     * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1155BalanceOf200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1155BalanceOf200Response> interfacesIERC1155BalanceOfWithHttpInfo(String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155BalanceOfValidateBeforeCall(networkId, address, interfacesIERC1155BalanceOfRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155BalanceOf200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.balanceOf (asynchronously)
     * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155BalanceOfAsync(String networkId, String address, InterfacesIERC1155BalanceOfRequest interfacesIERC1155BalanceOfRequest, final ApiCallback<InterfacesIERC1155BalanceOf200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155BalanceOfValidateBeforeCall(networkId, address, interfacesIERC1155BalanceOfRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155BalanceOf200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1155BalanceOfBatch
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfBatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155BalanceOfBatchCall(String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1155BalanceOfBatchRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/read/{address}/balanceOfBatch"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155BalanceOfBatchValidateBeforeCall(String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155BalanceOfBatch(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155BalanceOfBatch(Async)");
        }

        // verify the required parameter 'interfacesIERC1155BalanceOfBatchRequest' is set
        if (interfacesIERC1155BalanceOfBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1155BalanceOfBatchRequest' when calling interfacesIERC1155BalanceOfBatch(Async)");
        }

        return interfacesIERC1155BalanceOfBatchCall(networkId, address, interfacesIERC1155BalanceOfBatchRequest, _callback);

    }

    /**
     * IERC1155.balanceOfBatch
     * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfBatchRequest  (required)
     * @return InterfacesIERC1155BalanceOfBatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1155BalanceOfBatch200Response interfacesIERC1155BalanceOfBatch(String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest) throws ApiException {
        ApiResponse<InterfacesIERC1155BalanceOfBatch200Response> localVarResp = interfacesIERC1155BalanceOfBatchWithHttpInfo(networkId, address, interfacesIERC1155BalanceOfBatchRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.balanceOfBatch
     * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfBatchRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1155BalanceOfBatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1155BalanceOfBatch200Response> interfacesIERC1155BalanceOfBatchWithHttpInfo(String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155BalanceOfBatchValidateBeforeCall(networkId, address, interfacesIERC1155BalanceOfBatchRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155BalanceOfBatch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.balanceOfBatch (asynchronously)
     * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155BalanceOfBatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155BalanceOfBatchAsync(String networkId, String address, InterfacesIERC1155BalanceOfBatchRequest interfacesIERC1155BalanceOfBatchRequest, final ApiCallback<InterfacesIERC1155BalanceOfBatch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155BalanceOfBatchValidateBeforeCall(networkId, address, interfacesIERC1155BalanceOfBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155BalanceOfBatch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1155IsApprovedForAll
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155IsApprovedForAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155IsApprovedForAllCall(String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1155IsApprovedForAllRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/read/{address}/isApprovedForAll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155IsApprovedForAllValidateBeforeCall(String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155IsApprovedForAll(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155IsApprovedForAll(Async)");
        }

        // verify the required parameter 'interfacesIERC1155IsApprovedForAllRequest' is set
        if (interfacesIERC1155IsApprovedForAllRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1155IsApprovedForAllRequest' when calling interfacesIERC1155IsApprovedForAll(Async)");
        }

        return interfacesIERC1155IsApprovedForAllCall(networkId, address, interfacesIERC1155IsApprovedForAllRequest, _callback);

    }

    /**
     * IERC1155.isApprovedForAll
     * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155IsApprovedForAllRequest  (required)
     * @return InterfacesIERC1155IsApprovedForAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1155IsApprovedForAll200Response interfacesIERC1155IsApprovedForAll(String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest) throws ApiException {
        ApiResponse<InterfacesIERC1155IsApprovedForAll200Response> localVarResp = interfacesIERC1155IsApprovedForAllWithHttpInfo(networkId, address, interfacesIERC1155IsApprovedForAllRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.isApprovedForAll
     * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155IsApprovedForAllRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1155IsApprovedForAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1155IsApprovedForAll200Response> interfacesIERC1155IsApprovedForAllWithHttpInfo(String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155IsApprovedForAllValidateBeforeCall(networkId, address, interfacesIERC1155IsApprovedForAllRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155IsApprovedForAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.isApprovedForAll (asynchronously)
     * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155IsApprovedForAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155IsApprovedForAllAsync(String networkId, String address, InterfacesIERC1155IsApprovedForAllRequest interfacesIERC1155IsApprovedForAllRequest, final ApiCallback<InterfacesIERC1155IsApprovedForAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155IsApprovedForAllValidateBeforeCall(networkId, address, interfacesIERC1155IsApprovedForAllRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155IsApprovedForAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1155SafeBatchTransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeBatchTransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SafeBatchTransferFromCall(String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1155SafeBatchTransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/write/{address}/safeBatchTransferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155SafeBatchTransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155SafeBatchTransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155SafeBatchTransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' is set
        if (interfacesIERC1155SafeBatchTransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1155SafeBatchTransferFromRequest' when calling interfacesIERC1155SafeBatchTransferFrom(Async)");
        }

        return interfacesIERC1155SafeBatchTransferFromCall(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest, _callback);

    }

    /**
     * IERC1155.safeBatchTransferFrom
     * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeBatchTransferFromRequest  (required)
     * @return InterfacesIERC1155SafeBatchTransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1155SafeBatchTransferFrom200Response interfacesIERC1155SafeBatchTransferFrom(String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response> localVarResp = interfacesIERC1155SafeBatchTransferFromWithHttpInfo(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.safeBatchTransferFrom
     * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeBatchTransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1155SafeBatchTransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response> interfacesIERC1155SafeBatchTransferFromWithHttpInfo(String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155SafeBatchTransferFromValidateBeforeCall(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155SafeBatchTransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.safeBatchTransferFrom (asynchronously)
     * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeBatchTransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SafeBatchTransferFromAsync(String networkId, String address, InterfacesIERC1155SafeBatchTransferFromRequest interfacesIERC1155SafeBatchTransferFromRequest, final ApiCallback<InterfacesIERC1155SafeBatchTransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155SafeBatchTransferFromValidateBeforeCall(networkId, address, interfacesIERC1155SafeBatchTransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155SafeBatchTransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1155SafeTransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeTransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SafeTransferFromCall(String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1155SafeTransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/write/{address}/safeTransferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155SafeTransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155SafeTransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155SafeTransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC1155SafeTransferFromRequest' is set
        if (interfacesIERC1155SafeTransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1155SafeTransferFromRequest' when calling interfacesIERC1155SafeTransferFrom(Async)");
        }

        return interfacesIERC1155SafeTransferFromCall(networkId, address, interfacesIERC1155SafeTransferFromRequest, _callback);

    }

    /**
     * IERC1155.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeTransferFromRequest  (required)
     * @return InterfacesIERC1155SafeTransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1155SafeTransferFrom200Response interfacesIERC1155SafeTransferFrom(String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC1155SafeTransferFrom200Response> localVarResp = interfacesIERC1155SafeTransferFromWithHttpInfo(networkId, address, interfacesIERC1155SafeTransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeTransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1155SafeTransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1155SafeTransferFrom200Response> interfacesIERC1155SafeTransferFromWithHttpInfo(String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155SafeTransferFromValidateBeforeCall(networkId, address, interfacesIERC1155SafeTransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155SafeTransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.safeTransferFrom (asynchronously)
     * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SafeTransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SafeTransferFromAsync(String networkId, String address, InterfacesIERC1155SafeTransferFromRequest interfacesIERC1155SafeTransferFromRequest, final ApiCallback<InterfacesIERC1155SafeTransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155SafeTransferFromValidateBeforeCall(networkId, address, interfacesIERC1155SafeTransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155SafeTransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1155SetApprovalForAll
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SetApprovalForAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SetApprovalForAllCall(String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC1155SetApprovalForAllRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/write/{address}/setApprovalForAll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155SetApprovalForAllValidateBeforeCall(String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155SetApprovalForAll(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155SetApprovalForAll(Async)");
        }

        // verify the required parameter 'interfacesIERC1155SetApprovalForAllRequest' is set
        if (interfacesIERC1155SetApprovalForAllRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC1155SetApprovalForAllRequest' when calling interfacesIERC1155SetApprovalForAll(Async)");
        }

        return interfacesIERC1155SetApprovalForAllCall(networkId, address, interfacesIERC1155SetApprovalForAllRequest, _callback);

    }

    /**
     * IERC1155.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SetApprovalForAllRequest  (required)
     * @return InterfacesIERC1155SetApprovalForAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC1155SetApprovalForAll200Response interfacesIERC1155SetApprovalForAll(String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest) throws ApiException {
        ApiResponse<InterfacesIERC1155SetApprovalForAll200Response> localVarResp = interfacesIERC1155SetApprovalForAllWithHttpInfo(networkId, address, interfacesIERC1155SetApprovalForAllRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SetApprovalForAllRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC1155SetApprovalForAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC1155SetApprovalForAll200Response> interfacesIERC1155SetApprovalForAllWithHttpInfo(String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155SetApprovalForAllValidateBeforeCall(networkId, address, interfacesIERC1155SetApprovalForAllRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155SetApprovalForAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.setApprovalForAll (asynchronously)
     * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC1155SetApprovalForAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SetApprovalForAllAsync(String networkId, String address, InterfacesIERC1155SetApprovalForAllRequest interfacesIERC1155SetApprovalForAllRequest, final ApiCallback<InterfacesIERC1155SetApprovalForAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155SetApprovalForAllValidateBeforeCall(networkId, address, interfacesIERC1155SetApprovalForAllRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC1155SetApprovalForAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC1155SupportsInterface
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SupportsInterfaceCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC165SupportsInterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC1155/read/{address}/supportsInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC1155SupportsInterfaceValidateBeforeCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC1155SupportsInterface(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC1155SupportsInterface(Async)");
        }

        // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
        if (interfacesIERC165SupportsInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC1155SupportsInterface(Async)");
        }

        return interfacesIERC1155SupportsInterfaceCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);

    }

    /**
     * IERC1155.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return InterfacesIERC165SupportsInterface200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC165SupportsInterface200Response interfacesIERC1155SupportsInterface(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResp = interfacesIERC1155SupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC1155.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC165SupportsInterface200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC165SupportsInterface200Response> interfacesIERC1155SupportsInterfaceWithHttpInfo(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC1155SupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC1155.supportsInterface (asynchronously)
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC1155SupportsInterfaceAsync(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback<InterfacesIERC165SupportsInterface200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC1155SupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
