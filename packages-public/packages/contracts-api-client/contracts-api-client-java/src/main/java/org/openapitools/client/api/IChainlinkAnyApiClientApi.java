/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIAccessControlGetRoleAdmin200Response;
import org.openapitools.client.model.InterfacesIAccessControlGetRoleAdminRequest;
import org.openapitools.client.model.InterfacesIAccessControlGrantRole200Response;
import org.openapitools.client.model.InterfacesIAccessControlGrantRoleRequest;
import org.openapitools.client.model.InterfacesIAccessControlHasRole200Response;
import org.openapitools.client.model.InterfacesIBeaconImplementationRequest;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientFulfill200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientFulfillRequest;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequest200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequestRequest;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequests200Response;
import org.openapitools.client.model.InterfacesIChainlinkAnyApiClientRequestsRequest;
import org.openapitools.client.model.InterfacesIContractURIContractURI200Response;
import org.openapitools.client.model.InterfacesIContractURISetContractURI200Response;
import org.openapitools.client.model.InterfacesIContractURISetContractURIRequest;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;
import org.openapitools.client.model.InterfacesIERC20Transfer200Response;
import org.openapitools.client.model.InterfacesIERC20TransferRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IChainlinkAnyApiClientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IChainlinkAnyApiClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IChainlinkAnyApiClientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIChainlinkAnyApiClientContractURI
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientContractURICall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIBeaconImplementationRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientContractURIValidateBeforeCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientContractURI(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientContractURI(Async)");
        }

        // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
        if (interfacesIBeaconImplementationRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientContractURI(Async)");
        }

        return interfacesIChainlinkAnyApiClientContractURICall(networkId, address, interfacesIBeaconImplementationRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.contractURI
     * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return InterfacesIContractURIContractURI200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIContractURIContractURI200Response interfacesIChainlinkAnyApiClientContractURI(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        ApiResponse<InterfacesIContractURIContractURI200Response> localVarResp = interfacesIChainlinkAnyApiClientContractURIWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.contractURI
     * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return ApiResponse&lt;InterfacesIContractURIContractURI200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIContractURIContractURI200Response> interfacesIChainlinkAnyApiClientContractURIWithHttpInfo(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientContractURIValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIContractURIContractURI200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.contractURI (asynchronously)
     * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientContractURIAsync(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback<InterfacesIContractURIContractURI200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientContractURIValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIContractURIContractURI200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientDEFAULTADMINROLE
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientDEFAULTADMINROLECall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIBeaconImplementationRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientDEFAULTADMINROLEValidateBeforeCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE(Async)");
        }

        // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
        if (interfacesIBeaconImplementationRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientDEFAULTADMINROLE(Async)");
        }

        return interfacesIChainlinkAnyApiClientDEFAULTADMINROLECall(networkId, address, interfacesIBeaconImplementationRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
     * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response interfacesIChainlinkAnyApiClientDEFAULTADMINROLE(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> localVarResp = interfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
     * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return ApiResponse&lt;InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> interfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientDEFAULTADMINROLEValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE (asynchronously)
     * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientDEFAULTADMINROLEAsync(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientDEFAULTADMINROLEValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientFulfill
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientFulfillRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientFulfillCall(String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIChainlinkAnyApiClientFulfillRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientFulfillValidateBeforeCall(String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientFulfill(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientFulfill(Async)");
        }

        // verify the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' is set
        if (interfacesIChainlinkAnyApiClientFulfillRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIChainlinkAnyApiClientFulfillRequest' when calling interfacesIChainlinkAnyApiClientFulfill(Async)");
        }

        return interfacesIChainlinkAnyApiClientFulfillCall(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.fulfill
     * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientFulfillRequest  (required)
     * @return InterfacesIChainlinkAnyApiClientFulfill200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIChainlinkAnyApiClientFulfill200Response interfacesIChainlinkAnyApiClientFulfill(String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest) throws ApiException {
        ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response> localVarResp = interfacesIChainlinkAnyApiClientFulfillWithHttpInfo(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.fulfill
     * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientFulfillRequest  (required)
     * @return ApiResponse&lt;InterfacesIChainlinkAnyApiClientFulfill200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response> interfacesIChainlinkAnyApiClientFulfillWithHttpInfo(String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientFulfillValidateBeforeCall(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientFulfill200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.fulfill (asynchronously)
     * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientFulfillRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientFulfillAsync(String networkId, String address, InterfacesIChainlinkAnyApiClientFulfillRequest interfacesIChainlinkAnyApiClientFulfillRequest, final ApiCallback<InterfacesIChainlinkAnyApiClientFulfill200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientFulfillValidateBeforeCall(networkId, address, interfacesIChainlinkAnyApiClientFulfillRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientFulfill200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientGetRoleAdmin
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGetRoleAdminRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientGetRoleAdminCall(String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIAccessControlGetRoleAdminRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientGetRoleAdminValidateBeforeCall(String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin(Async)");
        }

        // verify the required parameter 'interfacesIAccessControlGetRoleAdminRequest' is set
        if (interfacesIAccessControlGetRoleAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIAccessControlGetRoleAdminRequest' when calling interfacesIChainlinkAnyApiClientGetRoleAdmin(Async)");
        }

        return interfacesIChainlinkAnyApiClientGetRoleAdminCall(networkId, address, interfacesIAccessControlGetRoleAdminRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.getRoleAdmin
     * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGetRoleAdminRequest  (required)
     * @return InterfacesIAccessControlGetRoleAdmin200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIAccessControlGetRoleAdmin200Response interfacesIChainlinkAnyApiClientGetRoleAdmin(String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest) throws ApiException {
        ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response> localVarResp = interfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(networkId, address, interfacesIAccessControlGetRoleAdminRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.getRoleAdmin
     * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGetRoleAdminRequest  (required)
     * @return ApiResponse&lt;InterfacesIAccessControlGetRoleAdmin200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response> interfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientGetRoleAdminValidateBeforeCall(networkId, address, interfacesIAccessControlGetRoleAdminRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGetRoleAdmin200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.getRoleAdmin (asynchronously)
     * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGetRoleAdminRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientGetRoleAdminAsync(String networkId, String address, InterfacesIAccessControlGetRoleAdminRequest interfacesIAccessControlGetRoleAdminRequest, final ApiCallback<InterfacesIAccessControlGetRoleAdmin200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientGetRoleAdminValidateBeforeCall(networkId, address, interfacesIAccessControlGetRoleAdminRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGetRoleAdmin200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientGrantRole
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientGrantRoleCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIAccessControlGrantRoleRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientGrantRoleValidateBeforeCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientGrantRole(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientGrantRole(Async)");
        }

        // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
        if (interfacesIAccessControlGrantRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientGrantRole(Async)");
        }

        return interfacesIChainlinkAnyApiClientGrantRoleCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.grantRole
     * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return InterfacesIAccessControlGrantRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIAccessControlGrantRole200Response interfacesIChainlinkAnyApiClientGrantRole(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResp = interfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.grantRole
     * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return ApiResponse&lt;InterfacesIAccessControlGrantRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIAccessControlGrantRole200Response> interfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientGrantRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGrantRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.grantRole (asynchronously)
     * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientGrantRoleAsync(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback<InterfacesIAccessControlGrantRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientGrantRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGrantRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientHasRole
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientHasRoleCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIAccessControlGrantRoleRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientHasRoleValidateBeforeCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientHasRole(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientHasRole(Async)");
        }

        // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
        if (interfacesIAccessControlGrantRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientHasRole(Async)");
        }

        return interfacesIChainlinkAnyApiClientHasRoleCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.hasRole
     * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return InterfacesIAccessControlHasRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIAccessControlHasRole200Response interfacesIChainlinkAnyApiClientHasRole(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        ApiResponse<InterfacesIAccessControlHasRole200Response> localVarResp = interfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.hasRole
     * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return ApiResponse&lt;InterfacesIAccessControlHasRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIAccessControlHasRole200Response> interfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientHasRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlHasRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.hasRole (asynchronously)
     * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientHasRoleAsync(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback<InterfacesIAccessControlHasRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientHasRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlHasRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientRenounceRole
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRenounceRoleCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIAccessControlGrantRoleRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientRenounceRoleValidateBeforeCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRenounceRole(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRenounceRole(Async)");
        }

        // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
        if (interfacesIAccessControlGrantRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRenounceRole(Async)");
        }

        return interfacesIChainlinkAnyApiClientRenounceRoleCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.renounceRole
     * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return InterfacesIAccessControlGrantRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIAccessControlGrantRole200Response interfacesIChainlinkAnyApiClientRenounceRole(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResp = interfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.renounceRole
     * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return ApiResponse&lt;InterfacesIAccessControlGrantRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIAccessControlGrantRole200Response> interfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRenounceRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGrantRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.renounceRole (asynchronously)
     * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRenounceRoleAsync(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback<InterfacesIAccessControlGrantRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRenounceRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGrantRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientRequest
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRequestCall(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIChainlinkAnyApiClientRequestRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientRequestValidateBeforeCall(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequest(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequest(Async)");
        }

        // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' is set
        if (interfacesIChainlinkAnyApiClientRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestRequest' when calling interfacesIChainlinkAnyApiClientRequest(Async)");
        }

        return interfacesIChainlinkAnyApiClientRequestCall(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.request
     * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestRequest  (required)
     * @return InterfacesIChainlinkAnyApiClientRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIChainlinkAnyApiClientRequest200Response interfacesIChainlinkAnyApiClientRequest(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest) throws ApiException {
        ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response> localVarResp = interfacesIChainlinkAnyApiClientRequestWithHttpInfo(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.request
     * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestRequest  (required)
     * @return ApiResponse&lt;InterfacesIChainlinkAnyApiClientRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response> interfacesIChainlinkAnyApiClientRequestWithHttpInfo(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRequestValidateBeforeCall(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.request (asynchronously)
     * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRequestAsync(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestRequest interfacesIChainlinkAnyApiClientRequestRequest, final ApiCallback<InterfacesIChainlinkAnyApiClientRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRequestValidateBeforeCall(networkId, address, interfacesIChainlinkAnyApiClientRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientRequests
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRequestsCall(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIChainlinkAnyApiClientRequestsRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientRequestsValidateBeforeCall(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRequests(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRequests(Async)");
        }

        // verify the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' is set
        if (interfacesIChainlinkAnyApiClientRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIChainlinkAnyApiClientRequestsRequest' when calling interfacesIChainlinkAnyApiClientRequests(Async)");
        }

        return interfacesIChainlinkAnyApiClientRequestsCall(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.requests
     * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestsRequest  (required)
     * @return InterfacesIChainlinkAnyApiClientRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIChainlinkAnyApiClientRequests200Response interfacesIChainlinkAnyApiClientRequests(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest) throws ApiException {
        ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response> localVarResp = interfacesIChainlinkAnyApiClientRequestsWithHttpInfo(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.requests
     * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestsRequest  (required)
     * @return ApiResponse&lt;InterfacesIChainlinkAnyApiClientRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response> interfacesIChainlinkAnyApiClientRequestsWithHttpInfo(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRequestsValidateBeforeCall(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.requests (asynchronously)
     * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIChainlinkAnyApiClientRequestsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRequestsAsync(String networkId, String address, InterfacesIChainlinkAnyApiClientRequestsRequest interfacesIChainlinkAnyApiClientRequestsRequest, final ApiCallback<InterfacesIChainlinkAnyApiClientRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRequestsValidateBeforeCall(networkId, address, interfacesIChainlinkAnyApiClientRequestsRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIChainlinkAnyApiClientRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientRevokeRole
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRevokeRoleCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIAccessControlGrantRoleRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientRevokeRoleValidateBeforeCall(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientRevokeRole(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientRevokeRole(Async)");
        }

        // verify the required parameter 'interfacesIAccessControlGrantRoleRequest' is set
        if (interfacesIAccessControlGrantRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIAccessControlGrantRoleRequest' when calling interfacesIChainlinkAnyApiClientRevokeRole(Async)");
        }

        return interfacesIChainlinkAnyApiClientRevokeRoleCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.revokeRole
     * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return InterfacesIAccessControlGrantRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIAccessControlGrantRole200Response interfacesIChainlinkAnyApiClientRevokeRole(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        ApiResponse<InterfacesIAccessControlGrantRole200Response> localVarResp = interfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(networkId, address, interfacesIAccessControlGrantRoleRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.revokeRole
     * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @return ApiResponse&lt;InterfacesIAccessControlGrantRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIAccessControlGrantRole200Response> interfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRevokeRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGrantRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.revokeRole (asynchronously)
     * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIAccessControlGrantRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientRevokeRoleAsync(String networkId, String address, InterfacesIAccessControlGrantRoleRequest interfacesIAccessControlGrantRoleRequest, final ApiCallback<InterfacesIAccessControlGrantRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientRevokeRoleValidateBeforeCall(networkId, address, interfacesIAccessControlGrantRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIAccessControlGrantRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientSetContractURI
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIContractURISetContractURIRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientSetContractURICall(String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIContractURISetContractURIRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientSetContractURIValidateBeforeCall(String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSetContractURI(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSetContractURI(Async)");
        }

        // verify the required parameter 'interfacesIContractURISetContractURIRequest' is set
        if (interfacesIContractURISetContractURIRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIContractURISetContractURIRequest' when calling interfacesIChainlinkAnyApiClientSetContractURI(Async)");
        }

        return interfacesIChainlinkAnyApiClientSetContractURICall(networkId, address, interfacesIContractURISetContractURIRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.setContractURI
     * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIContractURISetContractURIRequest  (required)
     * @return InterfacesIContractURISetContractURI200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIContractURISetContractURI200Response interfacesIChainlinkAnyApiClientSetContractURI(String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest) throws ApiException {
        ApiResponse<InterfacesIContractURISetContractURI200Response> localVarResp = interfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(networkId, address, interfacesIContractURISetContractURIRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.setContractURI
     * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIContractURISetContractURIRequest  (required)
     * @return ApiResponse&lt;InterfacesIContractURISetContractURI200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIContractURISetContractURI200Response> interfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientSetContractURIValidateBeforeCall(networkId, address, interfacesIContractURISetContractURIRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIContractURISetContractURI200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.setContractURI (asynchronously)
     * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIContractURISetContractURIRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientSetContractURIAsync(String networkId, String address, InterfacesIContractURISetContractURIRequest interfacesIContractURISetContractURIRequest, final ApiCallback<InterfacesIContractURISetContractURI200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientSetContractURIValidateBeforeCall(networkId, address, interfacesIContractURISetContractURIRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIContractURISetContractURI200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientSupportsInterface
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientSupportsInterfaceCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC165SupportsInterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientSupportsInterfaceValidateBeforeCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientSupportsInterface(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientSupportsInterface(Async)");
        }

        // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
        if (interfacesIERC165SupportsInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIChainlinkAnyApiClientSupportsInterface(Async)");
        }

        return interfacesIChainlinkAnyApiClientSupportsInterfaceCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return InterfacesIERC165SupportsInterface200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC165SupportsInterface200Response interfacesIChainlinkAnyApiClientSupportsInterface(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResp = interfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC165SupportsInterface200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC165SupportsInterface200Response> interfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientSupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.supportsInterface (asynchronously)
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientSupportsInterfaceAsync(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback<InterfacesIERC165SupportsInterface200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientSupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientVersion
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientVersionCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIBeaconImplementationRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientVersionValidateBeforeCall(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientVersion(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientVersion(Async)");
        }

        // verify the required parameter 'interfacesIBeaconImplementationRequest' is set
        if (interfacesIBeaconImplementationRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIBeaconImplementationRequest' when calling interfacesIChainlinkAnyApiClientVersion(Async)");
        }

        return interfacesIChainlinkAnyApiClientVersionCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.version
     * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return InterfacesIContractURIContractURI200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIContractURIContractURI200Response interfacesIChainlinkAnyApiClientVersion(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        ApiResponse<InterfacesIContractURIContractURI200Response> localVarResp = interfacesIChainlinkAnyApiClientVersionWithHttpInfo(networkId, address, interfacesIBeaconImplementationRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.version
     * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @return ApiResponse&lt;InterfacesIContractURIContractURI200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIContractURIContractURI200Response> interfacesIChainlinkAnyApiClientVersionWithHttpInfo(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientVersionValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIContractURIContractURI200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.version (asynchronously)
     * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIBeaconImplementationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientVersionAsync(String networkId, String address, InterfacesIBeaconImplementationRequest interfacesIBeaconImplementationRequest, final ApiCallback<InterfacesIContractURIContractURI200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientVersionValidateBeforeCall(networkId, address, interfacesIBeaconImplementationRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIContractURIContractURI200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIChainlinkAnyApiClientWithdrawLink
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientWithdrawLinkCall(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC20TransferRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIChainlinkAnyApiClientWithdrawLinkValidateBeforeCall(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIChainlinkAnyApiClientWithdrawLink(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIChainlinkAnyApiClientWithdrawLink(Async)");
        }

        // verify the required parameter 'interfacesIERC20TransferRequest' is set
        if (interfacesIERC20TransferRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC20TransferRequest' when calling interfacesIChainlinkAnyApiClientWithdrawLink(Async)");
        }

        return interfacesIChainlinkAnyApiClientWithdrawLinkCall(networkId, address, interfacesIERC20TransferRequest, _callback);

    }

    /**
     * IChainlinkAnyApiClient.withdrawLink
     * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @return InterfacesIERC20Transfer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC20Transfer200Response interfacesIChainlinkAnyApiClientWithdrawLink(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest) throws ApiException {
        ApiResponse<InterfacesIERC20Transfer200Response> localVarResp = interfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(networkId, address, interfacesIERC20TransferRequest);
        return localVarResp.getData();
    }

    /**
     * IChainlinkAnyApiClient.withdrawLink
     * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC20Transfer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC20Transfer200Response> interfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientWithdrawLinkValidateBeforeCall(networkId, address, interfacesIERC20TransferRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Transfer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IChainlinkAnyApiClient.withdrawLink (asynchronously)
     * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC20TransferRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIChainlinkAnyApiClientWithdrawLinkAsync(String networkId, String address, InterfacesIERC20TransferRequest interfacesIERC20TransferRequest, final ApiCallback<InterfacesIERC20Transfer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIChainlinkAnyApiClientWithdrawLinkValidateBeforeCall(networkId, address, interfacesIERC20TransferRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC20Transfer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
