/*
 * Owl Contract Api
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployBeaconProxyDefaultResponse;
import org.openapitools.client.model.InterfacesIERC165SupportsInterface200Response;
import org.openapitools.client.model.InterfacesIERC165SupportsInterfaceRequest;
import org.openapitools.client.model.InterfacesIERC721Approve200Response;
import org.openapitools.client.model.InterfacesIERC721ApproveRequest;
import org.openapitools.client.model.InterfacesIERC721BalanceOf200Response;
import org.openapitools.client.model.InterfacesIERC721BalanceOfRequest;
import org.openapitools.client.model.InterfacesIERC721GetApproved200Response;
import org.openapitools.client.model.InterfacesIERC721GetApprovedRequest;
import org.openapitools.client.model.InterfacesIERC721IsApprovedForAll200Response;
import org.openapitools.client.model.InterfacesIERC721IsApprovedForAllRequest;
import org.openapitools.client.model.InterfacesIERC721OwnerOf200Response;
import org.openapitools.client.model.InterfacesIERC721SafeTransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC721SafeTransferFromRequest;
import org.openapitools.client.model.InterfacesIERC721SetApprovalForAll200Response;
import org.openapitools.client.model.InterfacesIERC721SetApprovalForAllRequest;
import org.openapitools.client.model.InterfacesIERC721TransferFrom200Response;
import org.openapitools.client.model.InterfacesIERC721TransferFromRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Ierc721Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Ierc721Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Ierc721Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interfacesIERC721Approve
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721ApproveCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721ApproveRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/write/{address}/approve"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721ApproveValidateBeforeCall(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721Approve(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721Approve(Async)");
        }

        // verify the required parameter 'interfacesIERC721ApproveRequest' is set
        if (interfacesIERC721ApproveRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721ApproveRequest' when calling interfacesIERC721Approve(Async)");
        }

        return interfacesIERC721ApproveCall(networkId, address, interfacesIERC721ApproveRequest, _callback);

    }

    /**
     * IERC721.approve
     * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return InterfacesIERC721Approve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721Approve200Response interfacesIERC721Approve(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        ApiResponse<InterfacesIERC721Approve200Response> localVarResp = interfacesIERC721ApproveWithHttpInfo(networkId, address, interfacesIERC721ApproveRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.approve
     * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721Approve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721Approve200Response> interfacesIERC721ApproveWithHttpInfo(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721ApproveValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.approve (asynchronously)
     * Write &#x60;approve(to,tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721ApproveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721ApproveAsync(String networkId, String address, InterfacesIERC721ApproveRequest interfacesIERC721ApproveRequest, final ApiCallback<InterfacesIERC721Approve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721ApproveValidateBeforeCall(networkId, address, interfacesIERC721ApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721Approve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721BalanceOf
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721BalanceOfCall(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721BalanceOfRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/read/{address}/balanceOf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721BalanceOfValidateBeforeCall(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721BalanceOf(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721BalanceOf(Async)");
        }

        // verify the required parameter 'interfacesIERC721BalanceOfRequest' is set
        if (interfacesIERC721BalanceOfRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721BalanceOfRequest' when calling interfacesIERC721BalanceOf(Async)");
        }

        return interfacesIERC721BalanceOfCall(networkId, address, interfacesIERC721BalanceOfRequest, _callback);

    }

    /**
     * IERC721.balanceOf
     * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @return InterfacesIERC721BalanceOf200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721BalanceOf200Response interfacesIERC721BalanceOf(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest) throws ApiException {
        ApiResponse<InterfacesIERC721BalanceOf200Response> localVarResp = interfacesIERC721BalanceOfWithHttpInfo(networkId, address, interfacesIERC721BalanceOfRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.balanceOf
     * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721BalanceOf200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721BalanceOf200Response> interfacesIERC721BalanceOfWithHttpInfo(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721BalanceOfValidateBeforeCall(networkId, address, interfacesIERC721BalanceOfRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721BalanceOf200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.balanceOf (asynchronously)
     * Read &#x60;balanceOf(owner)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721BalanceOfRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721BalanceOfAsync(String networkId, String address, InterfacesIERC721BalanceOfRequest interfacesIERC721BalanceOfRequest, final ApiCallback<InterfacesIERC721BalanceOf200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721BalanceOfValidateBeforeCall(networkId, address, interfacesIERC721BalanceOfRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721BalanceOf200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721GetApproved
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721GetApprovedCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721GetApprovedRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/read/{address}/getApproved"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721GetApprovedValidateBeforeCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721GetApproved(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721GetApproved(Async)");
        }

        // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
        if (interfacesIERC721GetApprovedRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721GetApproved(Async)");
        }

        return interfacesIERC721GetApprovedCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);

    }

    /**
     * IERC721.getApproved
     * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return InterfacesIERC721GetApproved200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721GetApproved200Response interfacesIERC721GetApproved(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        ApiResponse<InterfacesIERC721GetApproved200Response> localVarResp = interfacesIERC721GetApprovedWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.getApproved
     * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721GetApproved200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721GetApproved200Response> interfacesIERC721GetApprovedWithHttpInfo(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721GetApprovedValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721GetApproved200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.getApproved (asynchronously)
     * Read &#x60;getApproved(tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721GetApprovedAsync(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback<InterfacesIERC721GetApproved200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721GetApprovedValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721GetApproved200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721IsApprovedForAll
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721IsApprovedForAllCall(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721IsApprovedForAllRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/read/{address}/isApprovedForAll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721IsApprovedForAllValidateBeforeCall(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721IsApprovedForAll(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721IsApprovedForAll(Async)");
        }

        // verify the required parameter 'interfacesIERC721IsApprovedForAllRequest' is set
        if (interfacesIERC721IsApprovedForAllRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721IsApprovedForAllRequest' when calling interfacesIERC721IsApprovedForAll(Async)");
        }

        return interfacesIERC721IsApprovedForAllCall(networkId, address, interfacesIERC721IsApprovedForAllRequest, _callback);

    }

    /**
     * IERC721.isApprovedForAll
     * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @return InterfacesIERC721IsApprovedForAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721IsApprovedForAll200Response interfacesIERC721IsApprovedForAll(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest) throws ApiException {
        ApiResponse<InterfacesIERC721IsApprovedForAll200Response> localVarResp = interfacesIERC721IsApprovedForAllWithHttpInfo(networkId, address, interfacesIERC721IsApprovedForAllRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.isApprovedForAll
     * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721IsApprovedForAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721IsApprovedForAll200Response> interfacesIERC721IsApprovedForAllWithHttpInfo(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721IsApprovedForAllValidateBeforeCall(networkId, address, interfacesIERC721IsApprovedForAllRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721IsApprovedForAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.isApprovedForAll (asynchronously)
     * Read &#x60;isApprovedForAll(owner,operator)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721IsApprovedForAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721IsApprovedForAllAsync(String networkId, String address, InterfacesIERC721IsApprovedForAllRequest interfacesIERC721IsApprovedForAllRequest, final ApiCallback<InterfacesIERC721IsApprovedForAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721IsApprovedForAllValidateBeforeCall(networkId, address, interfacesIERC721IsApprovedForAllRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721IsApprovedForAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721OwnerOf
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721OwnerOfCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721GetApprovedRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/read/{address}/ownerOf"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721OwnerOfValidateBeforeCall(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721OwnerOf(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721OwnerOf(Async)");
        }

        // verify the required parameter 'interfacesIERC721GetApprovedRequest' is set
        if (interfacesIERC721GetApprovedRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721GetApprovedRequest' when calling interfacesIERC721OwnerOf(Async)");
        }

        return interfacesIERC721OwnerOfCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);

    }

    /**
     * IERC721.ownerOf
     * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return InterfacesIERC721OwnerOf200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721OwnerOf200Response interfacesIERC721OwnerOf(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        ApiResponse<InterfacesIERC721OwnerOf200Response> localVarResp = interfacesIERC721OwnerOfWithHttpInfo(networkId, address, interfacesIERC721GetApprovedRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.ownerOf
     * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721OwnerOf200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721OwnerOf200Response> interfacesIERC721OwnerOfWithHttpInfo(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721OwnerOfValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721OwnerOf200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.ownerOf (asynchronously)
     * Read &#x60;ownerOf(tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721GetApprovedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721OwnerOfAsync(String networkId, String address, InterfacesIERC721GetApprovedRequest interfacesIERC721GetApprovedRequest, final ApiCallback<InterfacesIERC721OwnerOf200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721OwnerOfValidateBeforeCall(networkId, address, interfacesIERC721GetApprovedRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721OwnerOf200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721SafeTransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721SafeTransferFromCall(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721SafeTransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/write/{address}/safeTransferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721SafeTransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721SafeTransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721SafeTransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC721SafeTransferFromRequest' is set
        if (interfacesIERC721SafeTransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721SafeTransferFromRequest' when calling interfacesIERC721SafeTransferFrom(Async)");
        }

        return interfacesIERC721SafeTransferFromCall(networkId, address, interfacesIERC721SafeTransferFromRequest, _callback);

    }

    /**
     * IERC721.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @return InterfacesIERC721SafeTransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721SafeTransferFrom200Response interfacesIERC721SafeTransferFrom(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC721SafeTransferFrom200Response> localVarResp = interfacesIERC721SafeTransferFromWithHttpInfo(networkId, address, interfacesIERC721SafeTransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721SafeTransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721SafeTransferFrom200Response> interfacesIERC721SafeTransferFromWithHttpInfo(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721SafeTransferFromValidateBeforeCall(networkId, address, interfacesIERC721SafeTransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SafeTransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.safeTransferFrom (asynchronously)
     * Write &#x60;safeTransferFrom(from,to,tokenId,data)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SafeTransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721SafeTransferFromAsync(String networkId, String address, InterfacesIERC721SafeTransferFromRequest interfacesIERC721SafeTransferFromRequest, final ApiCallback<InterfacesIERC721SafeTransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721SafeTransferFromValidateBeforeCall(networkId, address, interfacesIERC721SafeTransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SafeTransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721SetApprovalForAll
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721SetApprovalForAllCall(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721SetApprovalForAllRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/write/{address}/setApprovalForAll"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721SetApprovalForAllValidateBeforeCall(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721SetApprovalForAll(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721SetApprovalForAll(Async)");
        }

        // verify the required parameter 'interfacesIERC721SetApprovalForAllRequest' is set
        if (interfacesIERC721SetApprovalForAllRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721SetApprovalForAllRequest' when calling interfacesIERC721SetApprovalForAll(Async)");
        }

        return interfacesIERC721SetApprovalForAllCall(networkId, address, interfacesIERC721SetApprovalForAllRequest, _callback);

    }

    /**
     * IERC721.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @return InterfacesIERC721SetApprovalForAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721SetApprovalForAll200Response interfacesIERC721SetApprovalForAll(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest) throws ApiException {
        ApiResponse<InterfacesIERC721SetApprovalForAll200Response> localVarResp = interfacesIERC721SetApprovalForAllWithHttpInfo(networkId, address, interfacesIERC721SetApprovalForAllRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721SetApprovalForAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721SetApprovalForAll200Response> interfacesIERC721SetApprovalForAllWithHttpInfo(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721SetApprovalForAllValidateBeforeCall(networkId, address, interfacesIERC721SetApprovalForAllRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SetApprovalForAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.setApprovalForAll (asynchronously)
     * Write &#x60;setApprovalForAll(operator,_approved)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721SetApprovalForAllRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721SetApprovalForAllAsync(String networkId, String address, InterfacesIERC721SetApprovalForAllRequest interfacesIERC721SetApprovalForAllRequest, final ApiCallback<InterfacesIERC721SetApprovalForAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721SetApprovalForAllValidateBeforeCall(networkId, address, interfacesIERC721SetApprovalForAllRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721SetApprovalForAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721SupportsInterface
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721SupportsInterfaceCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC165SupportsInterfaceRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/read/{address}/supportsInterface"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721SupportsInterfaceValidateBeforeCall(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721SupportsInterface(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721SupportsInterface(Async)");
        }

        // verify the required parameter 'interfacesIERC165SupportsInterfaceRequest' is set
        if (interfacesIERC165SupportsInterfaceRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC165SupportsInterfaceRequest' when calling interfacesIERC721SupportsInterface(Async)");
        }

        return interfacesIERC721SupportsInterfaceCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);

    }

    /**
     * IERC721.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return InterfacesIERC165SupportsInterface200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC165SupportsInterface200Response interfacesIERC721SupportsInterface(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        ApiResponse<InterfacesIERC165SupportsInterface200Response> localVarResp = interfacesIERC721SupportsInterfaceWithHttpInfo(networkId, address, interfacesIERC165SupportsInterfaceRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC165SupportsInterface200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC165SupportsInterface200Response> interfacesIERC721SupportsInterfaceWithHttpInfo(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721SupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.supportsInterface (asynchronously)
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC165SupportsInterfaceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721SupportsInterfaceAsync(String networkId, String address, InterfacesIERC165SupportsInterfaceRequest interfacesIERC165SupportsInterfaceRequest, final ApiCallback<InterfacesIERC165SupportsInterface200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721SupportsInterfaceValidateBeforeCall(networkId, address, interfacesIERC165SupportsInterfaceRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC165SupportsInterface200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interfacesIERC721TransferFrom
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721TransferFromCall(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = interfacesIERC721TransferFromRequest;

        // create path and map variables
        String localVarPath = "/{networkId}/interface/IERC721/write/{address}/transferFrom"
            .replace("{" + "networkId" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interfacesIERC721TransferFromValidateBeforeCall(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling interfacesIERC721TransferFrom(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling interfacesIERC721TransferFrom(Async)");
        }

        // verify the required parameter 'interfacesIERC721TransferFromRequest' is set
        if (interfacesIERC721TransferFromRequest == null) {
            throw new ApiException("Missing the required parameter 'interfacesIERC721TransferFromRequest' when calling interfacesIERC721TransferFrom(Async)");
        }

        return interfacesIERC721TransferFromCall(networkId, address, interfacesIERC721TransferFromRequest, _callback);

    }

    /**
     * IERC721.transferFrom
     * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @return InterfacesIERC721TransferFrom200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public InterfacesIERC721TransferFrom200Response interfacesIERC721TransferFrom(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest) throws ApiException {
        ApiResponse<InterfacesIERC721TransferFrom200Response> localVarResp = interfacesIERC721TransferFromWithHttpInfo(networkId, address, interfacesIERC721TransferFromRequest);
        return localVarResp.getData();
    }

    /**
     * IERC721.transferFrom
     * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @return ApiResponse&lt;InterfacesIERC721TransferFrom200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfacesIERC721TransferFrom200Response> interfacesIERC721TransferFromWithHttpInfo(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest) throws ApiException {
        okhttp3.Call localVarCall = interfacesIERC721TransferFromValidateBeforeCall(networkId, address, interfacesIERC721TransferFromRequest, null);
        Type localVarReturnType = new TypeToken<InterfacesIERC721TransferFrom200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * IERC721.transferFrom (asynchronously)
     * Write &#x60;transferFrom(from,to,tokenId)&#x60; on an instance of &#x60;IERC721&#x60;
     * @param networkId The network id (required)
     * @param address An ethereum address (required)
     * @param interfacesIERC721TransferFromRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interfacesIERC721TransferFromAsync(String networkId, String address, InterfacesIERC721TransferFromRequest interfacesIERC721TransferFromRequest, final ApiCallback<InterfacesIERC721TransferFrom200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = interfacesIERC721TransferFromValidateBeforeCall(networkId, address, interfacesIERC721TransferFromRequest, _callback);
        Type localVarReturnType = new TypeToken<InterfacesIERC721TransferFrom200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
