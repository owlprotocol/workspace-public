/*
 * Owl Contract Api
 *
 * Specification for our API focused on contract interactions
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_contract_uri`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientContractUriError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_defaultadminrole`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientDefaultadminroleError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_fulfill`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientFulfillError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_get_role_admin`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientGetRoleAdminError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_grant_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientGrantRoleError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_has_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientHasRoleError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_renounce_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientRenounceRoleError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientRequestError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_requests`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientRequestsError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_revoke_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientRevokeRoleError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_set_contract_uri`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientSetContractUriError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_supports_interface`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientSupportsInterfaceError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientVersionError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`interfaces_i_chainlink_any_api_client_withdraw_link`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InterfacesIChainlinkAnyApiClientWithdrawLinkError {
    DefaultResponse(crate::models::DeployBeaconProxyDefaultResponse),
    UnknownValue(serde_json::Value),
}


/// Read `contractURI()` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_contract_uri(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_beacon_implementation_request: crate::models::InterfacesIBeaconImplementationRequest) -> Result<crate::models::InterfacesIContractUriContractUri200Response, Error<InterfacesIChainlinkAnyApiClientContractUriError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_beacon_implementation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientContractUriError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read `DEFAULT_ADMIN_ROLE()` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_defaultadminrole(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_beacon_implementation_request: crate::models::InterfacesIBeaconImplementationRequest) -> Result<crate::models::InterfacesIChainlinkAnyApiClientDefaultAdminRole200Response, Error<InterfacesIChainlinkAnyApiClientDefaultadminroleError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_beacon_implementation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientDefaultadminroleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `fulfill(reqId,reqResponseData)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_fulfill(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_chainlink_any_api_client_fulfill_request: crate::models::InterfacesIChainlinkAnyApiClientFulfillRequest) -> Result<crate::models::InterfacesIChainlinkAnyApiClientFulfill200Response, Error<InterfacesIChainlinkAnyApiClientFulfillError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_chainlink_any_api_client_fulfill_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientFulfillError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read `getRoleAdmin(role)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_get_role_admin(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_access_control_get_role_admin_request: crate::models::InterfacesIAccessControlGetRoleAdminRequest) -> Result<crate::models::InterfacesIAccessControlGetRoleAdmin200Response, Error<InterfacesIChainlinkAnyApiClientGetRoleAdminError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_access_control_get_role_admin_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientGetRoleAdminError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `grantRole(role,account)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_grant_role(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_access_control_grant_role_request: crate::models::InterfacesIAccessControlGrantRoleRequest) -> Result<crate::models::InterfacesIAccessControlGrantRole200Response, Error<InterfacesIChainlinkAnyApiClientGrantRoleError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_access_control_grant_role_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientGrantRoleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read `hasRole(role,account)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_has_role(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_access_control_grant_role_request: crate::models::InterfacesIAccessControlGrantRoleRequest) -> Result<crate::models::InterfacesIAccessControlHasRole200Response, Error<InterfacesIChainlinkAnyApiClientHasRoleError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_access_control_grant_role_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientHasRoleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `renounceRole(role,account)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_renounce_role(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_access_control_grant_role_request: crate::models::InterfacesIAccessControlGrantRoleRequest) -> Result<crate::models::InterfacesIAccessControlGrantRole200Response, Error<InterfacesIChainlinkAnyApiClientRenounceRoleError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_access_control_grant_role_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientRenounceRoleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_request(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_chainlink_any_api_client_request_request: crate::models::InterfacesIChainlinkAnyApiClientRequestRequest) -> Result<crate::models::InterfacesIChainlinkAnyApiClientRequest200Response, Error<InterfacesIChainlinkAnyApiClientRequestError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_chainlink_any_api_client_request_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientRequestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read `requests()` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_requests(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_chainlink_any_api_client_requests_request: crate::models::InterfacesIChainlinkAnyApiClientRequestsRequest) -> Result<crate::models::InterfacesIChainlinkAnyApiClientRequests200Response, Error<InterfacesIChainlinkAnyApiClientRequestsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_chainlink_any_api_client_requests_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientRequestsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `revokeRole(role,account)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_revoke_role(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_access_control_grant_role_request: crate::models::InterfacesIAccessControlGrantRoleRequest) -> Result<crate::models::InterfacesIAccessControlGrantRole200Response, Error<InterfacesIChainlinkAnyApiClientRevokeRoleError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_access_control_grant_role_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientRevokeRoleError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `setContractURI(uri)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_set_contract_uri(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_contract_uri_set_contract_uri_request: crate::models::InterfacesIContractUriSetContractUriRequest) -> Result<crate::models::InterfacesIContractUriSetContractUri200Response, Error<InterfacesIChainlinkAnyApiClientSetContractUriError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_contract_uri_set_contract_uri_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientSetContractUriError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read `supportsInterface(interfaceId)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_supports_interface(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_ierc165_supports_interface_request: crate::models::InterfacesIerc165SupportsInterfaceRequest) -> Result<crate::models::InterfacesIerc165SupportsInterface200Response, Error<InterfacesIChainlinkAnyApiClientSupportsInterfaceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_ierc165_supports_interface_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientSupportsInterfaceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read `version()` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_version(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_i_beacon_implementation_request: crate::models::InterfacesIBeaconImplementationRequest) -> Result<crate::models::InterfacesIContractUriContractUri200Response, Error<InterfacesIChainlinkAnyApiClientVersionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_i_beacon_implementation_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientVersionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Write `withdrawLink(to,amount)` on an instance of `IChainlinkAnyApiClient`
pub async fn interfaces_i_chainlink_any_api_client_withdraw_link(configuration: &configuration::Configuration, network_id: &str, address: &str, interfaces_ierc20_transfer_request: crate::models::InterfacesIerc20TransferRequest) -> Result<crate::models::InterfacesIerc20Transfer200Response, Error<InterfacesIChainlinkAnyApiClientWithdrawLinkError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink", local_var_configuration.base_path, networkId=crate::apis::urlencode(network_id), address=crate::apis::urlencode(address));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("x-api-key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&interfaces_ierc20_transfer_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InterfacesIChainlinkAnyApiClientWithdrawLinkError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

