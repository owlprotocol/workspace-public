//
// IERC1820API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IERC1820API {

    /**
     IERC1820.getInterfaceImplementer
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820GetInterfaceImplementerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820GetInterfaceImplementer(networkId: String, address: String, interfacesIERC1820GetInterfaceImplementerRequest: InterfacesIERC1820GetInterfaceImplementerRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820GetInterfaceImplementer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820GetInterfaceImplementerWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820GetInterfaceImplementerRequest: interfacesIERC1820GetInterfaceImplementerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.getInterfaceImplementer
     - POST /{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer
     - Read `getInterfaceImplementer(account,_interfaceHash)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820GetInterfaceImplementerRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820GetInterfaceImplementer200Response> 
     */
    open class func interfacesIERC1820GetInterfaceImplementerWithRequestBuilder(networkId: String, address: String, interfacesIERC1820GetInterfaceImplementerRequest: InterfacesIERC1820GetInterfaceImplementerRequest) -> RequestBuilder<InterfacesIERC1820GetInterfaceImplementer200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820GetInterfaceImplementerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820GetInterfaceImplementer200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.getManager
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820GetManagerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820GetManager(networkId: String, address: String, interfacesIERC1820GetManagerRequest: InterfacesIERC1820GetManagerRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820GetManager200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820GetManagerWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820GetManagerRequest: interfacesIERC1820GetManagerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.getManager
     - POST /{networkId}/interface/IERC1820/read/{address}/getManager
     - Read `getManager(account)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820GetManagerRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820GetManager200Response> 
     */
    open class func interfacesIERC1820GetManagerWithRequestBuilder(networkId: String, address: String, interfacesIERC1820GetManagerRequest: InterfacesIERC1820GetManagerRequest) -> RequestBuilder<InterfacesIERC1820GetManager200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/read/{address}/getManager"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820GetManagerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820GetManager200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.implementsERC165Interface
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820ImplementsERC165InterfaceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820ImplementsERC165Interface(networkId: String, address: String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820ImplementsERC165Interface200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820ImplementsERC165InterfaceWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820ImplementsERC165InterfaceRequest: interfacesIERC1820ImplementsERC165InterfaceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.implementsERC165Interface
     - POST /{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface
     - Read `implementsERC165Interface(account,interfaceId)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820ImplementsERC165InterfaceRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820ImplementsERC165Interface200Response> 
     */
    open class func interfacesIERC1820ImplementsERC165InterfaceWithRequestBuilder(networkId: String, address: String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) -> RequestBuilder<InterfacesIERC1820ImplementsERC165Interface200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820ImplementsERC165InterfaceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820ImplementsERC165Interface200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.implementsERC165InterfaceNoCache
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820ImplementsERC165InterfaceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820ImplementsERC165InterfaceNoCache(networkId: String, address: String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820ImplementsERC165Interface200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820ImplementsERC165InterfaceNoCacheWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820ImplementsERC165InterfaceRequest: interfacesIERC1820ImplementsERC165InterfaceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.implementsERC165InterfaceNoCache
     - POST /{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache
     - Read `implementsERC165InterfaceNoCache(account,interfaceId)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820ImplementsERC165InterfaceRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820ImplementsERC165Interface200Response> 
     */
    open class func interfacesIERC1820ImplementsERC165InterfaceNoCacheWithRequestBuilder(networkId: String, address: String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) -> RequestBuilder<InterfacesIERC1820ImplementsERC165Interface200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820ImplementsERC165InterfaceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820ImplementsERC165Interface200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.interfaceHash
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820InterfaceHashRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820InterfaceHash(networkId: String, address: String, interfacesIERC1820InterfaceHashRequest: InterfacesIERC1820InterfaceHashRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820InterfaceHash200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820InterfaceHashWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820InterfaceHashRequest: interfacesIERC1820InterfaceHashRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.interfaceHash
     - POST /{networkId}/interface/IERC1820/read/{address}/interfaceHash
     - Read `interfaceHash(interfaceName)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820InterfaceHashRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820InterfaceHash200Response> 
     */
    open class func interfacesIERC1820InterfaceHashWithRequestBuilder(networkId: String, address: String, interfacesIERC1820InterfaceHashRequest: InterfacesIERC1820InterfaceHashRequest) -> RequestBuilder<InterfacesIERC1820InterfaceHash200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/read/{address}/interfaceHash"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820InterfaceHashRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820InterfaceHash200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.setInterfaceImplementer
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820SetInterfaceImplementerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820SetInterfaceImplementer(networkId: String, address: String, interfacesIERC1820SetInterfaceImplementerRequest: InterfacesIERC1820SetInterfaceImplementerRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820SetInterfaceImplementer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820SetInterfaceImplementerWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820SetInterfaceImplementerRequest: interfacesIERC1820SetInterfaceImplementerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.setInterfaceImplementer
     - POST /{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer
     - Write `setInterfaceImplementer(account,_interfaceHash,implementer)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820SetInterfaceImplementerRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820SetInterfaceImplementer200Response> 
     */
    open class func interfacesIERC1820SetInterfaceImplementerWithRequestBuilder(networkId: String, address: String, interfacesIERC1820SetInterfaceImplementerRequest: InterfacesIERC1820SetInterfaceImplementerRequest) -> RequestBuilder<InterfacesIERC1820SetInterfaceImplementer200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820SetInterfaceImplementerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820SetInterfaceImplementer200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.setManager
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820SetManagerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820SetManager(networkId: String, address: String, interfacesIERC1820SetManagerRequest: InterfacesIERC1820SetManagerRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820SetManager200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820SetManagerWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820SetManagerRequest: interfacesIERC1820SetManagerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.setManager
     - POST /{networkId}/interface/IERC1820/write/{address}/setManager
     - Write `setManager(account,newManager)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820SetManagerRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820SetManager200Response> 
     */
    open class func interfacesIERC1820SetManagerWithRequestBuilder(networkId: String, address: String, interfacesIERC1820SetManagerRequest: InterfacesIERC1820SetManagerRequest) -> RequestBuilder<InterfacesIERC1820SetManager200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/write/{address}/setManager"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820SetManagerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820SetManager200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1820.updateERC165Cache
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820ImplementsERC165InterfaceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1820UpdateERC165Cache(networkId: String, address: String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1820UpdateERC165Cache200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1820UpdateERC165CacheWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1820ImplementsERC165InterfaceRequest: interfacesIERC1820ImplementsERC165InterfaceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1820.updateERC165Cache
     - POST /{networkId}/interface/IERC1820/write/{address}/updateERC165Cache
     - Write `updateERC165Cache(account,interfaceId)` on an instance of `IERC1820`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1820ImplementsERC165InterfaceRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1820UpdateERC165Cache200Response> 
     */
    open class func interfacesIERC1820UpdateERC165CacheWithRequestBuilder(networkId: String, address: String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) -> RequestBuilder<InterfacesIERC1820UpdateERC165Cache200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1820ImplementsERC165InterfaceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1820UpdateERC165Cache200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
