//
// IChainlinkAnyApiClientAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IChainlinkAnyApiClientAPI {

    /**
     IChainlinkAnyApiClient.contractURI
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIBeaconImplementationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientContractURI(networkId: String, address: String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIContractURIContractURI200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientContractURIWithRequestBuilder(networkId: networkId, address: address, interfacesIBeaconImplementationRequest: interfacesIBeaconImplementationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.contractURI
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI
     - Read `contractURI()` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIBeaconImplementationRequest: (body)  
     - returns: RequestBuilder<InterfacesIContractURIContractURI200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientContractURIWithRequestBuilder(networkId: String, address: String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) -> RequestBuilder<InterfacesIContractURIContractURI200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIBeaconImplementationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIContractURIContractURI200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIBeaconImplementationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientDEFAULTADMINROLE(networkId: String, address: String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithRequestBuilder(networkId: networkId, address: address, interfacesIBeaconImplementationRequest: interfacesIBeaconImplementationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE
     - Read `DEFAULT_ADMIN_ROLE()` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIBeaconImplementationRequest: (body)  
     - returns: RequestBuilder<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithRequestBuilder(networkId: String, address: String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) -> RequestBuilder<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIBeaconImplementationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.fulfill
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIChainlinkAnyApiClientFulfillRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientFulfill(networkId: String, address: String, interfacesIChainlinkAnyApiClientFulfillRequest: InterfacesIChainlinkAnyApiClientFulfillRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIChainlinkAnyApiClientFulfill200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientFulfillWithRequestBuilder(networkId: networkId, address: address, interfacesIChainlinkAnyApiClientFulfillRequest: interfacesIChainlinkAnyApiClientFulfillRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.fulfill
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill
     - Write `fulfill(reqId,reqResponseData)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIChainlinkAnyApiClientFulfillRequest: (body)  
     - returns: RequestBuilder<InterfacesIChainlinkAnyApiClientFulfill200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientFulfillWithRequestBuilder(networkId: String, address: String, interfacesIChainlinkAnyApiClientFulfillRequest: InterfacesIChainlinkAnyApiClientFulfillRequest) -> RequestBuilder<InterfacesIChainlinkAnyApiClientFulfill200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIChainlinkAnyApiClientFulfillRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIChainlinkAnyApiClientFulfill200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.getRoleAdmin
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGetRoleAdminRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientGetRoleAdmin(networkId: String, address: String, interfacesIAccessControlGetRoleAdminRequest: InterfacesIAccessControlGetRoleAdminRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIAccessControlGetRoleAdmin200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientGetRoleAdminWithRequestBuilder(networkId: networkId, address: address, interfacesIAccessControlGetRoleAdminRequest: interfacesIAccessControlGetRoleAdminRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.getRoleAdmin
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin
     - Read `getRoleAdmin(role)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGetRoleAdminRequest: (body)  
     - returns: RequestBuilder<InterfacesIAccessControlGetRoleAdmin200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientGetRoleAdminWithRequestBuilder(networkId: String, address: String, interfacesIAccessControlGetRoleAdminRequest: InterfacesIAccessControlGetRoleAdminRequest) -> RequestBuilder<InterfacesIAccessControlGetRoleAdmin200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIAccessControlGetRoleAdminRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIAccessControlGetRoleAdmin200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.grantRole
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientGrantRole(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIAccessControlGrantRole200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientGrantRoleWithRequestBuilder(networkId: networkId, address: address, interfacesIAccessControlGrantRoleRequest: interfacesIAccessControlGrantRoleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.grantRole
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole
     - Write `grantRole(role,account)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - returns: RequestBuilder<InterfacesIAccessControlGrantRole200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientGrantRoleWithRequestBuilder(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) -> RequestBuilder<InterfacesIAccessControlGrantRole200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIAccessControlGrantRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIAccessControlGrantRole200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.hasRole
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientHasRole(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIAccessControlHasRole200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientHasRoleWithRequestBuilder(networkId: networkId, address: address, interfacesIAccessControlGrantRoleRequest: interfacesIAccessControlGrantRoleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.hasRole
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole
     - Read `hasRole(role,account)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - returns: RequestBuilder<InterfacesIAccessControlHasRole200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientHasRoleWithRequestBuilder(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) -> RequestBuilder<InterfacesIAccessControlHasRole200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIAccessControlGrantRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIAccessControlHasRole200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.renounceRole
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientRenounceRole(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIAccessControlGrantRole200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientRenounceRoleWithRequestBuilder(networkId: networkId, address: address, interfacesIAccessControlGrantRoleRequest: interfacesIAccessControlGrantRoleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.renounceRole
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole
     - Write `renounceRole(role,account)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - returns: RequestBuilder<InterfacesIAccessControlGrantRole200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientRenounceRoleWithRequestBuilder(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) -> RequestBuilder<InterfacesIAccessControlGrantRole200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIAccessControlGrantRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIAccessControlGrantRole200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.request
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIChainlinkAnyApiClientRequestRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientRequest(networkId: String, address: String, interfacesIChainlinkAnyApiClientRequestRequest: InterfacesIChainlinkAnyApiClientRequestRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIChainlinkAnyApiClientRequest200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientRequestWithRequestBuilder(networkId: networkId, address: address, interfacesIChainlinkAnyApiClientRequestRequest: interfacesIChainlinkAnyApiClientRequestRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.request
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request
     - Write `request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIChainlinkAnyApiClientRequestRequest: (body)  
     - returns: RequestBuilder<InterfacesIChainlinkAnyApiClientRequest200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientRequestWithRequestBuilder(networkId: String, address: String, interfacesIChainlinkAnyApiClientRequestRequest: InterfacesIChainlinkAnyApiClientRequestRequest) -> RequestBuilder<InterfacesIChainlinkAnyApiClientRequest200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIChainlinkAnyApiClientRequestRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIChainlinkAnyApiClientRequest200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.requests
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIChainlinkAnyApiClientRequestsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientRequests(networkId: String, address: String, interfacesIChainlinkAnyApiClientRequestsRequest: InterfacesIChainlinkAnyApiClientRequestsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIChainlinkAnyApiClientRequests200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientRequestsWithRequestBuilder(networkId: networkId, address: address, interfacesIChainlinkAnyApiClientRequestsRequest: interfacesIChainlinkAnyApiClientRequestsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.requests
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests
     - Read `requests()` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIChainlinkAnyApiClientRequestsRequest: (body)  
     - returns: RequestBuilder<InterfacesIChainlinkAnyApiClientRequests200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientRequestsWithRequestBuilder(networkId: String, address: String, interfacesIChainlinkAnyApiClientRequestsRequest: InterfacesIChainlinkAnyApiClientRequestsRequest) -> RequestBuilder<InterfacesIChainlinkAnyApiClientRequests200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIChainlinkAnyApiClientRequestsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIChainlinkAnyApiClientRequests200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.revokeRole
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientRevokeRole(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIAccessControlGrantRole200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientRevokeRoleWithRequestBuilder(networkId: networkId, address: address, interfacesIAccessControlGrantRoleRequest: interfacesIAccessControlGrantRoleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.revokeRole
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole
     - Write `revokeRole(role,account)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIAccessControlGrantRoleRequest: (body)  
     - returns: RequestBuilder<InterfacesIAccessControlGrantRole200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientRevokeRoleWithRequestBuilder(networkId: String, address: String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) -> RequestBuilder<InterfacesIAccessControlGrantRole200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIAccessControlGrantRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIAccessControlGrantRole200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.setContractURI
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIContractURISetContractURIRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientSetContractURI(networkId: String, address: String, interfacesIContractURISetContractURIRequest: InterfacesIContractURISetContractURIRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIContractURISetContractURI200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientSetContractURIWithRequestBuilder(networkId: networkId, address: address, interfacesIContractURISetContractURIRequest: interfacesIContractURISetContractURIRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.setContractURI
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI
     - Write `setContractURI(uri)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIContractURISetContractURIRequest: (body)  
     - returns: RequestBuilder<InterfacesIContractURISetContractURI200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientSetContractURIWithRequestBuilder(networkId: String, address: String, interfacesIContractURISetContractURIRequest: InterfacesIContractURISetContractURIRequest) -> RequestBuilder<InterfacesIContractURISetContractURI200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIContractURISetContractURIRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIContractURISetContractURI200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.supportsInterface
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC165SupportsInterfaceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientSupportsInterface(networkId: String, address: String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC165SupportsInterface200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientSupportsInterfaceWithRequestBuilder(networkId: networkId, address: address, interfacesIERC165SupportsInterfaceRequest: interfacesIERC165SupportsInterfaceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.supportsInterface
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface
     - Read `supportsInterface(interfaceId)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC165SupportsInterfaceRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC165SupportsInterface200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientSupportsInterfaceWithRequestBuilder(networkId: String, address: String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) -> RequestBuilder<InterfacesIERC165SupportsInterface200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC165SupportsInterfaceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC165SupportsInterface200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.version
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIBeaconImplementationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientVersion(networkId: String, address: String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIContractURIContractURI200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientVersionWithRequestBuilder(networkId: networkId, address: address, interfacesIBeaconImplementationRequest: interfacesIBeaconImplementationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.version
     - POST /{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version
     - Read `version()` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIBeaconImplementationRequest: (body)  
     - returns: RequestBuilder<InterfacesIContractURIContractURI200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientVersionWithRequestBuilder(networkId: String, address: String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) -> RequestBuilder<InterfacesIContractURIContractURI200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIBeaconImplementationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIContractURIContractURI200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IChainlinkAnyApiClient.withdrawLink
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC20TransferRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIChainlinkAnyApiClientWithdrawLink(networkId: String, address: String, interfacesIERC20TransferRequest: InterfacesIERC20TransferRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC20Transfer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIChainlinkAnyApiClientWithdrawLinkWithRequestBuilder(networkId: networkId, address: address, interfacesIERC20TransferRequest: interfacesIERC20TransferRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IChainlinkAnyApiClient.withdrawLink
     - POST /{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink
     - Write `withdrawLink(to,amount)` on an instance of `IChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC20TransferRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC20Transfer200Response> 
     */
    open class func interfacesIChainlinkAnyApiClientWithdrawLinkWithRequestBuilder(networkId: String, address: String, interfacesIERC20TransferRequest: InterfacesIERC20TransferRequest) -> RequestBuilder<InterfacesIERC20Transfer200Response> {
        var localVariablePath = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC20TransferRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC20Transfer200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
