//
// DeployAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeployAPI {

    /**
     Deploy BeaconProxy
     
     - parameter networkId: (path) The network id 
     - parameter deployBeaconProxyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployBeaconProxy(networkId: String, deployBeaconProxyRequest: DeployBeaconProxyRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployBeaconProxyWithRequestBuilder(networkId: networkId, deployBeaconProxyRequest: deployBeaconProxyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy BeaconProxy
     - POST /{networkId}/deploy/BeaconProxy
     - Deploys an instance of `BeaconProxy`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployBeaconProxyRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployBeaconProxyWithRequestBuilder(networkId: String, deployBeaconProxyRequest: DeployBeaconProxyRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/BeaconProxy"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployBeaconProxyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy ChainlinkAnyApiClient
     
     - parameter networkId: (path) The network id 
     - parameter deployChainlinkAnyApiClientRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployChainlinkAnyApiClient(networkId: String, deployChainlinkAnyApiClientRequest: DeployChainlinkAnyApiClientRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployChainlinkAnyApiClientWithRequestBuilder(networkId: networkId, deployChainlinkAnyApiClientRequest: deployChainlinkAnyApiClientRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy ChainlinkAnyApiClient
     - POST /{networkId}/deploy/ChainlinkAnyApiClient
     - Deploys an instance of `ChainlinkAnyApiClient`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployChainlinkAnyApiClientRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployChainlinkAnyApiClientWithRequestBuilder(networkId: String, deployChainlinkAnyApiClientRequest: DeployChainlinkAnyApiClientRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/ChainlinkAnyApiClient"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployChainlinkAnyApiClientRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy ERC1155Mintable
     
     - parameter networkId: (path) The network id 
     - parameter deployERC1155MintableRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployERC1155Mintable(networkId: String, deployERC1155MintableRequest: DeployERC1155MintableRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployERC1155MintableWithRequestBuilder(networkId: networkId, deployERC1155MintableRequest: deployERC1155MintableRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy ERC1155Mintable
     - POST /{networkId}/deploy/ERC1155Mintable
     - Deploys an instance of `ERC1155Mintable`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployERC1155MintableRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployERC1155MintableWithRequestBuilder(networkId: String, deployERC1155MintableRequest: DeployERC1155MintableRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/ERC1155Mintable"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployERC1155MintableRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy ERC20Mintable
     
     - parameter networkId: (path) The network id 
     - parameter deployERC20MintableRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployERC20Mintable(networkId: String, deployERC20MintableRequest: DeployERC20MintableRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployERC20MintableWithRequestBuilder(networkId: networkId, deployERC20MintableRequest: deployERC20MintableRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy ERC20Mintable
     - POST /{networkId}/deploy/ERC20Mintable
     - Deploys an instance of `ERC20Mintable`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployERC20MintableRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployERC20MintableWithRequestBuilder(networkId: String, deployERC20MintableRequest: DeployERC20MintableRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/ERC20Mintable"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployERC20MintableRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy ERC2981Setter
     
     - parameter networkId: (path) The network id 
     - parameter deployERC2981SetterRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployERC2981Setter(networkId: String, deployERC2981SetterRequest: DeployERC2981SetterRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployERC2981SetterWithRequestBuilder(networkId: networkId, deployERC2981SetterRequest: deployERC2981SetterRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy ERC2981Setter
     - POST /{networkId}/deploy/ERC2981Setter
     - Deploys an instance of `ERC2981Setter`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployERC2981SetterRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployERC2981SetterWithRequestBuilder(networkId: String, deployERC2981SetterRequest: DeployERC2981SetterRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/ERC2981Setter"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployERC2981SetterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy ERC721Mintable
     
     - parameter networkId: (path) The network id 
     - parameter deployERC721MintableRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployERC721Mintable(networkId: String, deployERC721MintableRequest: DeployERC721MintableRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployERC721MintableWithRequestBuilder(networkId: networkId, deployERC721MintableRequest: deployERC721MintableRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy ERC721Mintable
     - POST /{networkId}/deploy/ERC721Mintable
     - Deploys an instance of `ERC721Mintable`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployERC721MintableRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployERC721MintableWithRequestBuilder(networkId: String, deployERC721MintableRequest: DeployERC721MintableRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/ERC721Mintable"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployERC721MintableRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy ERC721MintableAutoId
     
     - parameter networkId: (path) The network id 
     - parameter deployERC721MintableRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployERC721MintableAutoId(networkId: String, deployERC721MintableRequest: DeployERC721MintableRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployERC721MintableAutoIdWithRequestBuilder(networkId: networkId, deployERC721MintableRequest: deployERC721MintableRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy ERC721MintableAutoId
     - POST /{networkId}/deploy/ERC721MintableAutoId
     - Deploys an instance of `ERC721MintableAutoId`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployERC721MintableRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployERC721MintableAutoIdWithRequestBuilder(networkId: String, deployERC721MintableRequest: DeployERC721MintableRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/ERC721MintableAutoId"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployERC721MintableRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy TokenDna
     
     - parameter networkId: (path) The network id 
     - parameter deployTokenDnaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployTokenDna(networkId: String, deployTokenDnaRequest: DeployTokenDnaRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployTokenDnaWithRequestBuilder(networkId: networkId, deployTokenDnaRequest: deployTokenDnaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy TokenDna
     - POST /{networkId}/deploy/TokenDna
     - Deploys an instance of `TokenDna`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployTokenDnaRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployTokenDnaWithRequestBuilder(networkId: String, deployTokenDnaRequest: DeployTokenDnaRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/TokenDna"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployTokenDnaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy TokenURI
     
     - parameter networkId: (path) The network id 
     - parameter deployTokenURIRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployTokenURI(networkId: String, deployTokenURIRequest: DeployTokenURIRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployTokenURIWithRequestBuilder(networkId: networkId, deployTokenURIRequest: deployTokenURIRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy TokenURI
     - POST /{networkId}/deploy/TokenURI
     - Deploys an instance of `TokenURI`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployTokenURIRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployTokenURIWithRequestBuilder(networkId: String, deployTokenURIRequest: DeployTokenURIRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/TokenURI"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployTokenURIRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy TokenURIBaseURI
     
     - parameter networkId: (path) The network id 
     - parameter deployTokenURIBaseURIRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployTokenURIBaseURI(networkId: String, deployTokenURIBaseURIRequest: DeployTokenURIBaseURIRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployTokenURIBaseURIWithRequestBuilder(networkId: networkId, deployTokenURIBaseURIRequest: deployTokenURIBaseURIRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy TokenURIBaseURI
     - POST /{networkId}/deploy/TokenURIBaseURI
     - Deploys an instance of `TokenURIBaseURI`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployTokenURIBaseURIRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployTokenURIBaseURIWithRequestBuilder(networkId: String, deployTokenURIBaseURIRequest: DeployTokenURIBaseURIRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/TokenURIBaseURI"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployTokenURIBaseURIRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy TokenURIDna
     
     - parameter networkId: (path) The network id 
     - parameter deployTokenURIDnaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployTokenURIDna(networkId: String, deployTokenURIDnaRequest: DeployTokenURIDnaRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployTokenURIDnaWithRequestBuilder(networkId: networkId, deployTokenURIDnaRequest: deployTokenURIDnaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy TokenURIDna
     - POST /{networkId}/deploy/TokenURIDna
     - Deploys an instance of `TokenURIDna`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployTokenURIDnaRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployTokenURIDnaWithRequestBuilder(networkId: String, deployTokenURIDnaRequest: DeployTokenURIDnaRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/TokenURIDna"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployTokenURIDnaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deploy UpgradeableBeacon
     
     - parameter networkId: (path) The network id 
     - parameter deployUpgradeableBeaconRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deployUpgradeableBeacon(networkId: String, deployUpgradeableBeaconRequest: DeployUpgradeableBeaconRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deployUpgradeableBeaconWithRequestBuilder(networkId: networkId, deployUpgradeableBeaconRequest: deployUpgradeableBeaconRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deploy UpgradeableBeacon
     - POST /{networkId}/deploy/UpgradeableBeacon
     - Deploys an instance of `UpgradeableBeacon`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter deployUpgradeableBeaconRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deployUpgradeableBeaconWithRequestBuilder(networkId: String, deployUpgradeableBeaconRequest: DeployUpgradeableBeaconRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/{networkId}/deploy/UpgradeableBeacon"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deployUpgradeableBeaconRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
