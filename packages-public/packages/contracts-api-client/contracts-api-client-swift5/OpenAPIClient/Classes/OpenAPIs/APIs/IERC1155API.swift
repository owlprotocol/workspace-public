//
// IERC1155API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IERC1155API {

    /**
     IERC1155.balanceOf
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155BalanceOfRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155BalanceOf(networkId: String, address: String, interfacesIERC1155BalanceOfRequest: InterfacesIERC1155BalanceOfRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1155BalanceOf200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155BalanceOfWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1155BalanceOfRequest: interfacesIERC1155BalanceOfRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.balanceOf
     - POST /{networkId}/interface/IERC1155/read/{address}/balanceOf
     - Read `balanceOf(account,id)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155BalanceOfRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1155BalanceOf200Response> 
     */
    open class func interfacesIERC1155BalanceOfWithRequestBuilder(networkId: String, address: String, interfacesIERC1155BalanceOfRequest: InterfacesIERC1155BalanceOfRequest) -> RequestBuilder<InterfacesIERC1155BalanceOf200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/read/{address}/balanceOf"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1155BalanceOfRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1155BalanceOf200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1155.balanceOfBatch
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155BalanceOfBatchRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155BalanceOfBatch(networkId: String, address: String, interfacesIERC1155BalanceOfBatchRequest: InterfacesIERC1155BalanceOfBatchRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1155BalanceOfBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155BalanceOfBatchWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1155BalanceOfBatchRequest: interfacesIERC1155BalanceOfBatchRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.balanceOfBatch
     - POST /{networkId}/interface/IERC1155/read/{address}/balanceOfBatch
     - Read `balanceOfBatch(accounts,ids)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155BalanceOfBatchRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1155BalanceOfBatch200Response> 
     */
    open class func interfacesIERC1155BalanceOfBatchWithRequestBuilder(networkId: String, address: String, interfacesIERC1155BalanceOfBatchRequest: InterfacesIERC1155BalanceOfBatchRequest) -> RequestBuilder<InterfacesIERC1155BalanceOfBatch200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/read/{address}/balanceOfBatch"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1155BalanceOfBatchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1155BalanceOfBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1155.isApprovedForAll
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155IsApprovedForAllRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155IsApprovedForAll(networkId: String, address: String, interfacesIERC1155IsApprovedForAllRequest: InterfacesIERC1155IsApprovedForAllRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1155IsApprovedForAll200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155IsApprovedForAllWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1155IsApprovedForAllRequest: interfacesIERC1155IsApprovedForAllRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.isApprovedForAll
     - POST /{networkId}/interface/IERC1155/read/{address}/isApprovedForAll
     - Read `isApprovedForAll(account,operator)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155IsApprovedForAllRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1155IsApprovedForAll200Response> 
     */
    open class func interfacesIERC1155IsApprovedForAllWithRequestBuilder(networkId: String, address: String, interfacesIERC1155IsApprovedForAllRequest: InterfacesIERC1155IsApprovedForAllRequest) -> RequestBuilder<InterfacesIERC1155IsApprovedForAll200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/read/{address}/isApprovedForAll"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1155IsApprovedForAllRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1155IsApprovedForAll200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1155.safeBatchTransferFrom
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155SafeBatchTransferFromRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155SafeBatchTransferFrom(networkId: String, address: String, interfacesIERC1155SafeBatchTransferFromRequest: InterfacesIERC1155SafeBatchTransferFromRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1155SafeBatchTransferFrom200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155SafeBatchTransferFromWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1155SafeBatchTransferFromRequest: interfacesIERC1155SafeBatchTransferFromRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.safeBatchTransferFrom
     - POST /{networkId}/interface/IERC1155/write/{address}/safeBatchTransferFrom
     - Write `safeBatchTransferFrom(from,to,ids,amounts,data)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155SafeBatchTransferFromRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1155SafeBatchTransferFrom200Response> 
     */
    open class func interfacesIERC1155SafeBatchTransferFromWithRequestBuilder(networkId: String, address: String, interfacesIERC1155SafeBatchTransferFromRequest: InterfacesIERC1155SafeBatchTransferFromRequest) -> RequestBuilder<InterfacesIERC1155SafeBatchTransferFrom200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/write/{address}/safeBatchTransferFrom"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1155SafeBatchTransferFromRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1155SafeBatchTransferFrom200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1155.safeTransferFrom
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155SafeTransferFromRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155SafeTransferFrom(networkId: String, address: String, interfacesIERC1155SafeTransferFromRequest: InterfacesIERC1155SafeTransferFromRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1155SafeTransferFrom200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155SafeTransferFromWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1155SafeTransferFromRequest: interfacesIERC1155SafeTransferFromRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.safeTransferFrom
     - POST /{networkId}/interface/IERC1155/write/{address}/safeTransferFrom
     - Write `safeTransferFrom(from,to,id,amount,data)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155SafeTransferFromRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1155SafeTransferFrom200Response> 
     */
    open class func interfacesIERC1155SafeTransferFromWithRequestBuilder(networkId: String, address: String, interfacesIERC1155SafeTransferFromRequest: InterfacesIERC1155SafeTransferFromRequest) -> RequestBuilder<InterfacesIERC1155SafeTransferFrom200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/write/{address}/safeTransferFrom"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1155SafeTransferFromRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1155SafeTransferFrom200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1155.setApprovalForAll
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155SetApprovalForAllRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155SetApprovalForAll(networkId: String, address: String, interfacesIERC1155SetApprovalForAllRequest: InterfacesIERC1155SetApprovalForAllRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC1155SetApprovalForAll200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155SetApprovalForAllWithRequestBuilder(networkId: networkId, address: address, interfacesIERC1155SetApprovalForAllRequest: interfacesIERC1155SetApprovalForAllRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.setApprovalForAll
     - POST /{networkId}/interface/IERC1155/write/{address}/setApprovalForAll
     - Write `setApprovalForAll(operator,approved)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC1155SetApprovalForAllRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC1155SetApprovalForAll200Response> 
     */
    open class func interfacesIERC1155SetApprovalForAllWithRequestBuilder(networkId: String, address: String, interfacesIERC1155SetApprovalForAllRequest: InterfacesIERC1155SetApprovalForAllRequest) -> RequestBuilder<InterfacesIERC1155SetApprovalForAll200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/write/{address}/setApprovalForAll"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC1155SetApprovalForAllRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC1155SetApprovalForAll200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     IERC1155.supportsInterface
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC165SupportsInterfaceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesIERC1155SupportsInterface(networkId: String, address: String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesIERC165SupportsInterface200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesIERC1155SupportsInterfaceWithRequestBuilder(networkId: networkId, address: address, interfacesIERC165SupportsInterfaceRequest: interfacesIERC165SupportsInterfaceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     IERC1155.supportsInterface
     - POST /{networkId}/interface/IERC1155/read/{address}/supportsInterface
     - Read `supportsInterface(interfaceId)` on an instance of `IERC1155`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC165SupportsInterfaceRequest: (body)  
     - returns: RequestBuilder<InterfacesIERC165SupportsInterface200Response> 
     */
    open class func interfacesIERC1155SupportsInterfaceWithRequestBuilder(networkId: String, address: String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) -> RequestBuilder<InterfacesIERC165SupportsInterface200Response> {
        var localVariablePath = "/{networkId}/interface/IERC1155/read/{address}/supportsInterface"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC165SupportsInterfaceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesIERC165SupportsInterface200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
