//
// ITokenDnaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ITokenDnaAPI {

    /**
     ITokenDna.getDna
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC721GetApprovedRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesITokenDnaGetDna(networkId: String, address: String, interfacesIERC721GetApprovedRequest: InterfacesIERC721GetApprovedRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesITokenDnaGetDna200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesITokenDnaGetDnaWithRequestBuilder(networkId: networkId, address: address, interfacesIERC721GetApprovedRequest: interfacesIERC721GetApprovedRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ITokenDna.getDna
     - POST /{networkId}/interface/ITokenDna/read/{address}/getDna
     - Read `getDna(tokenId)` on an instance of `ITokenDna`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesIERC721GetApprovedRequest: (body)  
     - returns: RequestBuilder<InterfacesITokenDnaGetDna200Response> 
     */
    open class func interfacesITokenDnaGetDnaWithRequestBuilder(networkId: String, address: String, interfacesIERC721GetApprovedRequest: InterfacesIERC721GetApprovedRequest) -> RequestBuilder<InterfacesITokenDnaGetDna200Response> {
        var localVariablePath = "/{networkId}/interface/ITokenDna/read/{address}/getDna"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesIERC721GetApprovedRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesITokenDnaGetDna200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     ITokenDna.getDnaBatch
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesITokenDnaGetDnaBatchRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesITokenDnaGetDnaBatch(networkId: String, address: String, interfacesITokenDnaGetDnaBatchRequest: InterfacesITokenDnaGetDnaBatchRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesITokenDnaGetDnaBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesITokenDnaGetDnaBatchWithRequestBuilder(networkId: networkId, address: address, interfacesITokenDnaGetDnaBatchRequest: interfacesITokenDnaGetDnaBatchRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ITokenDna.getDnaBatch
     - POST /{networkId}/interface/ITokenDna/read/{address}/getDnaBatch
     - Read `getDnaBatch(tokenId)` on an instance of `ITokenDna`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesITokenDnaGetDnaBatchRequest: (body)  
     - returns: RequestBuilder<InterfacesITokenDnaGetDnaBatch200Response> 
     */
    open class func interfacesITokenDnaGetDnaBatchWithRequestBuilder(networkId: String, address: String, interfacesITokenDnaGetDnaBatchRequest: InterfacesITokenDnaGetDnaBatchRequest) -> RequestBuilder<InterfacesITokenDnaGetDnaBatch200Response> {
        var localVariablePath = "/{networkId}/interface/ITokenDna/read/{address}/getDnaBatch"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesITokenDnaGetDnaBatchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesITokenDnaGetDnaBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     ITokenDna.setDna
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesITokenDnaSetDnaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesITokenDnaSetDna(networkId: String, address: String, interfacesITokenDnaSetDnaRequest: InterfacesITokenDnaSetDnaRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesITokenDnaSetDna200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesITokenDnaSetDnaWithRequestBuilder(networkId: networkId, address: address, interfacesITokenDnaSetDnaRequest: interfacesITokenDnaSetDnaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ITokenDna.setDna
     - POST /{networkId}/interface/ITokenDna/write/{address}/setDna
     - Write `setDna(tokenId,dna)` on an instance of `ITokenDna`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesITokenDnaSetDnaRequest: (body)  
     - returns: RequestBuilder<InterfacesITokenDnaSetDna200Response> 
     */
    open class func interfacesITokenDnaSetDnaWithRequestBuilder(networkId: String, address: String, interfacesITokenDnaSetDnaRequest: InterfacesITokenDnaSetDnaRequest) -> RequestBuilder<InterfacesITokenDnaSetDna200Response> {
        var localVariablePath = "/{networkId}/interface/ITokenDna/write/{address}/setDna"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesITokenDnaSetDnaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesITokenDnaSetDna200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     ITokenDna.setDnaBatch
     
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesITokenDnaSetDnaBatchRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func interfacesITokenDnaSetDnaBatch(networkId: String, address: String, interfacesITokenDnaSetDnaBatchRequest: InterfacesITokenDnaSetDnaBatchRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InterfacesITokenDnaSetDnaBatch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return interfacesITokenDnaSetDnaBatchWithRequestBuilder(networkId: networkId, address: address, interfacesITokenDnaSetDnaBatchRequest: interfacesITokenDnaSetDnaBatchRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ITokenDna.setDnaBatch
     - POST /{networkId}/interface/ITokenDna/write/{address}/setDnaBatch
     - Write `setDnaBatch(tokenId,dna)` on an instance of `ITokenDna`
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: Authorization
     - parameter networkId: (path) The network id 
     - parameter address: (path) An ethereum address 
     - parameter interfacesITokenDnaSetDnaBatchRequest: (body)  
     - returns: RequestBuilder<InterfacesITokenDnaSetDnaBatch200Response> 
     */
    open class func interfacesITokenDnaSetDnaBatchWithRequestBuilder(networkId: String, address: String, interfacesITokenDnaSetDnaBatchRequest: InterfacesITokenDnaSetDnaBatchRequest) -> RequestBuilder<InterfacesITokenDnaSetDnaBatch200Response> {
        var localVariablePath = "/{networkId}/interface/ITokenDna/write/{address}/setDnaBatch"
        let networkIdPreEscape = "\(APIHelper.mapValueToPathItem(networkId))"
        let networkIdPostEscape = networkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{networkId}", with: networkIdPostEscape, options: .literal, range: nil)
        let addressPreEscape = "\(APIHelper.mapValueToPathItem(address))"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: interfacesITokenDnaSetDnaBatchRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InterfacesITokenDnaSetDnaBatch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
