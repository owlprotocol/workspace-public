//
// DeployBeaconProxyRequestDeployParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployBeaconProxyRequestDeployParams: Codable, JSONEncodable, Hashable {

    public enum DeploymentMethod: String, Codable, CaseIterable {
        case deterministic = "DETERMINISTIC"
        case erc1167 = "ERC1167"
        case beaconOwl = "BEACON_OWL"
        case beaconExisting = "BEACON_EXISTING"
        case beaconNew = "BEACON_NEW"
    }
    static let msgSenderRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let beaconAddressRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let beaonAdminRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** An ethereum address */
    public var msgSender: String?
    /** Salt parameter string to deploy different contracts with identical parameteres (default: 1) */
    public var salt: String? = "0x1"
    public var deploymentMethod: DeploymentMethod
    /** The address of the beacon, if used in the deployment method */
    public var beaconAddress: String?
    /** The admin address of the beacon, if a new beacon is deployed */
    public var beaonAdmin: String?

    public init(msgSender: String? = nil, salt: String? = "0x1", deploymentMethod: DeploymentMethod, beaconAddress: String? = nil, beaonAdmin: String? = nil) {
        self.msgSender = msgSender
        self.salt = salt
        self.deploymentMethod = deploymentMethod
        self.beaconAddress = beaconAddress
        self.beaonAdmin = beaonAdmin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case msgSender
        case salt
        case deploymentMethod
        case beaconAddress
        case beaonAdmin
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(msgSender, forKey: .msgSender)
        try container.encodeIfPresent(salt, forKey: .salt)
        try container.encode(deploymentMethod, forKey: .deploymentMethod)
        try container.encodeIfPresent(beaconAddress, forKey: .beaconAddress)
        try container.encodeIfPresent(beaonAdmin, forKey: .beaonAdmin)
    }
}

