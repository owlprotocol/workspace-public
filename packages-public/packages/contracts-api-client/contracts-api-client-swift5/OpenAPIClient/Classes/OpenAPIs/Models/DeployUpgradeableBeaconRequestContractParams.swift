//
// DeployUpgradeableBeaconRequestContractParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployUpgradeableBeaconRequestContractParams: Codable, JSONEncodable, Hashable {

    static let _0Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _1Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let adminRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let implementationRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** An ethereum address */
    public var _0: String?
    /** An ethereum address */
    public var _1: String?
    /** An ethereum address */
    public var admin: String?
    /** An ethereum address */
    public var implementation: String?

    public init(_0: String? = nil, _1: String? = nil, admin: String? = nil, implementation: String? = nil) {
        self._0 = _0
        self._1 = _1
        self.admin = admin
        self.implementation = implementation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case admin = "_admin"
        case implementation = "implementation_"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0, forKey: ._0)
        try container.encodeIfPresent(_1, forKey: ._1)
        try container.encodeIfPresent(admin, forKey: .admin)
        try container.encodeIfPresent(implementation, forKey: .implementation)
    }
}

