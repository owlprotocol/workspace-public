//
// UsersMe200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UsersMe200Response: Codable, JSONEncodable, Hashable {

    public var email: String
    public var apiKey: String
    public var dfnsAddress: String?
    public var dfnsId: String?
    public var dfnsStatus: String?
    public var gnosisTxHash: String?
    public var gnosisAddress: String?
    public var topupTotals: AnyCodable?

    public init(email: String, apiKey: String, dfnsAddress: String? = nil, dfnsId: String? = nil, dfnsStatus: String? = nil, gnosisTxHash: String? = nil, gnosisAddress: String? = nil, topupTotals: AnyCodable? = nil) {
        self.email = email
        self.apiKey = apiKey
        self.dfnsAddress = dfnsAddress
        self.dfnsId = dfnsId
        self.dfnsStatus = dfnsStatus
        self.gnosisTxHash = gnosisTxHash
        self.gnosisAddress = gnosisAddress
        self.topupTotals = topupTotals
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case apiKey
        case dfnsAddress
        case dfnsId
        case dfnsStatus
        case gnosisTxHash
        case gnosisAddress
        case topupTotals
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(email, forKey: .email)
        try container.encode(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(dfnsAddress, forKey: .dfnsAddress)
        try container.encodeIfPresent(dfnsId, forKey: .dfnsId)
        try container.encodeIfPresent(dfnsStatus, forKey: .dfnsStatus)
        try container.encodeIfPresent(gnosisTxHash, forKey: .gnosisTxHash)
        try container.encodeIfPresent(gnosisAddress, forKey: .gnosisAddress)
        try container.encodeIfPresent(topupTotals, forKey: .topupTotals)
    }
}

