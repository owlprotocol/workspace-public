//
// InterfacesIChainlinkAnyApiClientRequestRequestContractParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InterfacesIChainlinkAnyApiClientRequestRequestContractParams: Codable, JSONEncodable, Hashable {

    static let _0Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let fulfillAddressRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** An ethereum address */
    public var _0: String?
    /** An arbitrary length byte array */
    public var _1: String?
    /** A solidity bytes32 */
    public var _2: String?
    /** A string */
    public var _3: String?
    /** A string */
    public var _4: String?
    /** A solidity uint256 */
    public var _5: String?
    /** An ethereum address */
    public var fulfillAddress: String?
    /** An arbitrary length byte array */
    public var fulfillPrefixData: String?
    /** A solidity bytes32 */
    public var reqJobId: String?
    /** A string */
    public var reqUrl: String?
    /** A string */
    public var reqPath: String?
    /** A solidity uint256 */
    public var reqFee: String?

    public init(_0: String? = nil, _1: String? = nil, _2: String? = nil, _3: String? = nil, _4: String? = nil, _5: String? = nil, fulfillAddress: String? = nil, fulfillPrefixData: String? = nil, reqJobId: String? = nil, reqUrl: String? = nil, reqPath: String? = nil, reqFee: String? = nil) {
        self._0 = _0
        self._1 = _1
        self._2 = _2
        self._3 = _3
        self._4 = _4
        self._5 = _5
        self.fulfillAddress = fulfillAddress
        self.fulfillPrefixData = fulfillPrefixData
        self.reqJobId = reqJobId
        self.reqUrl = reqUrl
        self.reqPath = reqPath
        self.reqFee = reqFee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
        case _5 = "5"
        case fulfillAddress
        case fulfillPrefixData
        case reqJobId
        case reqUrl
        case reqPath
        case reqFee
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0, forKey: ._0)
        try container.encodeIfPresent(_1, forKey: ._1)
        try container.encodeIfPresent(_2, forKey: ._2)
        try container.encodeIfPresent(_3, forKey: ._3)
        try container.encodeIfPresent(_4, forKey: ._4)
        try container.encodeIfPresent(_5, forKey: ._5)
        try container.encodeIfPresent(fulfillAddress, forKey: .fulfillAddress)
        try container.encodeIfPresent(fulfillPrefixData, forKey: .fulfillPrefixData)
        try container.encodeIfPresent(reqJobId, forKey: .reqJobId)
        try container.encodeIfPresent(reqUrl, forKey: .reqUrl)
        try container.encodeIfPresent(reqPath, forKey: .reqPath)
        try container.encodeIfPresent(reqFee, forKey: .reqFee)
    }
}

