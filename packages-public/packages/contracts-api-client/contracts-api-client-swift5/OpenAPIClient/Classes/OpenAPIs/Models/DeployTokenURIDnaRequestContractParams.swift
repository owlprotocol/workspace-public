//
// DeployTokenURIDnaRequestContractParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployTokenURIDnaRequestContractParams: Codable, JSONEncodable, Hashable {

    static let _0Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _2Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _4Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _5Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let adminRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let baseUriRoleRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let dnaProviderRoleRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let dnaProviderRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** An ethereum address */
    public var _0: String?
    /** A string */
    public var _1: String?
    /** An ethereum address */
    public var _2: String?
    /** A string */
    public var _3: String?
    /** An ethereum address */
    public var _4: String?
    /** An ethereum address */
    public var _5: String?
    /** An ethereum address */
    public var admin: String?
    /** A string */
    public var contractUri: String?
    /** An ethereum address */
    public var baseUriRole: String?
    /** A string */
    public var baseUri: String?
    /** An ethereum address */
    public var dnaProviderRole: String?
    /** An ethereum address */
    public var dnaProvider: String?

    public init(_0: String? = nil, _1: String? = nil, _2: String? = nil, _3: String? = nil, _4: String? = nil, _5: String? = nil, admin: String? = nil, contractUri: String? = nil, baseUriRole: String? = nil, baseUri: String? = nil, dnaProviderRole: String? = nil, dnaProvider: String? = nil) {
        self._0 = _0
        self._1 = _1
        self._2 = _2
        self._3 = _3
        self._4 = _4
        self._5 = _5
        self.admin = admin
        self.contractUri = contractUri
        self.baseUriRole = baseUriRole
        self.baseUri = baseUri
        self.dnaProviderRole = dnaProviderRole
        self.dnaProvider = dnaProvider
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
        case _5 = "5"
        case admin = "_admin"
        case contractUri = "_contractUri"
        case baseUriRole = "_baseUriRole"
        case baseUri = "_baseUri"
        case dnaProviderRole = "_dnaProviderRole"
        case dnaProvider = "_dnaProvider"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0, forKey: ._0)
        try container.encodeIfPresent(_1, forKey: ._1)
        try container.encodeIfPresent(_2, forKey: ._2)
        try container.encodeIfPresent(_3, forKey: ._3)
        try container.encodeIfPresent(_4, forKey: ._4)
        try container.encodeIfPresent(_5, forKey: ._5)
        try container.encodeIfPresent(admin, forKey: .admin)
        try container.encodeIfPresent(contractUri, forKey: .contractUri)
        try container.encodeIfPresent(baseUriRole, forKey: .baseUriRole)
        try container.encodeIfPresent(baseUri, forKey: .baseUri)
        try container.encodeIfPresent(dnaProviderRole, forKey: .dnaProviderRole)
        try container.encodeIfPresent(dnaProvider, forKey: .dnaProvider)
    }
}

