//
// InterfacesIERC2981SetterSetTokenRoyaltyRequestContractParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InterfacesIERC2981SetterSetTokenRoyaltyRequestContractParams: Codable, JSONEncodable, Hashable {

    static let _1Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let receiverRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** A solidity uint256 */
    public var _0: String?
    /** An ethereum address */
    public var _1: String?
    /** A solidity uint96 */
    public var _2: String?
    /** A solidity uint256 */
    public var tokenId: String?
    /** An ethereum address */
    public var receiver: String?
    /** A solidity uint96 */
    public var feeNumerator: String?

    public init(_0: String? = nil, _1: String? = nil, _2: String? = nil, tokenId: String? = nil, receiver: String? = nil, feeNumerator: String? = nil) {
        self._0 = _0
        self._1 = _1
        self._2 = _2
        self.tokenId = tokenId
        self.receiver = receiver
        self.feeNumerator = feeNumerator
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case tokenId
        case receiver
        case feeNumerator
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0, forKey: ._0)
        try container.encodeIfPresent(_1, forKey: ._1)
        try container.encodeIfPresent(_2, forKey: ._2)
        try container.encodeIfPresent(tokenId, forKey: .tokenId)
        try container.encodeIfPresent(receiver, forKey: .receiver)
        try container.encodeIfPresent(feeNumerator, forKey: .feeNumerator)
    }
}

