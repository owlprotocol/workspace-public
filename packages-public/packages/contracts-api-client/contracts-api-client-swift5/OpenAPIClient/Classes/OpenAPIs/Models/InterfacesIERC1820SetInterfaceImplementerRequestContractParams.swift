//
// InterfacesIERC1820SetInterfaceImplementerRequestContractParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InterfacesIERC1820SetInterfaceImplementerRequestContractParams: Codable, JSONEncodable, Hashable {

    static let _0Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _2Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let accountRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let implementerRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** An ethereum address */
    public var _0: String?
    /** A solidity bytes32 */
    public var _1: String?
    /** An ethereum address */
    public var _2: String?
    /** An ethereum address */
    public var account: String?
    /** A solidity bytes32 */
    public var interfaceHash: String?
    /** An ethereum address */
    public var implementer: String?

    public init(_0: String? = nil, _1: String? = nil, _2: String? = nil, account: String? = nil, interfaceHash: String? = nil, implementer: String? = nil) {
        self._0 = _0
        self._1 = _1
        self._2 = _2
        self.account = account
        self.interfaceHash = interfaceHash
        self.implementer = implementer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case account
        case interfaceHash = "_interfaceHash"
        case implementer
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0, forKey: ._0)
        try container.encodeIfPresent(_1, forKey: ._1)
        try container.encodeIfPresent(_2, forKey: ._2)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(interfaceHash, forKey: .interfaceHash)
        try container.encodeIfPresent(implementer, forKey: .implementer)
    }
}

