//
// DeployERC2981SetterRequestContractParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployERC2981SetterRequestContractParams: Codable, JSONEncodable, Hashable {

    static let _0Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _2Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let _3Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let adminRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let royaltyRoleRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    static let royaltyReceiverRule = StringRule(minLength: nil, maxLength: nil, pattern: "/0x([a-fA-F0-9]){40}/")
    /** An ethereum address */
    public var _0: String?
    /** A string */
    public var _1: String?
    /** An ethereum address */
    public var _2: String?
    /** An ethereum address */
    public var _3: String?
    /** A solidity uint96 */
    public var _4: String?
    /** An ethereum address */
    public var admin: String?
    /** A string */
    public var contractUri: String?
    /** An ethereum address */
    public var royaltyRole: String?
    /** An ethereum address */
    public var royaltyReceiver: String?
    /** A solidity uint96 */
    public var feeNumerator: String?

    public init(_0: String? = nil, _1: String? = nil, _2: String? = nil, _3: String? = nil, _4: String? = nil, admin: String? = nil, contractUri: String? = nil, royaltyRole: String? = nil, royaltyReceiver: String? = nil, feeNumerator: String? = nil) {
        self._0 = _0
        self._1 = _1
        self._2 = _2
        self._3 = _3
        self._4 = _4
        self.admin = admin
        self.contractUri = contractUri
        self.royaltyRole = royaltyRole
        self.royaltyReceiver = royaltyReceiver
        self.feeNumerator = feeNumerator
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
        case _4 = "4"
        case admin = "_admin"
        case contractUri = "_contractUri"
        case royaltyRole = "_royaltyRole"
        case royaltyReceiver = "_royaltyReceiver"
        case feeNumerator = "_feeNumerator"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_0, forKey: ._0)
        try container.encodeIfPresent(_1, forKey: ._1)
        try container.encodeIfPresent(_2, forKey: ._2)
        try container.encodeIfPresent(_3, forKey: ._3)
        try container.encodeIfPresent(_4, forKey: ._4)
        try container.encodeIfPresent(admin, forKey: .admin)
        try container.encodeIfPresent(contractUri, forKey: .contractUri)
        try container.encodeIfPresent(royaltyRole, forKey: .royaltyRole)
        try container.encodeIfPresent(royaltyReceiver, forKey: .royaltyReceiver)
        try container.encodeIfPresent(feeNumerator, forKey: .feeNumerator)
    }
}

