/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeployBeaconProxyDefaultResponse
import org.openapitools.client.models.InterfacesIAccessControlGetRoleAdmin200Response
import org.openapitools.client.models.InterfacesIAccessControlGetRoleAdminRequest
import org.openapitools.client.models.InterfacesIAccessControlGrantRole200Response
import org.openapitools.client.models.InterfacesIAccessControlGrantRoleRequest
import org.openapitools.client.models.InterfacesIAccessControlHasRole200Response
import org.openapitools.client.models.InterfacesIBeaconImplementationRequest
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientFulfill200Response
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientFulfillRequest
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientRequest200Response
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientRequestRequest
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientRequests200Response
import org.openapitools.client.models.InterfacesIChainlinkAnyApiClientRequestsRequest
import org.openapitools.client.models.InterfacesIContractURIContractURI200Response
import org.openapitools.client.models.InterfacesIContractURISetContractURI200Response
import org.openapitools.client.models.InterfacesIContractURISetContractURIRequest
import org.openapitools.client.models.InterfacesIERC165SupportsInterface200Response
import org.openapitools.client.models.InterfacesIERC165SupportsInterfaceRequest
import org.openapitools.client.models.InterfacesIERC20Transfer200Response
import org.openapitools.client.models.InterfacesIERC20TransferRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class IChainlinkAnyApiClientApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://17a0-195-175-28-162.ngrok-free.app/api")
        }
    }

    /**
     * IChainlinkAnyApiClient.contractURI
     * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return InterfacesIContractURIContractURI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientContractURI(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : InterfacesIContractURIContractURI200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientContractURIWithHttpInfo(networkId = networkId, address = address, interfacesIBeaconImplementationRequest = interfacesIBeaconImplementationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIContractURIContractURI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.contractURI
     * Read &#x60;contractURI()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return ApiResponse<InterfacesIContractURIContractURI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientContractURIWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : ApiResponse<InterfacesIContractURIContractURI200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientContractURIRequestConfig(networkId = networkId, address = address, interfacesIBeaconImplementationRequest = interfacesIBeaconImplementationRequest)

        return request<InterfacesIBeaconImplementationRequest, InterfacesIContractURIContractURI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientContractURI
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientContractURIRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : RequestConfig<InterfacesIBeaconImplementationRequest> {
        val localVariableBody = interfacesIBeaconImplementationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/contractURI".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
     * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientDEFAULTADMINROLE(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(networkId = networkId, address = address, interfacesIBeaconImplementationRequest = interfacesIBeaconImplementationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.DEFAULT_ADMIN_ROLE
     * Read &#x60;DEFAULT_ADMIN_ROLE()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientDEFAULTADMINROLEWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : ApiResponse<InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientDEFAULTADMINROLERequestConfig(networkId = networkId, address = address, interfacesIBeaconImplementationRequest = interfacesIBeaconImplementationRequest)

        return request<InterfacesIBeaconImplementationRequest, InterfacesIChainlinkAnyApiClientDEFAULTADMINROLE200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientDEFAULTADMINROLE
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientDEFAULTADMINROLERequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : RequestConfig<InterfacesIBeaconImplementationRequest> {
        val localVariableBody = interfacesIBeaconImplementationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/DEFAULT_ADMIN_ROLE".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.fulfill
     * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientFulfillRequest 
     * @return InterfacesIChainlinkAnyApiClientFulfill200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientFulfill(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIChainlinkAnyApiClientFulfillRequest: InterfacesIChainlinkAnyApiClientFulfillRequest) : InterfacesIChainlinkAnyApiClientFulfill200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientFulfillWithHttpInfo(networkId = networkId, address = address, interfacesIChainlinkAnyApiClientFulfillRequest = interfacesIChainlinkAnyApiClientFulfillRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIChainlinkAnyApiClientFulfill200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.fulfill
     * Write &#x60;fulfill(reqId,reqResponseData)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientFulfillRequest 
     * @return ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientFulfillWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIChainlinkAnyApiClientFulfillRequest: InterfacesIChainlinkAnyApiClientFulfillRequest) : ApiResponse<InterfacesIChainlinkAnyApiClientFulfill200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientFulfillRequestConfig(networkId = networkId, address = address, interfacesIChainlinkAnyApiClientFulfillRequest = interfacesIChainlinkAnyApiClientFulfillRequest)

        return request<InterfacesIChainlinkAnyApiClientFulfillRequest, InterfacesIChainlinkAnyApiClientFulfill200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientFulfill
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientFulfillRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientFulfillRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIChainlinkAnyApiClientFulfillRequest: InterfacesIChainlinkAnyApiClientFulfillRequest) : RequestConfig<InterfacesIChainlinkAnyApiClientFulfillRequest> {
        val localVariableBody = interfacesIChainlinkAnyApiClientFulfillRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/fulfill".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.getRoleAdmin
     * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGetRoleAdminRequest 
     * @return InterfacesIAccessControlGetRoleAdmin200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientGetRoleAdmin(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIAccessControlGetRoleAdminRequest: InterfacesIAccessControlGetRoleAdminRequest) : InterfacesIAccessControlGetRoleAdmin200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(networkId = networkId, address = address, interfacesIAccessControlGetRoleAdminRequest = interfacesIAccessControlGetRoleAdminRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIAccessControlGetRoleAdmin200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.getRoleAdmin
     * Read &#x60;getRoleAdmin(role)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGetRoleAdminRequest 
     * @return ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientGetRoleAdminWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGetRoleAdminRequest: InterfacesIAccessControlGetRoleAdminRequest) : ApiResponse<InterfacesIAccessControlGetRoleAdmin200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientGetRoleAdminRequestConfig(networkId = networkId, address = address, interfacesIAccessControlGetRoleAdminRequest = interfacesIAccessControlGetRoleAdminRequest)

        return request<InterfacesIAccessControlGetRoleAdminRequest, InterfacesIAccessControlGetRoleAdmin200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientGetRoleAdmin
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGetRoleAdminRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientGetRoleAdminRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGetRoleAdminRequest: InterfacesIAccessControlGetRoleAdminRequest) : RequestConfig<InterfacesIAccessControlGetRoleAdminRequest> {
        val localVariableBody = interfacesIAccessControlGetRoleAdminRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/getRoleAdmin".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.grantRole
     * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return InterfacesIAccessControlGrantRole200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientGrantRole(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : InterfacesIAccessControlGrantRole200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIAccessControlGrantRole200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.grantRole
     * Write &#x60;grantRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return ApiResponse<InterfacesIAccessControlGrantRole200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientGrantRoleWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : ApiResponse<InterfacesIAccessControlGrantRole200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientGrantRoleRequestConfig(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return request<InterfacesIAccessControlGrantRoleRequest, InterfacesIAccessControlGrantRole200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientGrantRole
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientGrantRoleRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : RequestConfig<InterfacesIAccessControlGrantRoleRequest> {
        val localVariableBody = interfacesIAccessControlGrantRoleRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/grantRole".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.hasRole
     * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return InterfacesIAccessControlHasRole200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientHasRole(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : InterfacesIAccessControlHasRole200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIAccessControlHasRole200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.hasRole
     * Read &#x60;hasRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return ApiResponse<InterfacesIAccessControlHasRole200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientHasRoleWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : ApiResponse<InterfacesIAccessControlHasRole200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientHasRoleRequestConfig(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return request<InterfacesIAccessControlGrantRoleRequest, InterfacesIAccessControlHasRole200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientHasRole
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientHasRoleRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : RequestConfig<InterfacesIAccessControlGrantRoleRequest> {
        val localVariableBody = interfacesIAccessControlGrantRoleRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/hasRole".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.renounceRole
     * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return InterfacesIAccessControlGrantRole200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientRenounceRole(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : InterfacesIAccessControlGrantRole200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIAccessControlGrantRole200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.renounceRole
     * Write &#x60;renounceRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return ApiResponse<InterfacesIAccessControlGrantRole200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientRenounceRoleWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : ApiResponse<InterfacesIAccessControlGrantRole200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientRenounceRoleRequestConfig(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return request<InterfacesIAccessControlGrantRoleRequest, InterfacesIAccessControlGrantRole200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientRenounceRole
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientRenounceRoleRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : RequestConfig<InterfacesIAccessControlGrantRoleRequest> {
        val localVariableBody = interfacesIAccessControlGrantRoleRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/renounceRole".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.request
     * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientRequestRequest 
     * @return InterfacesIChainlinkAnyApiClientRequest200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientRequest(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIChainlinkAnyApiClientRequestRequest: InterfacesIChainlinkAnyApiClientRequestRequest) : InterfacesIChainlinkAnyApiClientRequest200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientRequestWithHttpInfo(networkId = networkId, address = address, interfacesIChainlinkAnyApiClientRequestRequest = interfacesIChainlinkAnyApiClientRequestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIChainlinkAnyApiClientRequest200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.request
     * Write &#x60;request(fulfillAddress,fulfillPrefixData,reqJobId,reqUrl,reqPath,reqFee)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientRequestRequest 
     * @return ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientRequestWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIChainlinkAnyApiClientRequestRequest: InterfacesIChainlinkAnyApiClientRequestRequest) : ApiResponse<InterfacesIChainlinkAnyApiClientRequest200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientRequestRequestConfig(networkId = networkId, address = address, interfacesIChainlinkAnyApiClientRequestRequest = interfacesIChainlinkAnyApiClientRequestRequest)

        return request<InterfacesIChainlinkAnyApiClientRequestRequest, InterfacesIChainlinkAnyApiClientRequest200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientRequest
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientRequestRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientRequestRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIChainlinkAnyApiClientRequestRequest: InterfacesIChainlinkAnyApiClientRequestRequest) : RequestConfig<InterfacesIChainlinkAnyApiClientRequestRequest> {
        val localVariableBody = interfacesIChainlinkAnyApiClientRequestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/request".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.requests
     * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientRequestsRequest 
     * @return InterfacesIChainlinkAnyApiClientRequests200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientRequests(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIChainlinkAnyApiClientRequestsRequest: InterfacesIChainlinkAnyApiClientRequestsRequest) : InterfacesIChainlinkAnyApiClientRequests200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientRequestsWithHttpInfo(networkId = networkId, address = address, interfacesIChainlinkAnyApiClientRequestsRequest = interfacesIChainlinkAnyApiClientRequestsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIChainlinkAnyApiClientRequests200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.requests
     * Read &#x60;requests()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientRequestsRequest 
     * @return ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientRequestsWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIChainlinkAnyApiClientRequestsRequest: InterfacesIChainlinkAnyApiClientRequestsRequest) : ApiResponse<InterfacesIChainlinkAnyApiClientRequests200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientRequestsRequestConfig(networkId = networkId, address = address, interfacesIChainlinkAnyApiClientRequestsRequest = interfacesIChainlinkAnyApiClientRequestsRequest)

        return request<InterfacesIChainlinkAnyApiClientRequestsRequest, InterfacesIChainlinkAnyApiClientRequests200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientRequests
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIChainlinkAnyApiClientRequestsRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientRequestsRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIChainlinkAnyApiClientRequestsRequest: InterfacesIChainlinkAnyApiClientRequestsRequest) : RequestConfig<InterfacesIChainlinkAnyApiClientRequestsRequest> {
        val localVariableBody = interfacesIChainlinkAnyApiClientRequestsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/requests".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.revokeRole
     * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return InterfacesIAccessControlGrantRole200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientRevokeRole(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : InterfacesIAccessControlGrantRole200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIAccessControlGrantRole200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.revokeRole
     * Write &#x60;revokeRole(role,account)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return ApiResponse<InterfacesIAccessControlGrantRole200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientRevokeRoleWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : ApiResponse<InterfacesIAccessControlGrantRole200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientRevokeRoleRequestConfig(networkId = networkId, address = address, interfacesIAccessControlGrantRoleRequest = interfacesIAccessControlGrantRoleRequest)

        return request<InterfacesIAccessControlGrantRoleRequest, InterfacesIAccessControlGrantRole200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientRevokeRole
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIAccessControlGrantRoleRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientRevokeRoleRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIAccessControlGrantRoleRequest: InterfacesIAccessControlGrantRoleRequest) : RequestConfig<InterfacesIAccessControlGrantRoleRequest> {
        val localVariableBody = interfacesIAccessControlGrantRoleRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/revokeRole".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.setContractURI
     * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIContractURISetContractURIRequest 
     * @return InterfacesIContractURISetContractURI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientSetContractURI(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIContractURISetContractURIRequest: InterfacesIContractURISetContractURIRequest) : InterfacesIContractURISetContractURI200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(networkId = networkId, address = address, interfacesIContractURISetContractURIRequest = interfacesIContractURISetContractURIRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIContractURISetContractURI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.setContractURI
     * Write &#x60;setContractURI(uri)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIContractURISetContractURIRequest 
     * @return ApiResponse<InterfacesIContractURISetContractURI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientSetContractURIWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIContractURISetContractURIRequest: InterfacesIContractURISetContractURIRequest) : ApiResponse<InterfacesIContractURISetContractURI200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientSetContractURIRequestConfig(networkId = networkId, address = address, interfacesIContractURISetContractURIRequest = interfacesIContractURISetContractURIRequest)

        return request<InterfacesIContractURISetContractURIRequest, InterfacesIContractURISetContractURI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientSetContractURI
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIContractURISetContractURIRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientSetContractURIRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIContractURISetContractURIRequest: InterfacesIContractURISetContractURIRequest) : RequestConfig<InterfacesIContractURISetContractURIRequest> {
        val localVariableBody = interfacesIContractURISetContractURIRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/setContractURI".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC165SupportsInterfaceRequest 
     * @return InterfacesIERC165SupportsInterface200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientSupportsInterface(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) : InterfacesIERC165SupportsInterface200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(networkId = networkId, address = address, interfacesIERC165SupportsInterfaceRequest = interfacesIERC165SupportsInterfaceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC165SupportsInterface200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC165SupportsInterfaceRequest 
     * @return ApiResponse<InterfacesIERC165SupportsInterface200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientSupportsInterfaceWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) : ApiResponse<InterfacesIERC165SupportsInterface200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientSupportsInterfaceRequestConfig(networkId = networkId, address = address, interfacesIERC165SupportsInterfaceRequest = interfacesIERC165SupportsInterfaceRequest)

        return request<InterfacesIERC165SupportsInterfaceRequest, InterfacesIERC165SupportsInterface200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientSupportsInterface
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC165SupportsInterfaceRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientSupportsInterfaceRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) : RequestConfig<InterfacesIERC165SupportsInterfaceRequest> {
        val localVariableBody = interfacesIERC165SupportsInterfaceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/supportsInterface".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.version
     * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return InterfacesIContractURIContractURI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientVersion(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : InterfacesIContractURIContractURI200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientVersionWithHttpInfo(networkId = networkId, address = address, interfacesIBeaconImplementationRequest = interfacesIBeaconImplementationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIContractURIContractURI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.version
     * Read &#x60;version()&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return ApiResponse<InterfacesIContractURIContractURI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientVersionWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : ApiResponse<InterfacesIContractURIContractURI200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientVersionRequestConfig(networkId = networkId, address = address, interfacesIBeaconImplementationRequest = interfacesIBeaconImplementationRequest)

        return request<InterfacesIBeaconImplementationRequest, InterfacesIContractURIContractURI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientVersion
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIBeaconImplementationRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientVersionRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIBeaconImplementationRequest: InterfacesIBeaconImplementationRequest) : RequestConfig<InterfacesIBeaconImplementationRequest> {
        val localVariableBody = interfacesIBeaconImplementationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/read/{address}/version".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IChainlinkAnyApiClient.withdrawLink
     * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC20TransferRequest 
     * @return InterfacesIERC20Transfer200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIChainlinkAnyApiClientWithdrawLink(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC20TransferRequest: InterfacesIERC20TransferRequest) : InterfacesIERC20Transfer200Response {
        val localVarResponse = interfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(networkId = networkId, address = address, interfacesIERC20TransferRequest = interfacesIERC20TransferRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC20Transfer200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IChainlinkAnyApiClient.withdrawLink
     * Write &#x60;withdrawLink(to,amount)&#x60; on an instance of &#x60;IChainlinkAnyApiClient&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC20TransferRequest 
     * @return ApiResponse<InterfacesIERC20Transfer200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIChainlinkAnyApiClientWithdrawLinkWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC20TransferRequest: InterfacesIERC20TransferRequest) : ApiResponse<InterfacesIERC20Transfer200Response?> {
        val localVariableConfig = interfacesIChainlinkAnyApiClientWithdrawLinkRequestConfig(networkId = networkId, address = address, interfacesIERC20TransferRequest = interfacesIERC20TransferRequest)

        return request<InterfacesIERC20TransferRequest, InterfacesIERC20Transfer200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIChainlinkAnyApiClientWithdrawLink
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC20TransferRequest 
     * @return RequestConfig
     */
    fun interfacesIChainlinkAnyApiClientWithdrawLinkRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC20TransferRequest: InterfacesIERC20TransferRequest) : RequestConfig<InterfacesIERC20TransferRequest> {
        val localVariableBody = interfacesIERC20TransferRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IChainlinkAnyApiClient/write/{address}/withdrawLink".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
