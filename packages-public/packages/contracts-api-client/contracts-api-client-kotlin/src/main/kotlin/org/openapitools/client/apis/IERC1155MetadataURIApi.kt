/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeployBeaconProxyDefaultResponse
import org.openapitools.client.models.InterfacesIERC1155BalanceOf200Response
import org.openapitools.client.models.InterfacesIERC1155BalanceOfBatch200Response
import org.openapitools.client.models.InterfacesIERC1155BalanceOfBatchRequest
import org.openapitools.client.models.InterfacesIERC1155BalanceOfRequest
import org.openapitools.client.models.InterfacesIERC1155IsApprovedForAll200Response
import org.openapitools.client.models.InterfacesIERC1155IsApprovedForAllRequest
import org.openapitools.client.models.InterfacesIERC1155MetadataURIUri200Response
import org.openapitools.client.models.InterfacesIERC1155MetadataURIUriRequest
import org.openapitools.client.models.InterfacesIERC1155SafeBatchTransferFrom200Response
import org.openapitools.client.models.InterfacesIERC1155SafeBatchTransferFromRequest
import org.openapitools.client.models.InterfacesIERC1155SafeTransferFrom200Response
import org.openapitools.client.models.InterfacesIERC1155SafeTransferFromRequest
import org.openapitools.client.models.InterfacesIERC1155SetApprovalForAll200Response
import org.openapitools.client.models.InterfacesIERC1155SetApprovalForAllRequest
import org.openapitools.client.models.InterfacesIERC165SupportsInterface200Response
import org.openapitools.client.models.InterfacesIERC165SupportsInterfaceRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class IERC1155MetadataURIApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://17a0-195-175-28-162.ngrok-free.app/api")
        }
    }

    /**
     * IERC1155MetadataURI.balanceOf
     * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155BalanceOfRequest 
     * @return InterfacesIERC1155BalanceOf200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURIBalanceOf(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155BalanceOfRequest: InterfacesIERC1155BalanceOfRequest) : InterfacesIERC1155BalanceOf200Response {
        val localVarResponse = interfacesIERC1155MetadataURIBalanceOfWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155BalanceOfRequest = interfacesIERC1155BalanceOfRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155BalanceOf200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.balanceOf
     * Read &#x60;balanceOf(account,id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155BalanceOfRequest 
     * @return ApiResponse<InterfacesIERC1155BalanceOf200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURIBalanceOfWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155BalanceOfRequest: InterfacesIERC1155BalanceOfRequest) : ApiResponse<InterfacesIERC1155BalanceOf200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURIBalanceOfRequestConfig(networkId = networkId, address = address, interfacesIERC1155BalanceOfRequest = interfacesIERC1155BalanceOfRequest)

        return request<InterfacesIERC1155BalanceOfRequest, InterfacesIERC1155BalanceOf200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURIBalanceOf
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155BalanceOfRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURIBalanceOfRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155BalanceOfRequest: InterfacesIERC1155BalanceOfRequest) : RequestConfig<InterfacesIERC1155BalanceOfRequest> {
        val localVariableBody = interfacesIERC1155BalanceOfRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOf".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.balanceOfBatch
     * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155BalanceOfBatchRequest 
     * @return InterfacesIERC1155BalanceOfBatch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURIBalanceOfBatch(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155BalanceOfBatchRequest: InterfacesIERC1155BalanceOfBatchRequest) : InterfacesIERC1155BalanceOfBatch200Response {
        val localVarResponse = interfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155BalanceOfBatchRequest = interfacesIERC1155BalanceOfBatchRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155BalanceOfBatch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.balanceOfBatch
     * Read &#x60;balanceOfBatch(accounts,ids)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155BalanceOfBatchRequest 
     * @return ApiResponse<InterfacesIERC1155BalanceOfBatch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURIBalanceOfBatchWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155BalanceOfBatchRequest: InterfacesIERC1155BalanceOfBatchRequest) : ApiResponse<InterfacesIERC1155BalanceOfBatch200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURIBalanceOfBatchRequestConfig(networkId = networkId, address = address, interfacesIERC1155BalanceOfBatchRequest = interfacesIERC1155BalanceOfBatchRequest)

        return request<InterfacesIERC1155BalanceOfBatchRequest, InterfacesIERC1155BalanceOfBatch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURIBalanceOfBatch
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155BalanceOfBatchRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURIBalanceOfBatchRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155BalanceOfBatchRequest: InterfacesIERC1155BalanceOfBatchRequest) : RequestConfig<InterfacesIERC1155BalanceOfBatchRequest> {
        val localVariableBody = interfacesIERC1155BalanceOfBatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/read/{address}/balanceOfBatch".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.isApprovedForAll
     * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155IsApprovedForAllRequest 
     * @return InterfacesIERC1155IsApprovedForAll200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURIIsApprovedForAll(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155IsApprovedForAllRequest: InterfacesIERC1155IsApprovedForAllRequest) : InterfacesIERC1155IsApprovedForAll200Response {
        val localVarResponse = interfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155IsApprovedForAllRequest = interfacesIERC1155IsApprovedForAllRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155IsApprovedForAll200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.isApprovedForAll
     * Read &#x60;isApprovedForAll(account,operator)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155IsApprovedForAllRequest 
     * @return ApiResponse<InterfacesIERC1155IsApprovedForAll200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURIIsApprovedForAllWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155IsApprovedForAllRequest: InterfacesIERC1155IsApprovedForAllRequest) : ApiResponse<InterfacesIERC1155IsApprovedForAll200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURIIsApprovedForAllRequestConfig(networkId = networkId, address = address, interfacesIERC1155IsApprovedForAllRequest = interfacesIERC1155IsApprovedForAllRequest)

        return request<InterfacesIERC1155IsApprovedForAllRequest, InterfacesIERC1155IsApprovedForAll200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURIIsApprovedForAll
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155IsApprovedForAllRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURIIsApprovedForAllRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155IsApprovedForAllRequest: InterfacesIERC1155IsApprovedForAllRequest) : RequestConfig<InterfacesIERC1155IsApprovedForAllRequest> {
        val localVariableBody = interfacesIERC1155IsApprovedForAllRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/read/{address}/isApprovedForAll".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.safeBatchTransferFrom
     * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SafeBatchTransferFromRequest 
     * @return InterfacesIERC1155SafeBatchTransferFrom200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURISafeBatchTransferFrom(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155SafeBatchTransferFromRequest: InterfacesIERC1155SafeBatchTransferFromRequest) : InterfacesIERC1155SafeBatchTransferFrom200Response {
        val localVarResponse = interfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155SafeBatchTransferFromRequest = interfacesIERC1155SafeBatchTransferFromRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155SafeBatchTransferFrom200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.safeBatchTransferFrom
     * Write &#x60;safeBatchTransferFrom(from,to,ids,amounts,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SafeBatchTransferFromRequest 
     * @return ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURISafeBatchTransferFromWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155SafeBatchTransferFromRequest: InterfacesIERC1155SafeBatchTransferFromRequest) : ApiResponse<InterfacesIERC1155SafeBatchTransferFrom200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURISafeBatchTransferFromRequestConfig(networkId = networkId, address = address, interfacesIERC1155SafeBatchTransferFromRequest = interfacesIERC1155SafeBatchTransferFromRequest)

        return request<InterfacesIERC1155SafeBatchTransferFromRequest, InterfacesIERC1155SafeBatchTransferFrom200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURISafeBatchTransferFrom
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SafeBatchTransferFromRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURISafeBatchTransferFromRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155SafeBatchTransferFromRequest: InterfacesIERC1155SafeBatchTransferFromRequest) : RequestConfig<InterfacesIERC1155SafeBatchTransferFromRequest> {
        val localVariableBody = interfacesIERC1155SafeBatchTransferFromRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeBatchTransferFrom".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SafeTransferFromRequest 
     * @return InterfacesIERC1155SafeTransferFrom200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURISafeTransferFrom(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155SafeTransferFromRequest: InterfacesIERC1155SafeTransferFromRequest) : InterfacesIERC1155SafeTransferFrom200Response {
        val localVarResponse = interfacesIERC1155MetadataURISafeTransferFromWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155SafeTransferFromRequest = interfacesIERC1155SafeTransferFromRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155SafeTransferFrom200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.safeTransferFrom
     * Write &#x60;safeTransferFrom(from,to,id,amount,data)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SafeTransferFromRequest 
     * @return ApiResponse<InterfacesIERC1155SafeTransferFrom200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURISafeTransferFromWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155SafeTransferFromRequest: InterfacesIERC1155SafeTransferFromRequest) : ApiResponse<InterfacesIERC1155SafeTransferFrom200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURISafeTransferFromRequestConfig(networkId = networkId, address = address, interfacesIERC1155SafeTransferFromRequest = interfacesIERC1155SafeTransferFromRequest)

        return request<InterfacesIERC1155SafeTransferFromRequest, InterfacesIERC1155SafeTransferFrom200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURISafeTransferFrom
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SafeTransferFromRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURISafeTransferFromRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155SafeTransferFromRequest: InterfacesIERC1155SafeTransferFromRequest) : RequestConfig<InterfacesIERC1155SafeTransferFromRequest> {
        val localVariableBody = interfacesIERC1155SafeTransferFromRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/write/{address}/safeTransferFrom".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SetApprovalForAllRequest 
     * @return InterfacesIERC1155SetApprovalForAll200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURISetApprovalForAll(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155SetApprovalForAllRequest: InterfacesIERC1155SetApprovalForAllRequest) : InterfacesIERC1155SetApprovalForAll200Response {
        val localVarResponse = interfacesIERC1155MetadataURISetApprovalForAllWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155SetApprovalForAllRequest = interfacesIERC1155SetApprovalForAllRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155SetApprovalForAll200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.setApprovalForAll
     * Write &#x60;setApprovalForAll(operator,approved)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SetApprovalForAllRequest 
     * @return ApiResponse<InterfacesIERC1155SetApprovalForAll200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURISetApprovalForAllWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155SetApprovalForAllRequest: InterfacesIERC1155SetApprovalForAllRequest) : ApiResponse<InterfacesIERC1155SetApprovalForAll200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURISetApprovalForAllRequestConfig(networkId = networkId, address = address, interfacesIERC1155SetApprovalForAllRequest = interfacesIERC1155SetApprovalForAllRequest)

        return request<InterfacesIERC1155SetApprovalForAllRequest, InterfacesIERC1155SetApprovalForAll200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURISetApprovalForAll
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155SetApprovalForAllRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURISetApprovalForAllRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155SetApprovalForAllRequest: InterfacesIERC1155SetApprovalForAllRequest) : RequestConfig<InterfacesIERC1155SetApprovalForAllRequest> {
        val localVariableBody = interfacesIERC1155SetApprovalForAllRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/write/{address}/setApprovalForAll".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC165SupportsInterfaceRequest 
     * @return InterfacesIERC165SupportsInterface200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURISupportsInterface(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) : InterfacesIERC165SupportsInterface200Response {
        val localVarResponse = interfacesIERC1155MetadataURISupportsInterfaceWithHttpInfo(networkId = networkId, address = address, interfacesIERC165SupportsInterfaceRequest = interfacesIERC165SupportsInterfaceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC165SupportsInterface200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.supportsInterface
     * Read &#x60;supportsInterface(interfaceId)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC165SupportsInterfaceRequest 
     * @return ApiResponse<InterfacesIERC165SupportsInterface200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURISupportsInterfaceWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) : ApiResponse<InterfacesIERC165SupportsInterface200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURISupportsInterfaceRequestConfig(networkId = networkId, address = address, interfacesIERC165SupportsInterfaceRequest = interfacesIERC165SupportsInterfaceRequest)

        return request<InterfacesIERC165SupportsInterfaceRequest, InterfacesIERC165SupportsInterface200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURISupportsInterface
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC165SupportsInterfaceRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURISupportsInterfaceRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC165SupportsInterfaceRequest: InterfacesIERC165SupportsInterfaceRequest) : RequestConfig<InterfacesIERC165SupportsInterfaceRequest> {
        val localVariableBody = interfacesIERC165SupportsInterfaceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/read/{address}/supportsInterface".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1155MetadataURI.uri
     * Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155MetadataURIUriRequest 
     * @return InterfacesIERC1155MetadataURIUri200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1155MetadataURIUri(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1155MetadataURIUriRequest: InterfacesIERC1155MetadataURIUriRequest) : InterfacesIERC1155MetadataURIUri200Response {
        val localVarResponse = interfacesIERC1155MetadataURIUriWithHttpInfo(networkId = networkId, address = address, interfacesIERC1155MetadataURIUriRequest = interfacesIERC1155MetadataURIUriRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1155MetadataURIUri200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1155MetadataURI.uri
     * Read &#x60;uri(id)&#x60; on an instance of &#x60;IERC1155MetadataURI&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155MetadataURIUriRequest 
     * @return ApiResponse<InterfacesIERC1155MetadataURIUri200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1155MetadataURIUriWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155MetadataURIUriRequest: InterfacesIERC1155MetadataURIUriRequest) : ApiResponse<InterfacesIERC1155MetadataURIUri200Response?> {
        val localVariableConfig = interfacesIERC1155MetadataURIUriRequestConfig(networkId = networkId, address = address, interfacesIERC1155MetadataURIUriRequest = interfacesIERC1155MetadataURIUriRequest)

        return request<InterfacesIERC1155MetadataURIUriRequest, InterfacesIERC1155MetadataURIUri200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1155MetadataURIUri
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1155MetadataURIUriRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1155MetadataURIUriRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1155MetadataURIUriRequest: InterfacesIERC1155MetadataURIUriRequest) : RequestConfig<InterfacesIERC1155MetadataURIUriRequest> {
        val localVariableBody = interfacesIERC1155MetadataURIUriRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1155MetadataURI/read/{address}/uri".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
