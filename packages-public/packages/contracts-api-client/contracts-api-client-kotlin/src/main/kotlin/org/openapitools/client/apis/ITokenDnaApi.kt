/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeployBeaconProxyDefaultResponse
import org.openapitools.client.models.InterfacesIERC721GetApprovedRequest
import org.openapitools.client.models.InterfacesITokenDnaGetDna200Response
import org.openapitools.client.models.InterfacesITokenDnaGetDnaBatch200Response
import org.openapitools.client.models.InterfacesITokenDnaGetDnaBatchRequest
import org.openapitools.client.models.InterfacesITokenDnaSetDna200Response
import org.openapitools.client.models.InterfacesITokenDnaSetDnaBatch200Response
import org.openapitools.client.models.InterfacesITokenDnaSetDnaBatchRequest
import org.openapitools.client.models.InterfacesITokenDnaSetDnaRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ITokenDnaApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://17a0-195-175-28-162.ngrok-free.app/api")
        }
    }

    /**
     * ITokenDna.getDna
     * Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721GetApprovedRequest 
     * @return InterfacesITokenDnaGetDna200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesITokenDnaGetDna(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC721GetApprovedRequest: InterfacesIERC721GetApprovedRequest) : InterfacesITokenDnaGetDna200Response {
        val localVarResponse = interfacesITokenDnaGetDnaWithHttpInfo(networkId = networkId, address = address, interfacesIERC721GetApprovedRequest = interfacesIERC721GetApprovedRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesITokenDnaGetDna200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * ITokenDna.getDna
     * Read &#x60;getDna(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721GetApprovedRequest 
     * @return ApiResponse<InterfacesITokenDnaGetDna200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesITokenDnaGetDnaWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC721GetApprovedRequest: InterfacesIERC721GetApprovedRequest) : ApiResponse<InterfacesITokenDnaGetDna200Response?> {
        val localVariableConfig = interfacesITokenDnaGetDnaRequestConfig(networkId = networkId, address = address, interfacesIERC721GetApprovedRequest = interfacesIERC721GetApprovedRequest)

        return request<InterfacesIERC721GetApprovedRequest, InterfacesITokenDnaGetDna200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesITokenDnaGetDna
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721GetApprovedRequest 
     * @return RequestConfig
     */
    fun interfacesITokenDnaGetDnaRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC721GetApprovedRequest: InterfacesIERC721GetApprovedRequest) : RequestConfig<InterfacesIERC721GetApprovedRequest> {
        val localVariableBody = interfacesIERC721GetApprovedRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/ITokenDna/read/{address}/getDna".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * ITokenDna.getDnaBatch
     * Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaGetDnaBatchRequest 
     * @return InterfacesITokenDnaGetDnaBatch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesITokenDnaGetDnaBatch(networkId: kotlin.String = "80001", address: kotlin.String, interfacesITokenDnaGetDnaBatchRequest: InterfacesITokenDnaGetDnaBatchRequest) : InterfacesITokenDnaGetDnaBatch200Response {
        val localVarResponse = interfacesITokenDnaGetDnaBatchWithHttpInfo(networkId = networkId, address = address, interfacesITokenDnaGetDnaBatchRequest = interfacesITokenDnaGetDnaBatchRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesITokenDnaGetDnaBatch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * ITokenDna.getDnaBatch
     * Read &#x60;getDnaBatch(tokenId)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaGetDnaBatchRequest 
     * @return ApiResponse<InterfacesITokenDnaGetDnaBatch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesITokenDnaGetDnaBatchWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesITokenDnaGetDnaBatchRequest: InterfacesITokenDnaGetDnaBatchRequest) : ApiResponse<InterfacesITokenDnaGetDnaBatch200Response?> {
        val localVariableConfig = interfacesITokenDnaGetDnaBatchRequestConfig(networkId = networkId, address = address, interfacesITokenDnaGetDnaBatchRequest = interfacesITokenDnaGetDnaBatchRequest)

        return request<InterfacesITokenDnaGetDnaBatchRequest, InterfacesITokenDnaGetDnaBatch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesITokenDnaGetDnaBatch
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaGetDnaBatchRequest 
     * @return RequestConfig
     */
    fun interfacesITokenDnaGetDnaBatchRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesITokenDnaGetDnaBatchRequest: InterfacesITokenDnaGetDnaBatchRequest) : RequestConfig<InterfacesITokenDnaGetDnaBatchRequest> {
        val localVariableBody = interfacesITokenDnaGetDnaBatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/ITokenDna/read/{address}/getDnaBatch".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * ITokenDna.setDna
     * Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaSetDnaRequest 
     * @return InterfacesITokenDnaSetDna200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesITokenDnaSetDna(networkId: kotlin.String = "80001", address: kotlin.String, interfacesITokenDnaSetDnaRequest: InterfacesITokenDnaSetDnaRequest) : InterfacesITokenDnaSetDna200Response {
        val localVarResponse = interfacesITokenDnaSetDnaWithHttpInfo(networkId = networkId, address = address, interfacesITokenDnaSetDnaRequest = interfacesITokenDnaSetDnaRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesITokenDnaSetDna200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * ITokenDna.setDna
     * Write &#x60;setDna(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaSetDnaRequest 
     * @return ApiResponse<InterfacesITokenDnaSetDna200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesITokenDnaSetDnaWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesITokenDnaSetDnaRequest: InterfacesITokenDnaSetDnaRequest) : ApiResponse<InterfacesITokenDnaSetDna200Response?> {
        val localVariableConfig = interfacesITokenDnaSetDnaRequestConfig(networkId = networkId, address = address, interfacesITokenDnaSetDnaRequest = interfacesITokenDnaSetDnaRequest)

        return request<InterfacesITokenDnaSetDnaRequest, InterfacesITokenDnaSetDna200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesITokenDnaSetDna
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaSetDnaRequest 
     * @return RequestConfig
     */
    fun interfacesITokenDnaSetDnaRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesITokenDnaSetDnaRequest: InterfacesITokenDnaSetDnaRequest) : RequestConfig<InterfacesITokenDnaSetDnaRequest> {
        val localVariableBody = interfacesITokenDnaSetDnaRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/ITokenDna/write/{address}/setDna".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * ITokenDna.setDnaBatch
     * Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaSetDnaBatchRequest 
     * @return InterfacesITokenDnaSetDnaBatch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesITokenDnaSetDnaBatch(networkId: kotlin.String = "80001", address: kotlin.String, interfacesITokenDnaSetDnaBatchRequest: InterfacesITokenDnaSetDnaBatchRequest) : InterfacesITokenDnaSetDnaBatch200Response {
        val localVarResponse = interfacesITokenDnaSetDnaBatchWithHttpInfo(networkId = networkId, address = address, interfacesITokenDnaSetDnaBatchRequest = interfacesITokenDnaSetDnaBatchRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesITokenDnaSetDnaBatch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * ITokenDna.setDnaBatch
     * Write &#x60;setDnaBatch(tokenId,dna)&#x60; on an instance of &#x60;ITokenDna&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaSetDnaBatchRequest 
     * @return ApiResponse<InterfacesITokenDnaSetDnaBatch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesITokenDnaSetDnaBatchWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesITokenDnaSetDnaBatchRequest: InterfacesITokenDnaSetDnaBatchRequest) : ApiResponse<InterfacesITokenDnaSetDnaBatch200Response?> {
        val localVariableConfig = interfacesITokenDnaSetDnaBatchRequestConfig(networkId = networkId, address = address, interfacesITokenDnaSetDnaBatchRequest = interfacesITokenDnaSetDnaBatchRequest)

        return request<InterfacesITokenDnaSetDnaBatchRequest, InterfacesITokenDnaSetDnaBatch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesITokenDnaSetDnaBatch
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesITokenDnaSetDnaBatchRequest 
     * @return RequestConfig
     */
    fun interfacesITokenDnaSetDnaBatchRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesITokenDnaSetDnaBatchRequest: InterfacesITokenDnaSetDnaBatchRequest) : RequestConfig<InterfacesITokenDnaSetDnaBatchRequest> {
        val localVariableBody = interfacesITokenDnaSetDnaBatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/ITokenDna/write/{address}/setDnaBatch".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
