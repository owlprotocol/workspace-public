/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeployBeaconProxyDefaultResponse
import org.openapitools.client.models.InterfacesIERC721Approve200Response
import org.openapitools.client.models.InterfacesIERC721ApproveRequest
import org.openapitools.client.models.InterfacesIERC721MintableMintBatch200Response
import org.openapitools.client.models.InterfacesIERC721MintableMintBatchRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class IERC721MintableApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://17a0-195-175-28-162.ngrok-free.app/api")
        }
    }

    /**
     * IERC721Mintable.mint
     * Write &#x60;mint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721ApproveRequest 
     * @return InterfacesIERC721Approve200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC721MintableMint(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC721ApproveRequest: InterfacesIERC721ApproveRequest) : InterfacesIERC721Approve200Response {
        val localVarResponse = interfacesIERC721MintableMintWithHttpInfo(networkId = networkId, address = address, interfacesIERC721ApproveRequest = interfacesIERC721ApproveRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC721Approve200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC721Mintable.mint
     * Write &#x60;mint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721ApproveRequest 
     * @return ApiResponse<InterfacesIERC721Approve200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC721MintableMintWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC721ApproveRequest: InterfacesIERC721ApproveRequest) : ApiResponse<InterfacesIERC721Approve200Response?> {
        val localVariableConfig = interfacesIERC721MintableMintRequestConfig(networkId = networkId, address = address, interfacesIERC721ApproveRequest = interfacesIERC721ApproveRequest)

        return request<InterfacesIERC721ApproveRequest, InterfacesIERC721Approve200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC721MintableMint
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721ApproveRequest 
     * @return RequestConfig
     */
    fun interfacesIERC721MintableMintRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC721ApproveRequest: InterfacesIERC721ApproveRequest) : RequestConfig<InterfacesIERC721ApproveRequest> {
        val localVariableBody = interfacesIERC721ApproveRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC721Mintable/write/{address}/mint".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC721Mintable.mintBatch
     * Write &#x60;mintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721MintableMintBatchRequest 
     * @return InterfacesIERC721MintableMintBatch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC721MintableMintBatch(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC721MintableMintBatchRequest: InterfacesIERC721MintableMintBatchRequest) : InterfacesIERC721MintableMintBatch200Response {
        val localVarResponse = interfacesIERC721MintableMintBatchWithHttpInfo(networkId = networkId, address = address, interfacesIERC721MintableMintBatchRequest = interfacesIERC721MintableMintBatchRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC721MintableMintBatch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC721Mintable.mintBatch
     * Write &#x60;mintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721MintableMintBatchRequest 
     * @return ApiResponse<InterfacesIERC721MintableMintBatch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC721MintableMintBatchWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC721MintableMintBatchRequest: InterfacesIERC721MintableMintBatchRequest) : ApiResponse<InterfacesIERC721MintableMintBatch200Response?> {
        val localVariableConfig = interfacesIERC721MintableMintBatchRequestConfig(networkId = networkId, address = address, interfacesIERC721MintableMintBatchRequest = interfacesIERC721MintableMintBatchRequest)

        return request<InterfacesIERC721MintableMintBatchRequest, InterfacesIERC721MintableMintBatch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC721MintableMintBatch
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721MintableMintBatchRequest 
     * @return RequestConfig
     */
    fun interfacesIERC721MintableMintBatchRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC721MintableMintBatchRequest: InterfacesIERC721MintableMintBatchRequest) : RequestConfig<InterfacesIERC721MintableMintBatchRequest> {
        val localVariableBody = interfacesIERC721MintableMintBatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC721Mintable/write/{address}/mintBatch".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC721Mintable.safeMint
     * Write &#x60;safeMint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721ApproveRequest 
     * @return InterfacesIERC721Approve200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC721MintableSafeMint(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC721ApproveRequest: InterfacesIERC721ApproveRequest) : InterfacesIERC721Approve200Response {
        val localVarResponse = interfacesIERC721MintableSafeMintWithHttpInfo(networkId = networkId, address = address, interfacesIERC721ApproveRequest = interfacesIERC721ApproveRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC721Approve200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC721Mintable.safeMint
     * Write &#x60;safeMint(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721ApproveRequest 
     * @return ApiResponse<InterfacesIERC721Approve200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC721MintableSafeMintWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC721ApproveRequest: InterfacesIERC721ApproveRequest) : ApiResponse<InterfacesIERC721Approve200Response?> {
        val localVariableConfig = interfacesIERC721MintableSafeMintRequestConfig(networkId = networkId, address = address, interfacesIERC721ApproveRequest = interfacesIERC721ApproveRequest)

        return request<InterfacesIERC721ApproveRequest, InterfacesIERC721Approve200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC721MintableSafeMint
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721ApproveRequest 
     * @return RequestConfig
     */
    fun interfacesIERC721MintableSafeMintRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC721ApproveRequest: InterfacesIERC721ApproveRequest) : RequestConfig<InterfacesIERC721ApproveRequest> {
        val localVariableBody = interfacesIERC721ApproveRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC721Mintable/write/{address}/safeMint".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC721Mintable.safeMintBatch
     * Write &#x60;safeMintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721MintableMintBatchRequest 
     * @return InterfacesIERC721MintableMintBatch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC721MintableSafeMintBatch(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC721MintableMintBatchRequest: InterfacesIERC721MintableMintBatchRequest) : InterfacesIERC721MintableMintBatch200Response {
        val localVarResponse = interfacesIERC721MintableSafeMintBatchWithHttpInfo(networkId = networkId, address = address, interfacesIERC721MintableMintBatchRequest = interfacesIERC721MintableMintBatchRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC721MintableMintBatch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC721Mintable.safeMintBatch
     * Write &#x60;safeMintBatch(to,tokenId)&#x60; on an instance of &#x60;IERC721Mintable&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721MintableMintBatchRequest 
     * @return ApiResponse<InterfacesIERC721MintableMintBatch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC721MintableSafeMintBatchWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC721MintableMintBatchRequest: InterfacesIERC721MintableMintBatchRequest) : ApiResponse<InterfacesIERC721MintableMintBatch200Response?> {
        val localVariableConfig = interfacesIERC721MintableSafeMintBatchRequestConfig(networkId = networkId, address = address, interfacesIERC721MintableMintBatchRequest = interfacesIERC721MintableMintBatchRequest)

        return request<InterfacesIERC721MintableMintBatchRequest, InterfacesIERC721MintableMintBatch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC721MintableSafeMintBatch
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC721MintableMintBatchRequest 
     * @return RequestConfig
     */
    fun interfacesIERC721MintableSafeMintBatchRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC721MintableMintBatchRequest: InterfacesIERC721MintableMintBatchRequest) : RequestConfig<InterfacesIERC721MintableMintBatchRequest> {
        val localVariableBody = interfacesIERC721MintableMintBatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC721Mintable/write/{address}/safeMintBatch".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
