/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import java.io.Serializable

/**
 * 
 *
 * @param deploymentMethod 
 * @param msgSender An ethereum address
 * @param salt Salt parameter string to deploy different contracts with identical parameteres (default: 1)
 * @param beaconAddress The address of the beacon, if used in the deployment method
 * @param beaonAdmin The admin address of the beacon, if a new beacon is deployed
 */


data class DeployBeaconProxyRequestDeployParams (

    @Json(name = "deploymentMethod")
    val deploymentMethod: DeployBeaconProxyRequestDeployParams.DeploymentMethod,

    /* An ethereum address */
    @Json(name = "msgSender")
    val msgSender: kotlin.String? = null,

    /* Salt parameter string to deploy different contracts with identical parameteres (default: 1) */
    @Json(name = "salt")
    val salt: kotlin.String? = "0x1",

    /* The address of the beacon, if used in the deployment method */
    @Json(name = "beaconAddress")
    val beaconAddress: kotlin.String? = null,

    /* The admin address of the beacon, if a new beacon is deployed */
    @Json(name = "beaonAdmin")
    val beaonAdmin: kotlin.String? = null

) : Serializable {
    companion object {
        private const val serialVersionUID: Long = 123
    }

    /**
     * 
     *
     * Values: dETERMINISTIC,eRC1167,bEACONOWL,bEACONEXISTING,bEACONNEW
     */
    @JsonClass(generateAdapter = false)
    enum class DeploymentMethod(val value: kotlin.String) {
        @Json(name = "DETERMINISTIC") dETERMINISTIC("DETERMINISTIC"),
        @Json(name = "ERC1167") eRC1167("ERC1167"),
        @Json(name = "BEACON_OWL") bEACONOWL("BEACON_OWL"),
        @Json(name = "BEACON_EXISTING") bEACONEXISTING("BEACON_EXISTING"),
        @Json(name = "BEACON_NEW") bEACONNEW("BEACON_NEW");
    }
}

