/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeployBeaconProxyDefaultResponse
import org.openapitools.client.models.InterfacesIERC1820GetInterfaceImplementer200Response
import org.openapitools.client.models.InterfacesIERC1820GetInterfaceImplementerRequest
import org.openapitools.client.models.InterfacesIERC1820GetManager200Response
import org.openapitools.client.models.InterfacesIERC1820GetManagerRequest
import org.openapitools.client.models.InterfacesIERC1820ImplementsERC165Interface200Response
import org.openapitools.client.models.InterfacesIERC1820ImplementsERC165InterfaceRequest
import org.openapitools.client.models.InterfacesIERC1820InterfaceHash200Response
import org.openapitools.client.models.InterfacesIERC1820InterfaceHashRequest
import org.openapitools.client.models.InterfacesIERC1820SetInterfaceImplementer200Response
import org.openapitools.client.models.InterfacesIERC1820SetInterfaceImplementerRequest
import org.openapitools.client.models.InterfacesIERC1820SetManager200Response
import org.openapitools.client.models.InterfacesIERC1820SetManagerRequest
import org.openapitools.client.models.InterfacesIERC1820UpdateERC165Cache200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class IERC1820Api(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://17a0-195-175-28-162.ngrok-free.app/api")
        }
    }

    /**
     * IERC1820.getInterfaceImplementer
     * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820GetInterfaceImplementerRequest 
     * @return InterfacesIERC1820GetInterfaceImplementer200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820GetInterfaceImplementer(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820GetInterfaceImplementerRequest: InterfacesIERC1820GetInterfaceImplementerRequest) : InterfacesIERC1820GetInterfaceImplementer200Response {
        val localVarResponse = interfacesIERC1820GetInterfaceImplementerWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820GetInterfaceImplementerRequest = interfacesIERC1820GetInterfaceImplementerRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820GetInterfaceImplementer200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.getInterfaceImplementer
     * Read &#x60;getInterfaceImplementer(account,_interfaceHash)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820GetInterfaceImplementerRequest 
     * @return ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820GetInterfaceImplementerWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820GetInterfaceImplementerRequest: InterfacesIERC1820GetInterfaceImplementerRequest) : ApiResponse<InterfacesIERC1820GetInterfaceImplementer200Response?> {
        val localVariableConfig = interfacesIERC1820GetInterfaceImplementerRequestConfig(networkId = networkId, address = address, interfacesIERC1820GetInterfaceImplementerRequest = interfacesIERC1820GetInterfaceImplementerRequest)

        return request<InterfacesIERC1820GetInterfaceImplementerRequest, InterfacesIERC1820GetInterfaceImplementer200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820GetInterfaceImplementer
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820GetInterfaceImplementerRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820GetInterfaceImplementerRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820GetInterfaceImplementerRequest: InterfacesIERC1820GetInterfaceImplementerRequest) : RequestConfig<InterfacesIERC1820GetInterfaceImplementerRequest> {
        val localVariableBody = interfacesIERC1820GetInterfaceImplementerRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/read/{address}/getInterfaceImplementer".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.getManager
     * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820GetManagerRequest 
     * @return InterfacesIERC1820GetManager200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820GetManager(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820GetManagerRequest: InterfacesIERC1820GetManagerRequest) : InterfacesIERC1820GetManager200Response {
        val localVarResponse = interfacesIERC1820GetManagerWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820GetManagerRequest = interfacesIERC1820GetManagerRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820GetManager200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.getManager
     * Read &#x60;getManager(account)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820GetManagerRequest 
     * @return ApiResponse<InterfacesIERC1820GetManager200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820GetManagerWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820GetManagerRequest: InterfacesIERC1820GetManagerRequest) : ApiResponse<InterfacesIERC1820GetManager200Response?> {
        val localVariableConfig = interfacesIERC1820GetManagerRequestConfig(networkId = networkId, address = address, interfacesIERC1820GetManagerRequest = interfacesIERC1820GetManagerRequest)

        return request<InterfacesIERC1820GetManagerRequest, InterfacesIERC1820GetManager200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820GetManager
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820GetManagerRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820GetManagerRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820GetManagerRequest: InterfacesIERC1820GetManagerRequest) : RequestConfig<InterfacesIERC1820GetManagerRequest> {
        val localVariableBody = interfacesIERC1820GetManagerRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/read/{address}/getManager".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.implementsERC165Interface
     * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return InterfacesIERC1820ImplementsERC165Interface200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820ImplementsERC165Interface(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : InterfacesIERC1820ImplementsERC165Interface200Response {
        val localVarResponse = interfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820ImplementsERC165InterfaceRequest = interfacesIERC1820ImplementsERC165InterfaceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820ImplementsERC165Interface200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.implementsERC165Interface
     * Read &#x60;implementsERC165Interface(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820ImplementsERC165InterfaceWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response?> {
        val localVariableConfig = interfacesIERC1820ImplementsERC165InterfaceRequestConfig(networkId = networkId, address = address, interfacesIERC1820ImplementsERC165InterfaceRequest = interfacesIERC1820ImplementsERC165InterfaceRequest)

        return request<InterfacesIERC1820ImplementsERC165InterfaceRequest, InterfacesIERC1820ImplementsERC165Interface200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820ImplementsERC165Interface
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820ImplementsERC165InterfaceRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : RequestConfig<InterfacesIERC1820ImplementsERC165InterfaceRequest> {
        val localVariableBody = interfacesIERC1820ImplementsERC165InterfaceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165Interface".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.implementsERC165InterfaceNoCache
     * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return InterfacesIERC1820ImplementsERC165Interface200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820ImplementsERC165InterfaceNoCache(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : InterfacesIERC1820ImplementsERC165Interface200Response {
        val localVarResponse = interfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820ImplementsERC165InterfaceRequest = interfacesIERC1820ImplementsERC165InterfaceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820ImplementsERC165Interface200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.implementsERC165InterfaceNoCache
     * Read &#x60;implementsERC165InterfaceNoCache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820ImplementsERC165InterfaceNoCacheWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : ApiResponse<InterfacesIERC1820ImplementsERC165Interface200Response?> {
        val localVariableConfig = interfacesIERC1820ImplementsERC165InterfaceNoCacheRequestConfig(networkId = networkId, address = address, interfacesIERC1820ImplementsERC165InterfaceRequest = interfacesIERC1820ImplementsERC165InterfaceRequest)

        return request<InterfacesIERC1820ImplementsERC165InterfaceRequest, InterfacesIERC1820ImplementsERC165Interface200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820ImplementsERC165InterfaceNoCache
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820ImplementsERC165InterfaceNoCacheRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : RequestConfig<InterfacesIERC1820ImplementsERC165InterfaceRequest> {
        val localVariableBody = interfacesIERC1820ImplementsERC165InterfaceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/read/{address}/implementsERC165InterfaceNoCache".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.interfaceHash
     * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820InterfaceHashRequest 
     * @return InterfacesIERC1820InterfaceHash200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820InterfaceHash(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820InterfaceHashRequest: InterfacesIERC1820InterfaceHashRequest) : InterfacesIERC1820InterfaceHash200Response {
        val localVarResponse = interfacesIERC1820InterfaceHashWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820InterfaceHashRequest = interfacesIERC1820InterfaceHashRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820InterfaceHash200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.interfaceHash
     * Read &#x60;interfaceHash(interfaceName)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820InterfaceHashRequest 
     * @return ApiResponse<InterfacesIERC1820InterfaceHash200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820InterfaceHashWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820InterfaceHashRequest: InterfacesIERC1820InterfaceHashRequest) : ApiResponse<InterfacesIERC1820InterfaceHash200Response?> {
        val localVariableConfig = interfacesIERC1820InterfaceHashRequestConfig(networkId = networkId, address = address, interfacesIERC1820InterfaceHashRequest = interfacesIERC1820InterfaceHashRequest)

        return request<InterfacesIERC1820InterfaceHashRequest, InterfacesIERC1820InterfaceHash200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820InterfaceHash
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820InterfaceHashRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820InterfaceHashRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820InterfaceHashRequest: InterfacesIERC1820InterfaceHashRequest) : RequestConfig<InterfacesIERC1820InterfaceHashRequest> {
        val localVariableBody = interfacesIERC1820InterfaceHashRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/read/{address}/interfaceHash".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.setInterfaceImplementer
     * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820SetInterfaceImplementerRequest 
     * @return InterfacesIERC1820SetInterfaceImplementer200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820SetInterfaceImplementer(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820SetInterfaceImplementerRequest: InterfacesIERC1820SetInterfaceImplementerRequest) : InterfacesIERC1820SetInterfaceImplementer200Response {
        val localVarResponse = interfacesIERC1820SetInterfaceImplementerWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820SetInterfaceImplementerRequest = interfacesIERC1820SetInterfaceImplementerRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820SetInterfaceImplementer200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.setInterfaceImplementer
     * Write &#x60;setInterfaceImplementer(account,_interfaceHash,implementer)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820SetInterfaceImplementerRequest 
     * @return ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820SetInterfaceImplementerWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820SetInterfaceImplementerRequest: InterfacesIERC1820SetInterfaceImplementerRequest) : ApiResponse<InterfacesIERC1820SetInterfaceImplementer200Response?> {
        val localVariableConfig = interfacesIERC1820SetInterfaceImplementerRequestConfig(networkId = networkId, address = address, interfacesIERC1820SetInterfaceImplementerRequest = interfacesIERC1820SetInterfaceImplementerRequest)

        return request<InterfacesIERC1820SetInterfaceImplementerRequest, InterfacesIERC1820SetInterfaceImplementer200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820SetInterfaceImplementer
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820SetInterfaceImplementerRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820SetInterfaceImplementerRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820SetInterfaceImplementerRequest: InterfacesIERC1820SetInterfaceImplementerRequest) : RequestConfig<InterfacesIERC1820SetInterfaceImplementerRequest> {
        val localVariableBody = interfacesIERC1820SetInterfaceImplementerRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/write/{address}/setInterfaceImplementer".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.setManager
     * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820SetManagerRequest 
     * @return InterfacesIERC1820SetManager200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820SetManager(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820SetManagerRequest: InterfacesIERC1820SetManagerRequest) : InterfacesIERC1820SetManager200Response {
        val localVarResponse = interfacesIERC1820SetManagerWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820SetManagerRequest = interfacesIERC1820SetManagerRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820SetManager200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.setManager
     * Write &#x60;setManager(account,newManager)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820SetManagerRequest 
     * @return ApiResponse<InterfacesIERC1820SetManager200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820SetManagerWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820SetManagerRequest: InterfacesIERC1820SetManagerRequest) : ApiResponse<InterfacesIERC1820SetManager200Response?> {
        val localVariableConfig = interfacesIERC1820SetManagerRequestConfig(networkId = networkId, address = address, interfacesIERC1820SetManagerRequest = interfacesIERC1820SetManagerRequest)

        return request<InterfacesIERC1820SetManagerRequest, InterfacesIERC1820SetManager200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820SetManager
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820SetManagerRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820SetManagerRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820SetManagerRequest: InterfacesIERC1820SetManagerRequest) : RequestConfig<InterfacesIERC1820SetManagerRequest> {
        val localVariableBody = interfacesIERC1820SetManagerRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/write/{address}/setManager".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * IERC1820.updateERC165Cache
     * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return InterfacesIERC1820UpdateERC165Cache200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun interfacesIERC1820UpdateERC165Cache(networkId: kotlin.String = "80001", address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : InterfacesIERC1820UpdateERC165Cache200Response {
        val localVarResponse = interfacesIERC1820UpdateERC165CacheWithHttpInfo(networkId = networkId, address = address, interfacesIERC1820ImplementsERC165InterfaceRequest = interfacesIERC1820ImplementsERC165InterfaceRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InterfacesIERC1820UpdateERC165Cache200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * IERC1820.updateERC165Cache
     * Write &#x60;updateERC165Cache(account,interfaceId)&#x60; on an instance of &#x60;IERC1820&#x60;
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun interfacesIERC1820UpdateERC165CacheWithHttpInfo(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : ApiResponse<InterfacesIERC1820UpdateERC165Cache200Response?> {
        val localVariableConfig = interfacesIERC1820UpdateERC165CacheRequestConfig(networkId = networkId, address = address, interfacesIERC1820ImplementsERC165InterfaceRequest = interfacesIERC1820ImplementsERC165InterfaceRequest)

        return request<InterfacesIERC1820ImplementsERC165InterfaceRequest, InterfacesIERC1820UpdateERC165Cache200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation interfacesIERC1820UpdateERC165Cache
     *
     * @param networkId The network id (default to "80001")
     * @param address An ethereum address
     * @param interfacesIERC1820ImplementsERC165InterfaceRequest 
     * @return RequestConfig
     */
    fun interfacesIERC1820UpdateERC165CacheRequestConfig(networkId: kotlin.String, address: kotlin.String, interfacesIERC1820ImplementsERC165InterfaceRequest: InterfacesIERC1820ImplementsERC165InterfaceRequest) : RequestConfig<InterfacesIERC1820ImplementsERC165InterfaceRequest> {
        val localVariableBody = interfacesIERC1820ImplementsERC165InterfaceRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/{networkId}/interface/IERC1820/write/{address}/updateERC165Cache".replace("{"+"networkId"+"}", encodeURIComponent(networkId.toString())).replace("{"+"address"+"}", encodeURIComponent(address.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
