import { walkDir } from "@owlprotocol/utils";
import { existsSync, mkdirSync, readFileSync } from "fs";
import { basename, join } from "path";

export const DEFAULT_EXCLUDE_CONTRACTS = ["Create2Factory"];
//Contracts  to omit by default
export async function generateCreate2FactoryWrappers(
    inputPath = "src/typechain/ethers/factories",
    outputPath = "src/factories",
    beaconFactoryUtilsPath = "@owlprotocol/contracts-proxy",
    excludeContracts: string[] = DEFAULT_EXCLUDE_CONTRACTS,
    includeContracts?: string[],
) {
    if (!existsSync(outputPath)) {
        mkdirSync(outputPath);
    }
    const outputFiles: Record<string, string> = {};
    for await (const file of walkDir(inputPath)) {
        const fileContents = readFileSync(file, "utf-8");
        if (!file.endsWith("__factory.ts")) {
            //console.debug(`Skipping non *__factory.ts file: ${file}`);
            continue;
        }

        const contractName = basename(file).replace("__factory.ts", "");
        if (excludeContracts.includes(contractName)) {
            console.debug(`Skipping contract ${contractName} as excluded explictly.`);
            continue;
        } else if (includeContracts && !includeContracts?.includes(contractName)) {
            console.debug(`Skipping contract ${contractName} as not included explictly.`);
            continue;
        } else if (!fileContents.includes("extends ContractFactory")) {
            //console.debug(`Skipping non-deployable contract ${contractName}`);
            continue;
        } else if (!fileContents.includes(`name: "initialize"`)) {
            //TODO: Add support for constructor
            //Non-Initializable contract
            const contractFactoryPath = file.replace("src/", "../").replace(".ts", ".js");
            const fileOutput = generateCreate2FactoryImplementationWrapperFile(
                contractName,
                contractFactoryPath,
                beaconFactoryUtilsPath,
            );
            outputFiles[join(outputPath, `${contractName}.ts`)] = fileOutput;
            continue;
        }

        const zodExists = existsSync(`src/zsol/${contractName}.ts`);
        if (!zodExists) {
            console.debug(
                `Skipping non-zod validated contract ${contractName}. Create zod validator for contract to enable beacon deployment.`,
            );
            continue;
        } else {
            //Initializable contract with zod
            const contractFactoryPath = file.replace("src/", "../").replace(".ts", ".js");
            const fileOutput = generateCreate2FactoryWrapperFile(
                contractName,
                contractFactoryPath,
                beaconFactoryUtilsPath,
            );
            outputFiles[join(outputPath, `${contractName}.ts`)] = fileOutput;
            continue;
        }
    }

    return outputFiles;
}

export function generateCreate2FactoryImplementationWrapperFile(
    contractName: string,
    contractFactoryPath: string,
    beaconFactoryUtilsPath: string,
) {
    const fileContents = `/* Autogenerated file. Do not edit manually. */
import * as Create2Factory from "${beaconFactoryUtilsPath}";
import { ${contractName}__factory as Contract__factory } from "${contractFactoryPath}";

const Contract__factory__create2 = Create2Factory.getCreate2FactoryImplementationWrapper<
    ReturnType<Contract__factory["attach"]>
>(Contract__factory);

export const ${contractName}__factory__create2 = Contract__factory__create2;
`;
    return fileContents;
}

export function generateCreate2FactoryWrapperFile(
    contractName: string,
    contractFactoryPath: string,
    beaconFactoryUtilsPath: string,
) {
    const fileContents = `/* Autogenerated file. Do not edit manually. */
import * as Create2Factory from "${beaconFactoryUtilsPath}";
import { ${contractName}__factory as Contract__factory } from "${contractFactoryPath}";
import { ${contractName} as ContractZod } from "../zsol/${contractName}.js";

const initializeZod = ContractZod.initialize.inputsDefinedArrayify;

const Contract__factory__create2 = Create2Factory.getCreate2FactoryInitializableWrapper<
    (typeof initializeZod)["_output"],
    ReturnType<Contract__factory["attach"]>
>(Contract__factory);

export const ${contractName}__factory__create2 = Contract__factory__create2;
`;
    return fileContents;
}
