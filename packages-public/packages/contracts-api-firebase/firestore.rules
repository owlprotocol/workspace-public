rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {
        function isSignedIn() {
            return debug(request.auth != null);
        }

        //Check owner of new doc (request.resource.data.owner)
        function isOwnerWrite() {
            return debug(request.auth.uid == request.resource.data.owner);
        }

        //Check owner of existing doc (resource.data.owner)
        function isOwnerRead() {
            return debug(request.auth.uid == resource.data.owner)
        }

        function signedInAndIsOwner() {
            return debug(request.auth != null) && debug(request.auth.uid == resource.data.owner);
        }

        //contractmodels
        match /erc20/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /erc20Balance/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /erc20Allowance/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /erc721/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /erc1155/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /erc1155Balance/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /operator/{id} {
            allow read: if true;
            allow write: if false;
        }
        //ethmodels
        match /ethLogs/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /ethLogAbis/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /ethTransactions/{id} {
            allow read: if true;
            allow write: if false;
        }
        //shopify
        match /stores/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        match /storePrivates/{id} {
            allow read, write: if false;
        }
        match /couponCampaigns/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        match /couponDefinitions/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        match /couponInstances/{id} {
            //TODO: Remove need for "empty" id check
            allow read: if id == "empty" || signedInAndIsOwner();
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        //tokens
        match /metadataTokens/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        //TODO: Fix permissions to owner check
        match /tokenLazyMintsReadOnly/{id} {
            allow read: if true;
            allow write: if false;
        }
        //users
        match /users/{id} {
            allow read: if id == "empty" || isSignedIn();
            allow read, write: if isSignedIn();
        }
        match /apiKeysPersonal/{id} {
            allow read: if isSignedIn() && isOwnerRead();
            allow create: if isSignedIn() && isOwnerWrite();
            allow update: if isSignedIn() && isOwnerRead() && isOwnerWrite();
        }
        match /inviteCodesReadOnly/{id} {
            allow read: if signedInAndIsOwner();
            allow write: if false;
        }
        match /organizationsReadOnly/{id} {
            allow read: if signedInAndIsOwner();
            allow write: if false;
        }
        // TODO: Fix permisssions to check owner
        match /dfnsWalletsReadOnly/{id} {
            //allow read: if signedInAndIsOwner();
            allow read: if true;
            allow write: if false;
        }
        // TODO: Fix permisssions to check owner
        match /safeWalletsReadOnly/{id} {
            //allow read: if signedInAndIsOwner();
            allow read: if true;
            allow write: if false;
        }
        //networks
        match /networksReadOnly/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /networksPrivate/{id} {
            allow read, write: if false;
        }
        //gasexpense
        match /gasExpensesMonthlyPublic/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /gasExpensesDailyPublic/{id} {
            allow read: if true;
            allow write: if false;
        }
        // TODO: Fix permisssions to check owner
        match /gasExpensesMonthlyReadOnly/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /gasExpensesDailyReadOnly/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /gasBudgetRulesGlobalReadOnly/{id} {
            allow read: if true;
            allow write: if false;
        }
        match /gasBudgetRulesByContractReadOnly/{id} {
            allow read: if true;
            allow write: if false;
        }
        //other
        match /contracts/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();

        }
        match /metadataContracts/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        match /projects/{id} {
            allow read: if true;
            //allow write: if id != "empty" && signedInAndIsOwner();
            allow write: if id != "empty";
        }
        match /projectPersonals/{id} {
            allow read: if id == "empty" || signedInAndIsOwner();
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        match /blogs/{id} {
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
        match /invites/{id} {
            allow read: if true;
            allow write: if id != "empty";
        }
        match /collections/{id} {
            allow read: if true;
            //allow write: if id != "empty" && signedInAndIsOwner();
            allow write: if id != "empty";
        }
        match /lazyMints/{id} {
            allow read: if true;
            allow write: if id != "empty";
        }
        match /lazyMintInstances/{id} {
            // TODO: make this work, issue with owner attribute
            // allow read: if id != "empty" &&  signedInAndIsOwner() || (request.auth != null && request.auth.uid == resource.data.receiver)
            allow read: if true;
            allow write: if id != "empty" && signedInAndIsOwner();
        }
    }
}
