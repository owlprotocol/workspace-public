/***** Generics for Firebase Web CRUD *****/
import { BigNumber, BigNumberish } from "@ethersproject/bignumber";
import {
    CollectionReference,
    DocumentData,
    DocumentReference,
    Firestore,
    Query,
    QueryConstraint,
    collection,
    deleteDoc,
    doc,
    getCountFromServer,
    getDoc,
    getDocs,
    limit,
    orderBy,
    query,
    runTransaction,
    setDoc,
    updateDoc,
    where,
} from "firebase/firestore";
import { zip } from "lodash-es";
import { getFirestorePathValue } from "../utils/getFirestorePathValue.js";
import { getFirestoreUpdateData } from "../utils/getFirestoreUpdateData.js";
import {
    CrudValidators,
    CrudWebWrapper,
    QueryOptions,
    getIdParamsDefault,
    joinSorted,
    omitIdDefault,
} from "../crud.js";

export function generateUUID({ id }: { id?: string }) {
    return {
        id: id ?? crypto.randomUUID(),
    };
}

/**
 * Firebase CRUD Wrappers. create, get, getAll, update, delete, deleteAll and more
 * @template ItemData Generic type for collection data (data stored in documents)
 * @template ItemIdPartial Generic type for collection id (used to compute document path). Fields can be optional but validateId function must specify auto-generation
 * @param firestore Firestore instance
 * @param collectionPath Collection path (eg. `/users`)
 * @param validators Validators for id and data.
 *      By default, id validation is configured for `{ id?: string }` structure where ids are autogenerated with crypto.randomUUID().
 *      By default, data validation omits `id` field.
 * @returns wrapper functions for access Firebase
 */
export function getFirebaseCRUD<
    ItemData extends Record<string, any>,
    ItemIdPartial extends Record<string, any> = { readonly id?: string },
>(firestore: Firestore, collectionPath: string, validators?: CrudValidators<ItemData, ItemIdPartial>) {
    type ItemId = Required<ItemIdPartial>;
    type Item = ItemId & ItemData;

    const {
        getId = joinSorted<ItemId>,
        getIdParams = getIdParamsDefault as unknown as (id: string) => ItemId,
        validateData = omitIdDefault,
        validateId = generateUUID as unknown as (idParams: ItemIdPartial) => ItemId,
    } = validators ?? {};

    const col = collection(firestore, collectionPath) as CollectionReference<ItemData>;

    const getDocRef = (id: ItemId | string): DocumentReference<ItemData, DocumentData> => {
        if (typeof id === "string") return doc(col, id);

        return doc(col, getId(validateId(id)));
    };

    /**
     * Get doc by id
     * @param id
     * @returns doc by id
     */
    const get = async (id: ItemId | string): Promise<Item> => {
        const ref = getDocRef(id);
        const refSnapshot = await getDoc(ref);

        if (!refSnapshot.exists()) {
            throw new Error(`${col.path}/${id} not found`);
        }

        return { ...refSnapshot.data(), ...getIdParams(ref.id) } as Item;
    };

    /**
     * Get docs by id
     * @param ids
     * @returns docs by id
     * //TODO: Is this the fastest way? https://stackoverflow.com/questions/59572943/is-there-a-way-to-batch-read-firebase-documents
     */
    const getBatch = async (ids: ItemId[] | string[]): Promise<(Item | undefined)[]> => {
        const refSnapshots = await runTransaction(firestore, async (transaction) => {
            const operations = ids.map((id) => {
                const ref = getDocRef(id);
                return transaction.get(ref);
            });

            return await Promise.all(operations);
        });

        return refSnapshots.map((refSnapshot) => {
            return { ...refSnapshot.data(), ...getIdParams(refSnapshot.id) } as Item;
        });
    };

    /**
     * Get all docs
     * @returns docs
     */
    const getAll = async (): Promise<Item[]> => {
        const snapshot = await getDocs(col);
        return snapshot.docs.map((refSnapshot) => {
            return { ...refSnapshot.data(), ...getIdParams(refSnapshot.id) } as Item;
        });
    };

    /**
     * Returns filter query that can be used to get items, count the query or compose with additional queries.
     * @param filter, will try to match the key-value pairs of this object as `where(key, "==", value)` queries.
     *      For nested keys, this gets reformated as `where(key.subkey, "==", value)` similar as to the update function
     * @param options limit, orderBy, order
     * @returns firebase query object
     */
    const getWhereQuery = (filter: Partial<ItemData>, options?: QueryOptions): Query<ItemData, DocumentData> => {
        const filterNested = getFirestoreUpdateData(validateData(filter));

        const queryFilterConstraints: QueryConstraint[] = Object.entries(filterNested).map(([key, value]) => {
            return where(key, "==", value);
        });
        if (options?.orderBy) {
            queryFilterConstraints.push(orderBy(options.orderBy, options.order ?? "asc"));
        }
        if (options?.limit) {
            queryFilterConstraints.push(limit(options.limit));
        }

        return query(col, ...queryFilterConstraints);
    };

    /**
     * Get docs that match filter
     * @param filter, will try to match the key-value pairs of this object as `where(key, "==", value)` queries.
     *      For nested keys, this gets reformated as `where(key.subkey, "==", value)` similar as to the update function
     * @param options limit, orderBy, order
     * @returns docs
     */
    const getWhere = async (filter: Partial<ItemData>, options?: QueryOptions): Promise<Item[]> => {
        const querySnapshot = await getDocs(getWhereQuery(filter, options));
        return querySnapshot.docs.map((refSnapshot) => {
            return { ...refSnapshot.data(), ...getIdParams(refSnapshot.id) } as Item;
        });
    };

    /**
     * Get docs that match filter count
     * @param filter
     * @param options limit, orderBy, order
     * @returns docs
     */
    const getWhereCount = async (filter: Partial<ItemData>, options?: QueryOptions): Promise<number> => {
        const querySnapshot = await getCountFromServer(getWhereQuery(filter, options));
        return querySnapshot.data().count;
    };

    /**
     * Get first doc that matches filter
     * @param filter
     * @param options orderBy, order
     * @returns doc or undefined
     */
    const getWhereFirst = async (
        filter: Partial<ItemData>,
        options?: Omit<QueryOptions, "limit">,
    ): Promise<Item | undefined> => {
        const results = await getWhere(filter, { ...options, limit: 1 });
        return results[0];
    };

    /**
     * Set doc
     * @param item (id optional)
     * @returns id (parameter or default autogenerated with crypto.randomUUID())
     */
    const set = async (item: ItemIdPartial & ItemData): Promise<string> => {
        const id = validateId(item);
        const ref = getDocRef(id);
        await setDoc(ref, validateData(item) as ItemData);
        return getId(id);
    };

    /**
     * Set docs as a transaction (max 500 writes)
     * @param items (all with ids or none with ids)
     */
    const setBatch = async (items: (ItemIdPartial & ItemData)[]): Promise<string[]> => {
        const ids = items.map(validateId);

        await runTransaction(firestore, async (transaction) => {
            const operations = zip(ids, items).map(([id, item]) => {
                const ref = getDocRef(id!);
                return transaction.set(ref, validateData(item!) as ItemData);
            });

            await Promise.all(operations);
        });

        return ids.map(getId);
    };

    /**
     * Get doc or create new one
     * @param id
     * @param initialValue
     * @returns doc or initialValue
     */
    const getOrCreate = async (id: ItemId | string, initialValue: ItemData): Promise<Item> => {
        const ref = getDocRef(id);
        const initialValueValidated = validateData(initialValue) as ItemData;

        const dataExisting = await runTransaction(firestore, async (transaction) => {
            const refSnapshot = await transaction.get(ref);
            if (!refSnapshot.exists()) {
                await transaction.set(ref, initialValueValidated);
                return undefined;
            } else {
                return refSnapshot.data();
            }
        });

        const data = dataExisting
            ? { ...dataExisting, ...getIdParams(ref.id) }
            : { ...initialValueValidated, ...getIdParams(ref.id) };
        return data as Item;
    };

    /**
     * Get first doc that matches filter or create new one
     * WARNING: NOT executed as transaction (only get supported in transaction)
     * @param filter
     * @param initialValue
     * @param options orderBy, order
     * @returns doc or initialValue
     */
    const getWhereFirstOrCreate = async (
        filter: Partial<ItemData>,
        initialValue: ItemIdPartial & ItemData,
        options?: Omit<QueryOptions, "limit">,
    ): Promise<Item> => {
        const existing = await getWhereFirst(filter, options);
        if (!existing) {
            const id = await set(initialValue);
            return { ...validateData(initialValue), ...getIdParams(id) } as Item;
        }
        return existing;
    };

    /**
     * Update existing doc
     * @param item
     * @returns
     */
    const update = async (item: ItemId & Partial<ItemData>): Promise<void> => {
        const ref = getDocRef(item);
        await updateDoc(ref, getFirestoreUpdateData(validateData(item)));
    };

    /**
     * Update existing docs as a transaction (max 500 writes)
     * @param items
     * @returns
     */
    const updateBatch = async (items: (ItemId & Partial<ItemData>)[]): Promise<void> => {
        await runTransaction(firestore, async (transaction) => {
            const operations = items.map((item) => {
                const ref = getDocRef(item);
                return transaction.update(ref, getFirestoreUpdateData(validateData(item)));
            });

            await Promise.all(operations);
        });
    };

    /**
     * Delete doc
     * @param id
     * @returns
     */
    const deleteById = async (id: ItemId | string): Promise<void> => {
        const ref = getDocRef(id);
        return deleteDoc(ref);
    };

    /**
     * Delete docs as transaction (max 500 writes)
     */
    const deleteBatch = async (ids: ItemId[] | string[]): Promise<void> => {
        await runTransaction(firestore, async (transaction) => {
            const operations = ids.map((id) => {
                const ref = getDocRef(id);
                return transaction.delete(ref);
            });

            await Promise.all(operations);
        });
    };

    /**
     * Delete all docs
     */
    const deleteAll = async (): Promise<void> => {
        await runTransaction(firestore, async (transaction) => {
            const snapshot = await getDocs(col);
            const operations = snapshot.docs.map((d) => {
                const ref = doc(col, d.id);
                return transaction.delete(ref);
            });

            await Promise.all(operations);
        });
    };

    /**
     * Increment value
     * @param id
     * @param path key or nested key
     * @param value
     */
    const increment = async (id: ItemId | string, path: string, value: BigNumberish): Promise<void> => {
        await runTransaction(firestore, async (transaction) => {
            const ref = getDocRef(id);
            const refSnapshot = await transaction.get(ref);
            if (!refSnapshot.exists()) {
                throw new Error(`${col.path}/${id} not found`);
            }
            const incrValue = BigNumber.from(value);
            const currValueStr: BigNumberish = getFirestorePathValue(refSnapshot.data(), path) ?? "0";
            const currValue = BigNumber.from(currValueStr);
            const newValue = currValue.add(incrValue);

            transaction.update(ref, { [path]: newValue.toString() });
        });
    };

    /**
     * Decrement value
     * @param id
     * @param path key or nested key
     * @param value
     */
    const decrement = async (id: ItemId | string, path: string, value: BigNumberish): Promise<void> => {
        return increment(id, path, BigNumber.from("0").sub(BigNumber.from(value)));
    };

    return {
        collection: col,
        doc: getDocRef,
        get,
        getBatch,
        getAll,
        getWhereQuery,
        getWhere,
        getWhereCount,
        getWhereFirst,
        set,
        setBatch,
        getOrCreate,
        getWhereFirstOrCreate,
        update,
        updateBatch,
        deleteBatch,
        delete: deleteById,
        deleteAll,
        increment,
        decrement,
    } satisfies CrudWebWrapper<ItemData, ItemIdPartial>;
}
