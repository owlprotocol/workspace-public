/***** Generics for Firebase Admin CRUD *****/
import { CollectionReference, Query, DocumentReference, UpdateData, Firestore } from "firebase-admin/firestore";
import { zip } from "lodash-es";
import { BigNumber, BigNumberish } from "@ethersproject/bignumber";
import crypto from "node:crypto";
import { getFirestorePathValue } from "../utils/getFirestorePathValue.js";
import { getFirestoreUpdateData } from "../utils/getFirestoreUpdateData.js";
import {
    CrudAdminWrapper,
    CrudValidators,
    ItemIdDefault,
    QueryOptions,
    getIdParamsDefault,
    joinSorted,
    omitIdDefault,
} from "../crud.js";

export function generateUUID({ id }: { id?: string }) {
    return {
        id: id ?? crypto.randomUUID(),
    };
}

export interface AccessControl<ItemData, AccessControlParams extends any[] = []> {
    readAccessCheck?: (item: ItemData, ...params: AccessControlParams) => boolean;
    setAccessCheck?: (item: ItemData, ...params: AccessControlParams) => boolean;
    updateAccessCheck?: (item: Partial<ItemData>, ...params: AccessControlParams) => boolean;
    deleteAccessCheck?: (item: ItemData, ...params: AccessControlParams) => boolean;
}

/**
 * Firebase CRUD Wrappers. create, get, getAll, update, delete, deleteAll and more
 * @template ItemData Generic type for collection data (data stored in documents)
 * @template ItemIdPartial Generic type for collection id (used to compute document path). Fields can be optional but validateId function must specify auto-generation
 * @param firestore Firestore instance
 * @param collectionPath Collection path (eg. `/users`)
 * @param validators Validators for id and data.
 *      By default, id validation is configured for `{ id?: string }` structure where ids are autogenerated with crypto.randomUUID().
 *      By default, data validation omits `id` field.
 * @param accessControl Access control functions for firebase admin. (Firestore Rules don't apply on admin)
 * @returns wrapper functions for access Firebase
 */
export function getFirebaseCRUD<
    ItemData extends Record<string, any>,
    ItemIdPartial extends Record<string, any> = ItemIdDefault,
    AccessControlParams extends any[] = [],
>(
    firestore: Firestore,
    collectionPath: string,
    validators?: CrudValidators<ItemData, ItemIdPartial>,
    options?: AccessControl<ItemData, AccessControlParams>,
) {
    type ItemId = Required<ItemIdPartial>;
    type Item = ItemId & ItemData;

    const {
        getId = joinSorted<ItemId>,
        getIdParams = getIdParamsDefault as unknown as (id: string) => ItemId,
        validateData = omitIdDefault,
        validateId = generateUUID as unknown as (idParams: ItemIdPartial) => ItemId,
    } = validators ?? {};

    const col = firestore.collection(collectionPath) as CollectionReference<ItemData>;
    const { readAccessCheck, setAccessCheck, updateAccessCheck, deleteAccessCheck } = options ?? {};

    const getDocRef = (id: ItemId | string): DocumentReference<ItemData> => {
        if (typeof id === "string") return col.doc(id);

        return col.doc(getId(validateId(id)));
    };

    /**
     * Get doc by id, no security checks
     * @param id
     * @returns doc by id
     */
    const _get = async (id: ItemId | string): Promise<Item> => {
        const ref = getDocRef(id);
        const refSnapshot = await ref.get();

        if (!refSnapshot.exists) {
            throw new Error(`${col.path}/${id} not found`);
        }

        return { ...refSnapshot.data(), ...getIdParams(ref.id) } as Item;
    };

    /**
     * Get doc by id
     * @param id
     * @params security checks
     * @returns doc by id
     */
    const get = async (id: ItemId | string, ...params: AccessControlParams): Promise<Item> => {
        const data = await _get(id);
        //check read access
        if (readAccessCheck && !readAccessCheck(data, ...params)) {
            throw new Error(`${col.path}/${id} permission-denied`);
        }

        return data;
    };

    /**
     * Get docs by id, no security checks
     * @param ids
     * @returns docs by id
     * //TODO: Is this the fastest way? https://stackoverflow.com/questions/59572943/is-there-a-way-to-batch-read-firebase-documents
     */
    const _getBatch = async (ids: ItemId[] | string[]): Promise<(Item | undefined)[]> => {
        const refSnapshots = await firestore.runTransaction(async (transaction) => {
            const operations = ids.map((id) => {
                const ref = getDocRef(id);
                return transaction.get(ref);
            });

            return await Promise.all(operations);
        });

        return refSnapshots.map((refSnapshot) => {
            return { ...refSnapshot.data(), ...getIdParams(refSnapshot.id) } as Item;
        });
    };

    /**
     * Get docs by id
     * @param ids
     * @param params security check
     * @returns docs by id
     */
    const getBatch = async (
        ids: ItemId[] | string[],
        ...params: AccessControlParams
    ): Promise<(Item | undefined)[]> => {
        let data = await _getBatch(ids);
        //Filter un-authorized results
        if (readAccessCheck) {
            data = data.filter((item) => (item ? readAccessCheck(item, ...params) : undefined));
        }

        return data;
    };

    /**
     * Get all docs, no security checks
     * @returns docs
     */
    const _getAll = async (): Promise<Item[]> => {
        const snapshot = await col.get();
        return snapshot.docs.map((refSnapshot) => {
            return { ...refSnapshot.data(), ...getIdParams(refSnapshot.id) } as Item;
        });
    };

    /**
     * Get all docs
     * @params security checks
     * @returns docs
     */
    const getAll = async (...params: AccessControlParams): Promise<Item[]> => {
        let data = await _getAll();

        //Filter un-authorized results
        if (readAccessCheck) {
            data = data.filter((item) => readAccessCheck(item, ...params));
        }

        return data;
    };

    /**
     * Returns filter query that can be used to get items, count the query or compose with additional queries.
     * @param filter, will try to match the key-value pairs of this object as `where(key, "==", value)` queries.
     *      For nested keys, this gets reformated as `where(key.subkey, "==", value)` similar as to the update function
     * @param options limit, orderBy, order
     * @returns firebase query object
     */
    const _getWhereQuery = (filter: Partial<ItemData>, options?: QueryOptions): Query<ItemData> => {
        const filterNested = getFirestoreUpdateData(validateData(filter));

        let query: Query | CollectionReference = col;
        Object.entries(filterNested).forEach(([key, value]) => {
            if (!query) query = col.where(key, "==", value);
            else query = query.where(key, "==", value);
        });
        if (options?.orderBy) {
            query = query.orderBy(options.orderBy, options.order ?? "asc");
        }
        if (options?.limit) {
            query.limit(options.limit);
        }

        return query as Query<ItemData>;
    };

    /**
     * Get docs that match filter, no security checks
     * @param filter, will try to match the key-value pairs of this object as `where(key, "==", value)` queries.
     *      For nested keys, this gets reformated as `where(key.subkey, "==", value)` similar as to the update function
     * @param options limit, orderBy, order
     * @returns docs
     */
    const _getWhere = async (filter: Partial<ItemData>, options?: QueryOptions): Promise<Item[]> => {
        const querySnapshot = await _getWhereQuery(filter, options).get();
        return querySnapshot.docs.map((refSnapshot) => {
            return { ...refSnapshot.data(), ...getIdParams(refSnapshot.id) } as Item;
        });
    };

    /**
     * Get docs that match filter
     * @param filter
     * @param options limit, orderBy, order
     * @params security checks
     * @returns docs
     */
    const getWhere = async (
        filter: Partial<ItemData>,
        options?: QueryOptions,
        ...params: AccessControlParams
    ): Promise<Item[]> => {
        let data = await _getWhere(filter, options); //Filter un-authorized results

        if (readAccessCheck) {
            data = data.filter((item) => readAccessCheck(item, ...params));
        }

        return data;
    };

    /**
     * Get docs that match filter count, no security checks
     * @param filter
     * @param options limit, orderBy, order
     * @returns docs
     */
    const _getWhereCount = async (filter: Partial<ItemData>, options?: QueryOptions): Promise<number> => {
        const querySnapshot = await _getWhereQuery(filter, options).count().get();
        return querySnapshot.data().count;
    };

    /**
     * Get first doc that matches filter, no security checks
     * @param filter
     * @param options orderBy, order
     * @returns
     */
    const _getWhereFirst = async (
        filter: Partial<ItemData>,
        options?: Omit<QueryOptions, "limit">,
    ): Promise<Item | undefined> => {
        const results = await _getWhere(filter, { ...options, limit: 1 });
        return results[0];
    };

    /**
     * Get first doc that matches filter
     * @param filter
     * @param options orderBy, order
     * @param security checks
     * @returns
     */
    const getWhereFirst = async (
        filter: Partial<ItemData>,
        options?: Omit<QueryOptions, "limit">,
        ...params: AccessControlParams
    ): Promise<Item | undefined> => {
        const data = await _getWhereFirst(filter, options);

        //check read access
        if (data && readAccessCheck && !readAccessCheck(data, ...params)) {
            throw new Error(`${col.path}/${data.id} permission-denied`);
        }

        return data;
    };

    /**
     * Set doc, returns id, no security checks
     * @param item (id optional)
     * @returns id (parameter or default autogenerated with crypto.randomUUID())
     */
    const _set = async (item: ItemIdPartial & ItemData): Promise<string> => {
        const id = validateId(item);
        const ref = getDocRef(id);
        await ref.set(validateData(item) as ItemData);
        return getId(id);
    };

    /**
     * Set doc, returns id
     * @param item (id optional)
     * @params security checks
     * @returns
     */
    const set = async (item: ItemIdPartial & ItemData, ...params: AccessControlParams): Promise<string> => {
        if (!setAccessCheck) {
            return _set(item);
        } else {
            return await firestore.runTransaction(async (transaction) => {
                const id = validateId(item);
                //if item can exists (has id), check permissions
                const ref = getDocRef(id);
                const refSnapshot = await transaction.get(ref);
                if (refSnapshot.exists) {
                    //check write access on existing data
                    if (!setAccessCheck(refSnapshot.data()!, ...params)) {
                        throw new Error(`${col.path}/${ref.id} permission-denied`);
                    }
                } else {
                    //check write access on new data
                    if (!setAccessCheck(item, ...params)) {
                        throw new Error(`${col.path}/${`${JSON.stringify(item)}`} permission-denied`);
                    }
                }

                transaction.set(ref, validateData(item) as ItemData);

                return getId(id);
            });
        }
    };

    /**
     * Set docs as a transaction (max 500 writes), no security checks
     * @param items (all with ids or none with ids)
     * @returns ids (parameter or default autogenerated with crypto.randomUUID())
     */
    const _setBatch = async (items: (ItemIdPartial & ItemData)[]): Promise<string[]> => {
        const ids = items.map(validateId);

        await firestore.runTransaction(async (transaction) => {
            const operations = zip(ids, items).map(([id, item]) => {
                const ref = getDocRef(id!);
                return transaction.set(ref, validateData(item!) as ItemData);
            });

            await Promise.all(operations);
        });

        return ids.map(getId);
    };

    /**
     * Set docs as a transaction (max 500 writes)
     * @param items (all with ids or none with ids)
     * @param params security checks
     * @returns ids (parameter or default autogenerated with crypto.randomUUID())
     */
    const setBatch = async (items: (ItemIdPartial & ItemData)[], ...params: AccessControlParams): Promise<string[]> => {
        if (!setAccessCheck) {
            return _setBatch(items);
        } else {
            const ids = items.map(validateId);

            await firestore.runTransaction(async (transaction) => {
                //if items can exists (has id), check permissions
                const snapshot = await Promise.all(
                    ids.map((id) => {
                        const ref = getDocRef(id);
                        return transaction.get(ref);
                    }),
                );
                zip(items, snapshot).forEach(([item, ref]) => {
                    if (ref!.exists) {
                        //check write access on existing data
                        if (!setAccessCheck(ref!.data()!, ...params)) {
                            throw new Error(`${col.path}/${ref!.id} permission-denied`);
                        }
                    } else {
                        //check write access on new data
                        if (!setAccessCheck(item!, ...params)) {
                            throw new Error(`${col.path}/${`${JSON.stringify(item)}`} permission-denied`);
                        }
                    }
                });

                const operations = zip(items, ids).map(([item, id]) => {
                    const ref = getDocRef(id!);
                    return transaction.set(ref, validateData(item!) as ItemData);
                });

                await Promise.all(operations);
            });

            return ids.map(getId);
        }
    };

    /**
     * Get doc or create new one, no security checks
     * @param id
     * @param initialValue
     * @returns doc or initialValue
     */
    const _getOrCreate = async (id: ItemId | string, initialValue: ItemData): Promise<Item> => {
        const ref = getDocRef(id);
        const initialValueValidated = validateData(initialValue) as ItemData;

        const dataExisting = await firestore.runTransaction(async (transaction) => {
            const refSnapshot = await transaction.get(ref);
            if (!refSnapshot.exists) {
                transaction.set(ref, initialValueValidated);
                return undefined;
            } else {
                return refSnapshot.data();
            }
        });

        const data = dataExisting
            ? { ...dataExisting, ...getIdParams(ref.id) }
            : { ...initialValueValidated, ...getIdParams(ref.id) };
        return data as Item;
    };

    /**
     * Get doc or create new one
     * @param id
     * @param initialValue
     * @returns doc or initialValue
     */
    const getOrCreate = async (
        id: ItemId | string,
        initialValue: ItemData,
        ...params: AccessControlParams
    ): Promise<Item> => {
        if (!setAccessCheck && !readAccessCheck) {
            return _getOrCreate(id, initialValue);
        } else {
            const ref = getDocRef(id);
            const initialValueValidated = validateData(initialValue) as ItemData;

            const dataExisting = await firestore.runTransaction(async (transaction) => {
                const refSnapshot = await transaction.get(ref);
                if (!refSnapshot.exists) {
                    if (setAccessCheck) {
                        //check write access on new data
                        if (!setAccessCheck(initialValueValidated, ...params)) {
                            throw new Error(`${col.path}/${id} permission-denied`);
                        }
                    }
                    transaction.set(ref, initialValueValidated);
                    return undefined;
                } else {
                    const data = refSnapshot.data()!;
                    if (readAccessCheck) {
                        //check write access on new data
                        if (!readAccessCheck(initialValueValidated, ...params)) {
                            throw new Error(`${col.path}/${id} permission-denied`);
                        }
                    }

                    return data;
                }
            });

            const data = dataExisting
                ? { ...dataExisting, ...getIdParams(ref.id) }
                : { ...initialValueValidated, ...getIdParams(ref.id) };

            return data;
        }
    };

    /**
     * Get first doc that matches filter or create new one, no security checks
     * WARNING: NOT executed as transaction (only get supported in transaction)
     * @param filter
     * @param initialValue
     * @param options orderBy, order
     * @returns doc or initialValue
     */
    const _getWhereFirstOrCreate = async (
        filter: Partial<ItemData>,
        initialValue: ItemIdPartial & ItemData,
        options?: Omit<QueryOptions, "limit">,
    ): Promise<Item> => {
        const existing = await _getWhereFirst(filter, options);
        if (!existing) {
            const id = await _set(initialValue);
            return { ...validateData(initialValue), ...getIdParams(id) } as Item;
        }
        return existing;
    };

    /**
     * Get first doc that matches filter or create new one
     * WARNING: NOT executed as transaction (only get supported in transaction)
     * @param filter
     * @param initialValue
     * @param options orderBy, order
     * @returns doc or initialValue
     */
    const getWhereFirstOrCreate = async (
        filter: Partial<ItemData>,
        initialValue: ItemIdPartial & ItemData,
        options?: Omit<QueryOptions, "limit">,
        ...params: AccessControlParams
    ): Promise<Item> => {
        const existing = await getWhereFirst(filter, options, ...params);
        if (!existing) {
            const id = await set(initialValue, ...params);
            return { ...validateData(initialValue), ...getIdParams(id) } as Item;
        }
        return existing;
    };

    /**
     * Update existing doc, no security checks
     * @param item
     * @returns
     */
    const _update = async (item: ItemId & Partial<ItemData>): Promise<void> => {
        const ref = getDocRef(item);
        await ref.update(getFirestoreUpdateData(validateData(item)) as UpdateData<ItemData>);
    };

    /**
     * Update existing doc
     * @param item
     * @params security checks
     * @returns
     */
    const update = async (item: ItemId & Partial<ItemData>, ...params: AccessControlParams): Promise<void> => {
        if (!updateAccessCheck) {
            _update(item);
        } else {
            await firestore.runTransaction(async (transaction) => {
                const ref = getDocRef(item);
                const refSnapshot = await transaction.get(ref);
                if (!refSnapshot.exists) {
                    throw new Error(`${col.path}/${ref.id} not found`);
                }

                //check write access on existing data
                if (!updateAccessCheck(refSnapshot.data()!, ...params)) {
                    throw new Error(`${col.path}/${ref.id} permission-denied`);
                }

                transaction.update(ref, getFirestoreUpdateData(validateData(item)) as UpdateData<ItemData>);
            });
        }
    };

    /**
     * Update existing docs as a transaction (max 500 writes), no security checks
     * @param items
     * @returns
     */
    const _updateBatch = async (items: (ItemId & Partial<ItemData>)[]): Promise<void> => {
        await firestore.runTransaction(async (transaction) => {
            const operations = items.map((item) => {
                const ref = getDocRef(item);
                return transaction.update(ref, getFirestoreUpdateData(validateData(item)) as UpdateData<ItemData>);
            });

            await Promise.all(operations);
        });
    };

    /**
     * Update docs as a transaction (max 500 writes)
     * @param items
     * @param params security checks
     * @returns ids (parameter or default autogenerated with crypto.randomUUID())
     */
    const updateBatch = async (
        items: (ItemId & Partial<ItemData>)[],
        ...params: AccessControlParams
    ): Promise<void> => {
        if (!updateAccessCheck) {
            return _updateBatch(items);
        } else {
            const refs = items.map(getDocRef);

            await firestore.runTransaction(async (transaction) => {
                const snapshot = await Promise.all(
                    refs.map((ref) => {
                        return transaction.get(ref);
                    }),
                );
                snapshot.forEach((ref) => {
                    if (!ref.exists) {
                        throw new Error(`${col.path}/${ref.id} not found`);
                    }
                    //check write access on existing data
                    if (!updateAccessCheck(ref.data()!, ...params)) {
                        throw new Error(`${col.path}/${ref.id} permission-denied`);
                    }
                });

                const operations = zip(items, refs).map(([item, ref]) => {
                    return transaction.update(
                        ref!,
                        getFirestoreUpdateData(validateData(item!)) as UpdateData<ItemData>,
                    );
                });

                await Promise.all(operations);
            });
        }
    };

    /**
     * Delete doc, no security checks
     * @param id
     * @returns
     */
    const _deleteById = async (id: ItemId | string): Promise<void> => {
        const ref = getDocRef(id);
        await ref.delete();
    };

    /**
     * Delete doc
     * @param id
     * @params security checks
     * @returns
     */
    const deleteById = async (id: ItemId | string, ...params: AccessControlParams): Promise<void> => {
        if (!deleteAccessCheck) {
            _deleteById(id);
        } else {
            await firestore.runTransaction(async (transaction) => {
                const ref = getDocRef(id);
                const refSnapshot = await transaction.get(ref);
                if (!refSnapshot.exists) {
                    throw new Error(`${col.path}/${ref.id} not found`);
                }

                //check write access on existing data
                if (!deleteAccessCheck(refSnapshot.data()!, ...params)) {
                    throw new Error(`${col.path}/${ref.id} permission-denied`);
                }

                transaction.delete(ref);
            });
        }
    };

    /**
     * Delete docs as transaction (max 500 writes), no security checks
     */
    const _deleteBatch = async (ids: ItemId[] | string[]): Promise<void> => {
        const refs = ids.map(getDocRef);

        await firestore.runTransaction(async (transaction) => {
            const operations = refs.map((ref) => {
                return transaction.delete(ref);
            });

            await Promise.all(operations);
        });
    };

    /**
     * Delete docs as transaction (max 500 writes)s
     * @param ids
     * @param params security checks
     * @returns ids (parameter or default autogenerated with crypto.randomUUID())
     */
    const deleteBatch = async (ids: ItemId[] | string[], ...params: AccessControlParams): Promise<void> => {
        if (deleteAccessCheck) {
            const refs = ids.map(getDocRef);

            await firestore.runTransaction(async (transaction) => {
                const snapshot = await Promise.all(
                    refs.map((ref) => {
                        return transaction.get(ref);
                    }),
                );
                snapshot.forEach((ref) => {
                    if (!ref.exists) {
                        throw new Error(`${col.path}/${ref.id} not found`);
                    }
                    //check write access on existing data
                    if (!deleteAccessCheck(ref.data()!, ...params)) {
                        throw new Error(`${col.path}/${ref.id} permission-denied`);
                    }
                });

                const operations = refs.map((ref) => {
                    return transaction.delete(ref);
                });

                await Promise.all(operations);
            });
        } else {
            return _deleteBatch(ids);
        }
    };

    /**
     * Delete all docs, no security checks
     */
    const _deleteAll = async (): Promise<void> => {
        await firestore.runTransaction(async (transaction) => {
            const snapshot = await col.get();
            const operations = snapshot.docs.map((doc) => {
                const ref = col.doc(doc.id);
                return transaction.delete(ref);
            });

            await Promise.all(operations);
        });
    };

    /**
     * Delete all docs
     * @param params security checks
     * @returns ids (parameter or default autogenerated with crypto.randomUUID())
     */
    const deleteAll = async (...params: AccessControlParams): Promise<void> => {
        if (deleteAccessCheck) {
            await firestore.runTransaction(async (transaction) => {
                const snapshot = await col.get();

                snapshot.forEach((ref) => {
                    //check write access on existing data
                    if (!deleteAccessCheck(ref.data()!, ...params)) {
                        throw new Error(`${col.path}/${ref.id} permission-denied`);
                    }
                });

                const operations = snapshot.docs.map((doc) => {
                    const ref = col.doc(doc.id);
                    return transaction.delete(ref);
                });

                await Promise.all(operations);
            });
        } else {
            return _deleteAll();
        }
    };

    /**
     * Increment value, no security checks
     * @param id
     * @param path key or nested key
     * @param value
     */
    const _increment = async (id: ItemId | string, path: string, value: BigNumberish): Promise<void> => {
        await firestore.runTransaction(async (transaction) => {
            const ref = getDocRef(id);
            const refSnapshot = await transaction.get(ref);
            if (!refSnapshot.exists) {
                throw new Error(`${col.path}/${id} not found`);
            }

            const incrValue = BigNumber.from(value);
            const currValueStr: BigNumberish = getFirestorePathValue(refSnapshot.data(), path) ?? "0";
            const currValue = BigNumber.from(currValueStr);
            const newValue = currValue.add(incrValue);

            transaction.update(ref, { [path]: newValue.toString() } as UpdateData<ItemData>);
        });
    };

    /**
     * Increment value
     * @param id
     * @param path key or nested key
     * @param value
     * @params security checks
     */
    const increment = async (
        id: ItemId | string,
        path: string,
        value: BigNumberish,
        ...params: AccessControlParams
    ): Promise<void> => {
        if (!updateAccessCheck) {
            return _increment(id, path, value);
        } else {
            await firestore.runTransaction(async (transaction) => {
                const ref = getDocRef(id);
                const refSnapshot = await transaction.get(ref);
                if (!refSnapshot.exists) {
                    throw new Error(`${col.path}/${id} not found`);
                }
                //check write access on existing data
                if (updateAccessCheck && !updateAccessCheck(refSnapshot.data()!, ...params)) {
                    throw new Error(`${col.path}/${ref.id} permission-denied`);
                }

                const incrValue = BigNumber.from(value);
                const currValueStr: BigNumberish = getFirestorePathValue(refSnapshot.data(), path) ?? "0";
                const currValue = BigNumber.from(currValueStr);
                const newValue = currValue.add(incrValue);

                transaction.update(ref, { [path]: newValue.toString() } as UpdateData<ItemData>);
            });
        }
    };

    /**
     * Decrement value, no security checks
     * @param id
     * @param path key or nested key
     * @param value
     * @params security checks
     */
    const _decrement = async (id: ItemId | string, path: string, value: BigNumberish): Promise<void> => {
        return _increment(id, path, BigNumber.from("0").sub(BigNumber.from(value)));
    };

    /**
     * Decrement value
     * @param id
     * @param path key or nested key
     * @param value
     */
    const decrement = async (
        id: ItemId | string,
        path: string,
        value: BigNumberish,
        ...params: AccessControlParams
    ): Promise<void> => {
        return increment(id, path, BigNumber.from("0").sub(BigNumber.from(value)), ...params);
    };

    return {
        collection: col,
        doc: getDocRef,
        _get,
        get,
        _getBatch,
        getBatch,
        _getAll,
        getAll,
        _getWhereQuery,
        _getWhere,
        getWhere,
        _getWhereCount,
        _getWhereFirst,
        getWhereFirst,
        _set,
        set,
        _setBatch,
        setBatch,
        _getOrCreate,
        getOrCreate,
        _getWhereFirstOrCreate,
        getWhereFirstOrCreate,
        _update,
        update,
        _updateBatch,
        updateBatch,
        _delete: _deleteById,
        delete: deleteById,
        _deleteBatch,
        deleteBatch,
        _deleteAll,
        deleteAll,
        _increment,
        increment,
        _decrement,
        decrement,
    } satisfies CrudAdminWrapper<ItemData, ItemIdPartial>;
}
