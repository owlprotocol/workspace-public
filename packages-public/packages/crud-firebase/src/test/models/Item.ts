import { z } from "zod";
/** Item with single autogenerated uuid */
export interface ItemId {
    readonly id?: string;
}

export interface ItemData {
    readonly name: string;
    readonly value: string;
    //TODO: Add support for bigint by adding optional decodeData validator
    // readonly valueBig?: bigint;
    readonly count: number;
    readonly owner: string;
    readonly map: {
        [k: string]: string;
    };
    readonly objectArray: Array<Record<string, any>>;
}
export const itemDataZod = z
    .object({
        name: z.string().describe("string"),
        value: z.string().describe("value"),
        // valueBig: z.bigint().optional().describe("valueBig"),
        count: z.number().describe("number"),
        owner: z.string().describe("owner"),
        map: z.record(z.string(), z.string()).describe("map"),
        objectArray: z.array(z.record(z.string(), z.string())).describe("objectArray"),
    })
    .describe("team");
export const encodeItemData: (data: ItemData) => ItemData = itemDataZod.parse;
export const encodeItemDataPartial: (data: Partial<ItemData>) => Partial<ItemData> = itemDataZod.partial().parse;

export type Item = Required<ItemId> & ItemData;

/** ItemComposite with composite id */
export interface ItemCompositeId {
    readonly idPrefix: string;
    readonly idSuffix: string;
}

export type ItemComposite = Required<ItemCompositeId> & ItemData;
