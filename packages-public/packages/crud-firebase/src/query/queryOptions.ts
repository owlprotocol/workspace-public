import { UseQueryOptions } from "@tanstack/react-query";
import { FirebaseCollectionKey, ResourceIdDefault, ResourceQueryOptions } from "../resource.js";

export type RootKey = "__firebase__";
export const ROOT_KEY: RootKey = "__firebase__";

/**
 * Firebase Query React Query options
 * Created from a `FirebaseQueryResource` with the query functions
 * and returns helpers compatible with react-query
 *
 * Common Query operations for a resource defined on a collection (eg. /users) or group collection (eg. /xxx/users).
 * Note: id-based access is NOT possible with collection groups. See `FirebaseResource` for more complete interface
 * @template ResourceData Resource data
 * @template ResourceIdPartial Resource id params (some params may be optional if can be autogenerated)
 * @template Resource Full resource, join collection, data, & id
 */
export interface FirebaseQueryReactQueryOptions<
    ResourceData extends Record<string, any>,
    ResourceIdPartial extends Record<string, any>,
    Resource extends Required<ResourceIdPartial> & ResourceData = Required<ResourceIdPartial> & ResourceData,
> {
    getAllOptions: (
        options?: ResourceQueryOptions,
    ) => UseQueryOptions<
        Resource[],
        Error,
        Resource[],
        readonly [RootKey, FirebaseCollectionKey, "getAll", ResourceQueryOptions | undefined]
    >;
    getWhereOptions: (
        filter: Partial<ResourceData>,
        options?: ResourceQueryOptions,
    ) => UseQueryOptions<
        Resource[],
        Error,
        Resource[],
        readonly [RootKey, FirebaseCollectionKey, "getWhere", Partial<ResourceData>, ResourceQueryOptions | undefined]
    >;
    getWhereCountOptions: (
        filter: Partial<ResourceData>,
        options?: ResourceQueryOptions,
    ) => UseQueryOptions<
        number,
        Error,
        number,
        readonly [
            RootKey,
            FirebaseCollectionKey,
            "getWhereCount",
            Partial<ResourceData>,
            ResourceQueryOptions | undefined,
        ]
    >;
    getWhereFirstOptions: (
        filter: Partial<ResourceData>,
        options?: Omit<ResourceQueryOptions, "limit">,
    ) => UseQueryOptions<
        Resource | undefined,
        Error,
        Resource | undefined,
        readonly [
            RootKey,
            FirebaseCollectionKey,
            "getWhereFirst",
            Partial<ResourceData>,
            Omit<ResourceQueryOptions, "limit"> | undefined,
        ]
    >;
}

/**
 * Firebase Resource React Query options
 * Takes as input a `FirebaseResource` with the query functions
 * and returns helpers compatible with react-query
 *
 * TODO: Support mutations for full compatibility with `FirebaseResource`
 * @template ResourceData Resource data
 * @template ResourceIdPartial Resource id params (some params may be optional if can be autogenerated)
 * @template Resource Full resource, join collection, data, & id
 */
export interface FirebaseResourceReactQueryOptions<
    ResourceData extends Record<string, any>,
    ResourceIdPartial extends Record<string, any> = ResourceIdDefault,
    Resource extends Required<ResourceIdPartial> & ResourceData = Required<ResourceIdPartial> & ResourceData,
> extends FirebaseQueryReactQueryOptions<ResourceData, ResourceIdPartial, Resource> {
    getOptions: (
        id: string | Required<ResourceIdPartial>,
    ) => UseQueryOptions<Resource, Error, Resource, readonly [RootKey, FirebaseCollectionKey, "get", string]>;
    //TODO: Seems like opportuniy for sharing keys here. For now isolate for safety.
    getOrUndefinedOptions: (
        id: string | Required<ResourceIdPartial>,
    ) => UseQueryOptions<
        Resource | undefined,
        Error,
        Resource | undefined,
        readonly [RootKey, FirebaseCollectionKey, "getOrUndefined", string]
    >;
    //TODO: Can we do structural sharing? Batch is more efficient on network, but cache keys won't match here
    getBatchOptions: (
        ids: string[] | Required<ResourceIdPartial>[],
    ) => UseQueryOptions<
        (Resource | undefined)[],
        Error,
        (Resource | undefined)[],
        readonly [RootKey, FirebaseCollectionKey, "getBatch", string[]]
    >;
}

/**
 * Return factory function for generating Firebase Resource Query Options when dealing with subcollections.
 * @template CollectionId Subcollection Params
 * @template ResourceData Resource data
 * @template ResourceIdPartial Resource id params (some params may be optional if can be autogenerated)
 * @template Resource Full resource, join collection, data, & id
 */
export type FirebaseResourceReactQueryOptionsFactory<
    CollectionId extends Record<string, any>,
    ResourceData extends Record<string, any>,
    ResourceIdPartial extends Record<string, any> = ResourceIdDefault,
    Resource extends Required<ResourceIdPartial> & ResourceData = Required<ResourceIdPartial> & ResourceData,
> = (params: CollectionId) => FirebaseResourceReactQueryOptions<ResourceData, ResourceIdPartial, Resource>;
